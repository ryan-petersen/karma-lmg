/*! karma.footer.js v.2.9.1 2017-03-17 */
(function(window){
var karma = karma || {};
/* modules/footer/components/__vars.js */
/* mdp globals */
window.mdp = window.mdp || {app:{}};
// TEST: window.mdp.app exists and is an object
mdp.app = mdp.app || {};

/* globals  */
// TEST: window.adService exists and is an object
window.adService = window.adService || {};
// TEST: adService has a boolean property called adService.useSSL
window.adService.useSSL = true;
// TEST: window.googletag exists and is an object
window.googletag = window.googletag || {};
// TEST: window.googletag.cmd has a method called push
googletag.cmd = googletag.cmd || [];
// TEST: window.ybotq exists and is an object
window.ybotq = window.ybotq || [];
/* modules/footer/components/_config.js */
karma.config = (function() {
    "use strict";
    var configSite,
        configEnv,
        configPath,
        karmaConfigParam,
        isLocalConfig;

    function getVersion(){
        // TEST: the version in getVersion matches the comment at the top of the loaded config file
        return "1.10.0";
    }


    function load() {

        function getMinorVersion(){
            return getVersion().replace(/^(.*)\.(.*)$/, "$1");
        }

        function getConfigEnv(){
            // TEST: On any URL that has adTestEnv=[local|dev|test|www] in the query string (and that does not have localConfig set to true), the KARMA REST service config is pulled in from the specified environment
            // TEST: if the URL query string contains karmaConfig, cached versions of the config are ignored, and the KARMA config service pulls off the specified environment
            // TEST: if the URL query string contains karmaConfig=local, the KARMA REST config service pulls off the local machine
            // TEST: On any URL that has adTestEnv=[local|dev|test|www] in the query string (and that does not have localConfig set to true), the KARMA REST service config is pulled in from the specified environment
            karmaConfigParam = karmaConfigParam || karma.urlVars.get('karmaConfig');
            isLocalConfig = (karmaConfigParam === 'local');
            configEnv = (karmaConfigParam && karmaConfigParam.match(/^local|dev|test$/) ? karmaConfigParam : adService.environment);
            configEnv = configEnv || 'www';
            return configEnv;
        }

        function generateConfigPath(site){            
            site = site || configSite;
            
            // TEST: if the adService config contains a toggle called localConfig, and it's set to true, the KARMA REST config service pulls off the specified file path
            // TEST: the KARMA REST config service is pulled off https://karma.mdpcdn.com
    
            var configEnvPrefix = (configEnv.match(/^dev|test/) || isLocalConfig) ? configEnv + '.' : '';
            
            configPath = 'https://' + configEnvPrefix + "karma.mdpcdn.com" + (isLocalConfig ? ':9999' : '') + "/configs/" + getMinorVersion() + "/" + site + '.js';
            
            return configPath;
        }

        function fetchConfig(onError, successMsg){
            karma.performance.log({ label: 'ConfigFetchStart' });
            // TEST: if the requested site config fails to load, default.mdp.com is pulled in instead
            successMsg = successMsg || 'Loaded static config! ' + configPath;
            onError = onError || function error() { 
                if(configSite === 'email.mdp.com'){
                    karma.performance.log('Email address detected in the URL. Halting the ad request.', { forceMessage: true, color: 'red' }); 
                }else{
                    karma.performance.log('Failed to load static config! ' + configPath + ', trying for default.mdp.com', { forceMessage: true, color: 'red' }); 
                    configPath = generateConfigPath('default.mdp.com');
                    karma.utilities.fetchResource(configPath, 
                        function success(){ karma.performance.log('Loaded static config! ' + configPath, { forceMessage: true }); }, 
                        function error(){ karma.performance.log('Failed to load default static config! ' + configPath, { forceMessage: true, color: 'red' }); 
                    }); 
                }
            };
            karma.utilities.fetchResource(configPath, function success(){ karma.performance.log(successMsg); }, onError);
        }

        configSite = karma.targeting.adunit.getConfigAdDomain().replace(/^test\./, '');
        karmaConfigParam = karma.urlVars.get('karmaConfig');
        configEnv = getConfigEnv();
        configPath = generateConfigPath();        

        var storedConfig = karma.config.storage.check(configSite, configEnv, getVersion()); //Check for a stored config that matches the current adDomain and environment
            
        // TEST: Config service was successfully called and/or a cached version was retrieved from localStorage
        if (!karmaConfigParam && typeof storedConfig === "object"){  
            // TEST: If there is a valid stored config and there are no config URL params, use the stored config
            karma.performance.log('Loading Config from LocalStorage.', {
                forceMessage: true
            });
            window.adSetup(storedConfig);
        } else {
            fetchConfig();
        }                            
    }
    
    function process(ads) {
        
        function mapRestValuesToAdService() {
            if (adService.siteSettings !== false) {
                var configPreferredProperties = ['refreshSlotTypes'],
                    siteSettings = adService.siteSettings;

                Object.keys(siteSettings).forEach(function(prop){
                    /* copy the REST value to the config */
                    if (configPreferredProperties.indexOf(prop) === -1 || !adService.hasOwnProperty(prop)) {
                        adService[prop] = adService.siteSettings[prop];
                    }
                });
            }
            karma.urlVars.setTestValues('service');
        }

        /* store the data returned by the JSON in our adService object */
        if (ads.gptAds !== undefined && ads.gptAds.adSlots !== undefined) {          

            // TEST: Site-specific settings were retrieved from the REST service
            // TEST: if siteSpecific slots are defined, they're added to the list of ad slots    
            var siteSettings = karma.utilities.clone(ads.gptAds.siteSettings),
                siteSpecificSlots = karma.utilities.clone(ads.gptAds.siteSpecificSlots),
                slotConfigs,
                pageType = karma.targeting.get('type');

            // TEST: the value of the config is stored in local storage
            karma.config.storage.set(adService.unitValues.adDomain, ads, configEnv);

            // TEST: if pageSpecificSettings are defined for this page type, those override the defaults
            if (siteSettings.hasOwnProperty('pageSpecificSettings') && siteSettings.pageSpecificSettings.hasOwnProperty(pageType)) {
                siteSettings = karma.utilities.extend(siteSettings, siteSettings.pageSpecificSettings[pageType]);                                    
            }

            // TEST: page targeting defined in the config trumps page-level targeting            
            if (siteSettings.hasOwnProperty('pageTargeting')) {
                Object.keys(siteSettings.pageTargeting).forEach(function(key){
                    karma.targeting.set(key, siteSettings.pageTargeting[key]);
                });  
            }

            // TEST: page-level docking overrides config-level docking
            if (window.adService.hasOwnProperty('docking') && Object.keys(adService.docking).length > 0) {
                siteSettings.docking = karma.utilities.extend(siteSettings.docking, window.adService.docking);
            }

            adService.siteSettings = siteSettings || false;
            slotConfigs = karma.config.slots.buildPageSlotConfigs(karma.dom.scrapeSlots(), siteSettings, adService.unitValues.adDomain, siteSpecificSlots); //Arguments: page slots, site settings, site, site specific slots from config
            adService.adSlots = adService.adSlots.concat(slotConfigs.adSlots);
            adService.lazyLoadSlots = slotConfigs.lazyLoadSlots;

            // TEST: All values in adService.siteSettings are copied over to adService. REST service values trump hardcoded config values, except for adDomain            
            mapRestValuesToAdService();
        } else {
            karma.performance.log("No response received from the service");
        }
    }

    return {
        load: load,
        process: process,
        getVersion: getVersion
    };
}());

/* modules/footer/components/_docking.js */
karma.docking = (function(){
    "use strict";
	var styleSheetCss = '',
		styleSheet;
	
    function processAdditionalLogic(params) {
        // TEST: if additional logic is defined, it's considered before enabling docking
        if(!params || !Array.isArray(params)){
            return false;
        }
        var l = params.length,
        	dockBanner = true;
        while(l--) {
            if (!eval(params[l])) {
                dockBanner = false;
                break;
            }
        }
        return dockBanner;
    }

    function appendStyleSheetCss(css) {
    	// TEST: a stylesheet is appended to the document with docking styles for the leaderboard and right rail
        styleSheetCss += css;
        var existingStyleSheet = document.getElementById('dockingStyles');

        if (styleSheetCss.length > 0){
            if(existingStyleSheet === null) {
                styleSheet = document.createElement('style');
                styleSheet.id = 'dockingStyles';
                styleSheet.innerHTML = styleSheetCss;
                var head = document.getElementsByTagName('head')[0];
                head.appendChild(styleSheet);
            }else{
                existingStyleSheet.innerHTML = styleSheetCss;
            }
        }
    }

    function targeting(){
        // TEST: On pages where the leaderboard is permanently docked, a page targeting value of "dockedleaderboard" should be present and set to "true"
        // TEST: On pages where the right rail is docked, a page targeting value of "dockedrail" should be present and set to "true"
        if(adService.docking){
            var settings, types = ['leaderboard', 'rail'], l = types.length, type, permaDocked;
            while(l--){
                type = types[l];
                settings = adService.docking[type];
                if(settings){
                    permaDocked = (type === 'leaderboard') ? (settings.hasOwnProperty('rollUp') && settings.rollUp === false) : true;
                    if (karma.docking[type].isEnabled() && permaDocked){
                        karma.targeting.set('docked'+type, 'true');            
                    }
                }
            }
        }
    }

    return {
    	processAdditionalLogic: processAdditionalLogic,
        appendStyleSheetCss: appendStyleSheetCss,
        targeting: targeting
    };
}());
/* modules/footer/components/_partner.js */
karma.partner = (function(){
    "use strict";
    var partnerInitExecuted = false,
        timerRunning = false,
        setupRunning = false,
        partnerTimer,
        partnersToCheck = ['pubmatic', 'header_tag_manager', 'yieldbot', 'indexExchange', 'rubicon', 'apnx', 'a9'],
        partnersToLoad = [],
        nonHTMPartners = ['a9']; // partners not managed by Header Tag Manager

    function proceedToSetup(forceLoad) {
        function areAllLoaded() {
            var tl = partnersToLoad.length, partnerToCheck, loadedPartners = [];
            while(tl--){
                partnerToCheck = partnersToLoad[tl];
                if(!adService[partnerToCheck + 'Enabled'] || adService[partnerToCheck + 'Loaded']){
                    loadedPartners.push(partnerToCheck);
                }
            }
            return (loadedPartners.length >= partnersToLoad.length);
        }
        
        /* Wait for all 3rd parties to complete - unless the timer overwrote us */
        if (!forceLoad && !areAllLoaded()) {
            return;
        }

        /* Make sure we don't run this twice... in case it was already kicked off somewhere else*/
        if (setupRunning) {
            return;
        }
        setupRunning = true;

        /* Clear timeout if we're good to go but still counting down */
        if (timerRunning && !forceLoad){
            clearTimeout(partnerTimer);
        }
        karma.timeline.proceedToFinish('slotConfig');
    }
        // TEST: adService has a property called partnerTimeout that defines the window within which we contact our partners before the ad request

        // TEST: adService has a property called partnerRefreshTimeout that defines the window within which we contact our partners when refreshing ads

        // TEST: if partners haven't returned bids by the end of the timeout, we move on without them    

    function isEnabled(partner){
        return adService[partner + 'Enabled'];
    }

    function buildSlots(partner, slotConfigs){  
        // TEST: if a partner is enabled, we have an array called adService.[partner]Slots      
        var adSlots = slotConfigs || adService.adSlots,
            l = adSlots.length;

        if(!isEnabled(partner)){
            return false;
        }

        adService[partner + 'SlotCatalog'] = adService[partner + 'SlotCatalog'] || {};
        adService[partner + 'Slots'] = {};
        while(l--){
            if(adSlots[l].hasOwnProperty(partner) && adSlots[l][partner] === true && karma.slots.isValidSlotForDevice(adSlots[l])){
                adService[partner + 'SlotCatalog'][adSlots[l].slotContainer] = adSlots[l];
                adService[partner + 'Slots'][adSlots[l].slotContainer] = adSlots[l];
            }
        }
    }

     function removeSlotFromAll(slotId){        
        var pl = partnersToLoad.length, partner, partnerSlots;
        // TEST: removes a slot from the adService.[partner]Slots array for all partners
        while(pl--){
            partner = partnersToLoad[pl];
            if(isEnabled(partner) && adService.hasOwnProperty(partner + 'SlotCatalog')){
                partnerSlots = adService[partner + 'SlotCatalog'];
                if(partnerSlots.hasOwnProperty(slotId)){
                    delete partnerSlots[slotId];
                }
            }
        }
    }

    function init(){
        function hasSlots(partner){
            // TEST: returns a boolean if adService.[partner]Slots is greater than zero
            return (adService.hasOwnProperty(partner + 'SlotCatalog') && Object.keys(adService[partner+'SlotCatalog']).length > 0);
        }

        function loadAll(){    
            // TEST: starts the process of loading partners
            /* Load the third parties, kicking off timers as necessary */
            var tl = partnersToLoad.length, partnerToLoad;
            while(tl--){
                partnerToLoad = partnersToLoad[tl];
                if(karma.utilities.hasMethod('load', karma.partner[partnerToLoad])){
                    karma.partner[partnerToLoad].load();
                }                    
            }
        }

        if (partnerInitExecuted===true) {
            return;
        }
        partnerInitExecuted = true;
        /* slot check, disable 3rd parties if nowhere to put them */
        var tp = partnersToCheck.length, partnerToCheck;
        while(tp--){
            partnerToCheck = partnersToCheck[tp];
            // INSERT START - RVDEV-1191 - Index Container Tag Integration
            if (partnerToCheck === 'header_tag_manager' && isEnabled(partnerToCheck)) {
                partnersToLoad.push(partnerToCheck);
                continue;
            }
            // INSERT END - RVDEV-1191 - Index Container Tag Integration

            if(karma.utilities.hasMethod('configCheck', karma.partner[partnerToCheck])){
                karma.partner[partnerToCheck].configCheck();
            }

            if(isEnabled(partnerToCheck)){
                buildSlots(partnerToCheck);

                // TEST: if adService.siteSettings.[partner]Enabled is set to true, but adService.[partner]Slots is empty, adService.[partner]Enabled gets set to false
                if (!hasSlots(partnerToCheck)) {
                    karma.log('No slots were available for ' + partnerToCheck + '... disabling ' + partnerToCheck);
                    adService[partnerToCheck + 'Enabled'] = false;
                }
            }
            
            if(adService[partnerToCheck + 'Enabled']){
                partnersToLoad.push(partnerToCheck);
            }
        }

        // TEST: if all partners are disabled except for header tag manager, disable header bidding 
        var nonHTMPartnersToLoad = partnersToLoad.filter(function(v){ return (v !== 'header_tag_manager'); });
        if(nonHTMPartnersToLoad.length === 0 || nonHTMPartnersToLoad.sort().toString() === nonHTMPartners.sort().toString()){
          partnersToLoad = nonHTMPartnersToLoad;
          adService.header_tag_managerEnabled = false;
        }

        // TEST: if the karma.partner.header_tag_manager module is included, but Header Tag manager is turned off, turn off all other partners (except A9)
        if (!!karma.partner.header_tag_manager && !adService.header_tag_managerEnabled) {
            karma.log('Index is disabled. Disabling all non-a9 header bidding partners.');
            
            tp = partnersToCheck.length;
            while(tp--){
                if (partnersToCheck[tp] !== 'a9') {
                    adService[partnersToCheck[tp] + 'Enabled'] = false;
                }
            }
            partnersToLoad = [];
            if (adService.a9Enabled) {
                partnersToLoad.push('a9');
            }
        }

        loadAll();

        /* If nobody's using the timer then just kick off the ad service directly */
        if (!timerRunning && !setupRunning && partnersToLoad.length === 0) {
            proceedToSetup(true);
        }
    }

    function targeting(partner, adSlot, gptSlot, impressionType){
        impressionType = impressionType || 'load';

        if(karma.utilities.hasMethod('targeting', karma.partner[partner])){
            karma.partner[partner].targeting(adSlot, gptSlot, impressionType);
        }

    }

    function isSetupRunning() {
        return setupRunning;
    }

    // INSERT START - RVDEV-1191 - Index Container Tag Integration
    function rebuildSlots(slots) {
        // TEST: karam.partner has a method called rebuildSlots
        // TEST: Partner slots are cleared and only built for the passed in slots
        // TEST: All valid partner slots are added if no argument is passed into rebuildSlots
        var tp = partnersToCheck.length, partnerToCheck;
        while(tp--){
            partnerToCheck = partnersToCheck[tp];

            if(isEnabled(partnerToCheck)){
                buildSlots(partnerToCheck, slots);
            }
        }
    }
    // INSERT END - RVDEV-1191 - Index Container Tag Integration

    return {
        targeting: targeting,
        proceedToSetup: proceedToSetup,
        init: init,
        removeSlotFromAll: removeSlotFromAll,
        // INSERT START - RVDEV-1191 - Index Container Tag Integration
        rebuildSlots: rebuildSlots,
        // INSERT END - RVDEV-1191 - Index Container Tag Integration
        isSetupRunning: isSetupRunning
    };
}());

/* modules/footer/components/_refresh.js */
karma.refresh = (function(){
  "use strict";
  adService.partnerTimeout = 500;
  adService.partnerRefreshTimeout = 250;
  // TEST: A globally scoped function called refreshAdFrame is available
  adService.refresh = adService.refresh || {};
  // TEST: adService.refreshSlots exists and is an object
  adService.refreshSlots = adService.refreshSlots || {};
  
  var refreshCount = 0,
      slots = [],
      queueLength = 0;

  function clearTimer() {
    clearTimeout(adService.refreshTimer);
  }

  function purgeSlots(){
      // TEST: when invoked, purgeRefreshSlots wipes out the list of soft-refreshable slots (except for mobile div-gpt-interstitial)
      adService.refreshSlots = {};

      Object.keys(adService.refreshSlots).forEach(function(id){
          /* mobile interstitial never gets purged */
          if(!(mobileAds && id === 'div-gpt-interstitial')){
              delete adService.refreshSlots[id];
          }
      });

      return adService.refreshSlots;
  }

  function addSlot(id){
      // TEST: a function is available on adService.renderAds called 'addToRefreshSlots'
      // TEST: when invoked, addToRefreshSlots adds the slot with the specified id to the list of soft-refreshable slots
      var refreshSlots = adService.refreshSlots;
      if(adService.gptSlots.hasOwnProperty(id)){
          refreshSlots[id] = adService.gptSlots[id];
          return true;
      }
      return refreshSlots;
  }

  function removeSlot(id){
      // TEST: a function is available on adService.renderAds called 'removeFromRefreshSlots'    
      // TEST: when invoked, removeFromRefreshSlots removes the slot with the specified id from the list of soft-refreshable slots
      var refreshSlots = adService.refreshSlots;
      if (refreshSlots.hasOwnProperty(id)) {
          delete refreshSlots[id];
      }
      return refreshSlots;
  }

  function buildDefaultSlots(){
      // TEST: a function is available on adService.renderAds called 'buildDefaultRefreshSlots'    
      // TEST: when invoked, buildDefaultRefreshSlots adds to the list of soft-refreshable slots with the default set pulled in from the REST service config (adService.refresh.userInitiated.refreshSlotTypes)
    
      var adSlot,
          refreshSlotTypes = adService.refresh.userInitiated.slotTypes || [],
          adSlotsById = adService.adSlotsById;

      Object.keys(adService.gptSlots).forEach(function(id){
          if(adSlotsById.hasOwnProperty(id)){
              adSlot = adService.adSlotsById[id];
              if(id.match(/-(lazy|infinite)-/gi) === null && karma.slots.matchHandleArray(adSlot, refreshSlotTypes)){
                  addSlot(id);
              }
          }
      });
      return adService.refreshSlots;
  }

  /* ============== Post GPT Refresh Functionality ==================
   *  This code provides a hook for refreshing of the top and right
   *  banner ads during a partial (or soft) refresh of the page.
   *  Typically invoked by soft refreshing slideshows and applications.
   *  Should always be paired with a sendPageEvent call to Omniture.
   * =================================================================*/
  function doRefresh(timedRefreshSlotsOverride){  
    adService.refreshingAds = false;
    refreshTheAds(timedRefreshSlotsOverride);  
  }

  function refreshTheAds(timedRefreshSlotsOverride){
    
    function shouldRefresh(adSlot, refreshCount){
      // TEST: Ads refresh at the rate equal to adService.refresh.rates.default
      var ancillaryRefreshRate = adService.refresh.userInitiated.rates.ancillary || 1,
          gptRefreshRate = adService.refresh.userInitiated.rates['default'] || 1;         

      /* check that it's in the list of refreshable slot types */
      if(!adSlot.hasOwnProperty('slotType')){
        return false;
      }
      if(adSlot.slotType === 'ancillary'){
        return (refreshCount - 1) % ancillaryRefreshRate === 0;
      /* if it's interstitial, we only want to refresh on mobile and when the interstitial is not suppressed */
      }
      if(adSlot.slotType === 'interstitial'){
        return (adService.suppressInterstitial) ? false : mobileAds;
      /* otherwise, check the main refresh rate */
      }
      return (refreshCount - 1) % gptRefreshRate === 0;   

    }

      // TEST: don't refresh the ads if user-initiated refresh is not enabled 
      // TEST: don't timed refresh the ads if timed refresh is not enabled 
      var isTimedRefresh = typeof timedRefreshSlotsOverride === 'object';
      if((isTimedRefresh && !adService.refresh.timed.enabled) || (!isTimedRefresh && !adService.refresh.userInitiated.enabled)){
        karma.log((isTimedRefresh ? 'Timed' : 'User initiated') + ' refresh is disabled for this page.');
        return false;
      }

      refreshCount = refreshCount+1;
      if(!adService.refreshingAds) {

          adService.refreshingAds = true;

          if (!isTimedRefresh) {
            // TEST: When refreshAdFrame is invoked, it increments the user's page view count
            karma.utilities.setPageCount();  
            // TEST: if adService.mdpPageCount is greater than or equal to 2, and an interstitial has been served to the page, mdp.monetateProfile should be false
            if (window.hasOwnProperty("mdp") && mdp.hasOwnProperty("monetateProfile") && mdp.monetateProfile.adInterstitial === true && (adService.hasOwnProperty('mdpPageCount') && adService.mdpPageCount >= 2)) {
                localStorage.setItem('mdpAdInterstitial', false);
                mdp.monetateProfile.adInterstitial = false;
                karma.log('mdp.monetateProfile.adInterstitial = false');
            }
          }

          var refreshSlotsArray = [],
              slotContainerNames = [],
              adSlotConfigsArray = [],  
              refreshSlots = isTimedRefresh ? timedRefreshSlotsOverride : adService.refreshSlots, //Use the override Array if provided, otherwise use adService.refreshSlots
              adSlot, gptSlot;

          /*Loop through slots*/
          Object.keys(refreshSlots).forEach(function(id){
            adSlot = adService.adSlotsById[id];
            gptSlot = adService.gptSlots[id];

            /*Check for the slots we want to refresh, and check the refresh rules*/
            if (shouldRefresh(adSlot, refreshCount)) {
                // TEST: if we're not using header tag manager to manage header bidding, set refresh impressions on Yieldbot, and Pubmatic
                if (!karma.partner.header_tag_manager) {
                  karma.partner.targeting('yieldbot', adSlot, gptSlot, 'refresh');
                  karma.partner.targeting('pubmatic', adSlot, gptSlot, 'refresh');
                }
                // TEST: When the ads are refreshed, the slot being refreshed has a targeting parameter 'refreshType' that is set to 'soft' or 'timed'
                karma.targeting.set('refreshType', (isTimedRefresh ? 'timed' : 'soft'), id);

                /* close Media.net */
                if(typeof mads === "object" && typeof mads.refresh === "function"){
                    mads.close();
                }

                adSlotConfigsArray.push(adSlot);
                refreshSlotsArray.push(gptSlot);
                slotContainerNames.push(adSlot.slotContainer);
            }        
          });


          if (refreshSlotsArray.length > 0) {
              karma.log('refreshing these ads: ' + slotContainerNames.toString());
              processQueue(adSlotConfigsArray, refreshSlotsArray, true);
              return false;
          }
      }
  }

  function initRefreshDemandFetch(slotConfigs, gptSlots) {
    // TEST: a function is available on karma.refresh called initRefreshDemandFetch
    // TEST: Refresh occurs when a9 and header_tag_manager are enabled
    // TEST: Refresh occurs when a9 and header_tag_manager are disabled
    // TEST: Refresh occurs when a9 is enabled and header_tag_manager is disabled
    // TEST: Refresh occurs when a9 is disabled and header_tag_manager is enabled

    function checkInPartner(partner) {
      var index = softRefreshPartnersToLoad.indexOf(partner);

      if (index >= 0) {
        softRefreshPartnersToLoad.splice(index, 1);
      }

      if (softRefreshPartnersToLoad.length === 0) {
        karma.gpt.refresh(gptSlots, true);
      }
    }

    var softRefreshPartnersToLoad = ['control'];

    if (adService.a9Enabled) {
      softRefreshPartnersToLoad.push('a9');
    }

    if (karma.partner.header_tag_manager && adService.header_tag_managerEnabled) {
      softRefreshPartnersToLoad.push('header_tag_manager');
    }

    if (adService.a9Enabled) {
      karma.partner.a9.initiateRefresh(slotConfigs, function(){
        checkInPartner('a9');
      });
    }

    if (karma.partner.header_tag_manager && adService.header_tag_managerEnabled) {
      karma.partner.rebuildSlots(slotConfigs);  
      karma.partner.header_tag_manager.refresh();
      karma.partner.header_tag_manager.targeting(slotConfigs, gptSlots, 'refresh', function () {
        /* Pass in true to indicate soft-refresh */
        checkInPartner('header_tag_manager');
      });
    }

    checkInPartner('control');
  }

  /* Add slots to the refresh queue. */
  /* If a refresh is in progress, the queue will be stored, and processed once current refresh finishes*/
  /* We know a refresh is finished due to the call to karma.refresh.processQueue that is made inside the slotRenderEnded event */
  /* See karma.refresh.initRefreshQueueProcessing */
  //ARGS: slotConfigs - if false is passed in, no new slots will be added to the karma.refresh.slots array.
  //ARGS: gptSlots - ff false is passed in, the array will be built from the slotConfigs array
  // TEST: karma.refresh has a method called processQueue
  // TEST: karma.refresh.queueLength is a number
  // TEST: karma.refresh.slots is an array
  // TEST: karma.refreshing is a boolean
  function processQueue(slotConfigs, gptSlots, isSoft) {
    slotConfigs = slotConfigs || []; 

    if (Array.isArray(slotConfigs) && slotConfigs.length > 0) {
        karma.refresh.slots = karma.refresh.slots.concat(slotConfigs);
    }

    if (karma.refreshing) {     /* If a refresh is in progress, skip the GPT call. The slots are now waiting in queue for the current refresh to finish */
        karma.log('Refresh called, but Karma is still processing the previous ad request. Adding ' + karma.refresh.slots.length + ' slots to the refresh queue:');  
    } else {    
        karma.refresh.queueLength += karma.refresh.slots.length;
        karma.refreshing = true;
        slotConfigs = karma.refresh.slots.slice(0);      /* Move the queue into a local */
        gptSlots = gptSlots || karma.utilities.getGptObjectsFromSlotConfigs(slotConfigs);
        karma.refresh.slots = [];                           /* Then clean out the queue */
        karma.log('Refresh running on ' + slotConfigs.length + ' slots.');
        if (slotConfigs.length === 0) {
            return;
        }
        if (isSoft) {
          initRefreshDemandFetch(slotConfigs, gptSlots, true); 
        } else {
          karma.gpt.refresh(gptSlots);
        }
        
    } 
  }

  function initQueueProcessing() { /*Add the callback needed to process the refresh queue after each ad slot is filled*/
    // TEST: karma.refresh has a method called initQueueProcessing
    karma.gpt.addCallback(function() {
      karma.refresh.queueLength--;
      
      if (karma.refresh.queueLength === 0 ) {
        karma.refreshing = false;
        if (karma.refresh.slots.length > 0)  {
          processQueue(false, false, true); //Process any slots that were queued up for refresh while the previous refresh was finishing
        } else {
          if (adService.queueExecuted) {
            karma.refresh.timed.check(); 
          }
        }
      } 
    }); 
  }

  return {
    doRefresh: doRefresh,
    buildDefaultSlots: buildDefaultSlots,
    purgeSlots: purgeSlots,
    addSlot: addSlot,
    removeSlot: removeSlot,
    refreshTheAds: refreshTheAds,
    clearTimer: clearTimer,
    initQueueProcessing: initQueueProcessing,
    slots: slots, //Array that stores slots.
    queueLength: queueLength,
    processQueue: processQueue,
    initRefreshDemandFetch: initRefreshDemandFetch
  };
}());
/* modules/footer/components/_targeting.js */
karma.targeting = (function(){
    "use strict";
    // TEST: adServiceOverride is a globally scoped object
    window.adServiceOverride = window.adServiceOverride || {};
    // TEST: page targeting values are present as an object on adService    
    adService.pageTargetingValues = adService.pageTargetingValues || {};
    // TEST: ad unit targeting values are present as an object on adService
    adService.unitValues = adService.unitValues || {};
    var targetingCutoff = false,
        alreadySet = {};    

    function mapPageType(type){
        type = type ? type.toLowerCase() : '';
        var newType, typeMapping = {
            'story': 'article',
            'multimedia_article': 'video_article',
            'video_story': 'video_article',
            'travel_review': 'article',
            'productreview': 'article',
            'backtalk': 'article',
            'landing': 'landing_page',
            'directory': 'category',
            'channel': 'category',
            'topic': 'category',
            'subchannel': 'category',
            'timeline_bundle': 'category',
            'list': 'slideshow',
            'training_plan': 'slideshow',
            'workout': 'slideshow',
            'gallery': 'slideshow',
            'photo_gallery': 'slideshow',
            'contentgallery': 'slideshow',
            'popularrecipes': 'slideshow',
            'center': 'slideshow_hub',
            'recipedetail': 'recipe',
            'recipes': 'recipe',
            'gallerydetails': 'app',
            'plantlanding': 'app',
            'plantcategory': 'app',
            'plantdetail': 'app',
            'designerlistlandingpage': 'app',
            'jewelryitemlistpage': 'app',
            'productdetailpage': 'app',
            'baby_name': 'app',
            'condition': 'app',
            'condition_content': 'app',
            'recall': 'app',
            'white_page': 'page',
            'open_page': 'page',
            'blogger_moment': 'page',
            'faq': 'page',
            'contributor': 'page',
            'blog_post': 'post',
            'blogpost': 'post',
            'exclusiveoffers': 'freestuff',
            'videosearch': 'search',
            'videohome': 'video_hub',
            'videolander': 'video',
            'topiclander': 'video_playlist'
        };
        
        newType = (type === '') ? 'none' : ((typeMapping.hasOwnProperty(type)) ? typeMapping[type] : type);
        
        return newType;
    }

    function override(){
        adService = karma.utilities.extend(adService, window.adServiceOverride);
        karma.urlVars.setTestValues('service');
    }

    function get(key) {
        return adService.pageTargetingValues[key];
    }

    function set(key, val, slot){
        var pvs = adService.pageTargetingValues, 
            uvs = adService.unitValues,
            slotId;
        // TEST: if targeting values are passed that include invalid characters, KARMA strips the invalid characters before passing to DFP
        val = karma.utilities.cleanCharacters(val);
        // TEST: if an invalid page type is passed to KARMA, we convert it to a valid type or 'none'
        val = (key === 'type') ? mapPageType(val) : val;
        if(val !== ''){
            if(slot){                    
              slotId = (typeof slot === 'object' && slot.$ === '3865') ? slot.getSlotId().getDomId() : slot;
              karma.gpt.setSlotTargeting(slotId, key, val);
            }else{            
                if (alreadySet.hasOwnProperty(key) && alreadySet[key] === JSON.stringify(val)) {
                    /* If the value has already been set, and has not changed. */
                    return; 
                } 
                if (uvs.hasOwnProperty[key]){
                  uvs[key] = val;
                }
                pvs[key] = val;
                karma.gpt.setPageTargeting(key, val);
                alreadySet[key] = JSON.stringify(val);   
            }
        }
    }

    function clear(key, slot) {
        var pvs = adService.pageTargetingValues;

        if (pvs.hasOwnProperty(key)) {
            delete pvs[key];
        }

        if (alreadySet.hasOwnProperty(key)) {
            delete alreadySet[key];
        }

        if(slot){                    
            karma.gpt.clearSlotTargeting(slot, key);
        }else{            
            karma.gpt.clearPageTargeting(key);      
        }  
    }

    function loopSet(targetingObj){
        Object.keys(targetingObj).forEach(function(key){
            set(key, targetingObj[key]);
        });
    }    
    
    /* set page level targeting values */
    function pageLevel(pageTargetingArray){
        pageTargetingArray = pageTargetingArray || adService.pageTargetingValues;
        loopSet(pageTargetingArray);
    }
    
    function pageSetup(){
        var pvs = adService.pageTargetingValues,
            paramsToCheck = ['psrc', 'esrc', 'ordersrc', 'utm_medium', 'utm_campaign', 'utm_source'],
            paramsForTargeting = [],
            l = paramsToCheck.length,
            param;

        // TEST: adService has a non-empty page targeting value \'pv\' that is a number
        set('pv', adService.mdpPageCount + "");

        /*  traffic source targeting (used primarily to target the welcome ad away from specific types of traffic) */
        while(l--){
            param = paramsToCheck[l];
            if(karma.urlVars.get(param)){
                paramsForTargeting.push(param);           
            }
        }

        // TEST: if the referrer is AMP, set urlSrc = amp so welcome ad is not served to traffic coming from an AMP page. 
        if (karma.utilities.referrerIsAmp()) {
            paramsForTargeting.push('amp');
        }

        // TEST: if the URL has psrc in the query string, the page targeting parameter 'urlSrc' is set to psrc
        // TEST: if the URL has ordersrc in the query string, the page targeting parameter 'urlSrc' is set to ordersrc
        // TEST: if the URL has esrc in the query string, the page targeting parameter 'urlSrc' is set to esrc
        if (paramsForTargeting.length > 0) {
            pvs.urlSrc = paramsForTargeting;
        }

        // TEST: if we're on the homepage, the page targeting value 'type' should be set as 'homepage'
        if(karma.utilities.isHomepage()){
            pvs.type = 'homepage';            
        }      

        // TEST: if we're on a secure page, the page targeting value 'secure' should exist and be set to 'true'  
        if(window.location.protocol == 'https:'){
            pvs.secure = 'true';
        }

        // TEST: if we're on a Selectable Media NLP (the channel is set to 'smStory'), the 'id' value should be set to what's present in the URL parameter
        if(adService.unitValues.channel && adService.unitValues.channel === 'smStory'){            
            var smId = karma.urlVars.get('_sm_') ? 'sm-' + karma.urlVars.get('_sm_').split('_')[karma.urlVars.get('_sm_').split('_').length - 1] : window.location.href.split("?")[1].split("&")[0];
            if(smId.length > 0){
               pvs.id = smId;
            }
        }

        karma.urlVars.setTestValues();

        /*Page Targeting*/
        loopSet(pvs);
    }

    /* set slot-level targeting values */
    function slotLevel(adSlot, gptSlot, lazySlotName){
        var isLazy = !!lazySlotName,
            gptSlot = gptSlot || adService.gptSlots[adSlot.slotContainer],
            slotTargetingArray = adSlot.slotTargetingValues || [],
            slotName = lazySlotName || adSlot.slotContainer,
            adSlotId = adSlot.slotContainer;

        /* json-defined slot-level targeting values */
        Object.keys(slotTargetingArray).forEach(function(slotTargetingValue){
            set(slotTargetingValue, slotTargetingArray[slotTargetingValue], adSlotId);
        });

        set('slot', slotName.replace('div-gpt-',''), adSlotId);

        // TODO: remove this? I don't think we use these slot types anymore
        /* Dynamically set the ID field on slots for sponsor modules */
        if (adSlot.slotType === "sponsorModule" ||
            adSlot.slotType === "sponsorGallery" ||
            adSlot.slotType === "sponsorLink") {

            var slotId = adSlotId.match(/^div-gpt-(.+)/i)[1];

            /*Shorten slotId to a four character id... sponsorLink-1 becomes SL-1*/
            slotId = slotId.replace(adSlot.slotType, "S" + slotId.match(/[G-M]/)[0]);
            set('slot', slotId, adSlotId);
        }

        karma.targeting.targetingCutoff = true;
        
        if (karma.partner.header_tag_manager) {
            // INSERT START - RVDEV-1191 - Index Container Tag Integration
            if (!isLazy) {
                karma.partner.targeting('header_tag_manager', adSlot, gptSlot);
            }
            // INSERT END - RVDEV-1191 - Index Container Tag Integration
        } else {
            karma.partner.targeting('pubmatic', adSlot, gptSlot);
            karma.partner.targeting('yieldbot', adSlot, gptSlot);
        }
    }

    function updateSlot(slotId, newTargeting){
        // TEST: a function is available on adService.renderAds called 'updateSlotTargeting'    
        // TEST: when invoked, updateSlotTargeting updates the slot targeting values with the key/value map passed in    
        newTargeting = newTargeting || {};
        if(adService.gptSlots.hasOwnProperty(slotId)) {
            Object.keys(newTargeting).forEach(function(key){
                set(key, newTargeting[key], slotId);                
            });
        }
    }

    function updatePage(newTargeting){    
      // TEST: a function is available on adService.renderAds called 'updatePageTargeting'
      // TEST: when invoked, updatePageTargeting updates the page targeting values with the key/value map passed in    
      loopSet(newTargeting);
      karma.targeting.pageLevel(adService.pageTargetingValues);
    }

    return {
        override: override,
        get: get,
        set: set,
        clear: clear,        
        loopSet: loopSet,
        pageSetup: pageSetup,
        pageLevel: pageLevel,
        slotLevel: slotLevel,
        updateSlot: updateSlot,
        updatePage: updatePage,
        targetingCutoff: targetingCutoff
    };
}());

/* modules/footer/components/adunit.js */
karma.targeting = karma.targeting || {};
karma.targeting.adunit = (function(){   
  "use strict";
  var uvs = adService.unitValues,
    adDomainBits = [];

  function init(){
    // TEST: On any URL that has adTest=true in the query string: the ad unit is prefixed with 'test.'  
    var adTest = (karma.urlVars.isTrue('adTest')) ? "test." : "";

    // TEST: the ad unit has no spaces in it
    uvs.adDomain = karma.utilities.cleanCharacters(uvs.adDomain);

    // TEST: all values specified in adService.unitValues are also set as page targeting values
    Object.keys(uvs).forEach(function(uvKey){
      if(uvKey === "channel" || uvKey === "parent" || uvKey === "child") {
        karma.targeting.set(uvKey, uvs[uvKey]);
      }
    });

    // TEST: the ad unit begins with 3865
    adService.adUnit = {
      top: '3865'+'/',            /* MDP Network id */
      sub: buildSub()
    };
    adService.adUnit.top += adTest;
    adService.adUnit.top += adTestSite() || getDfpDomain();
  }

  function adTestSite() {
    // TEST: On any URL that has adTestSite=value in the query string: the top-level ad unit will be replaced with 'value'  
    // TEST: On any URL that has adTestSite=value in the query string: adService.unitValues.adDomain will be set to 'value'  
    if(karma.urlVars.get('adTestSite') !== null){
      uvs.adDomain = karma.urlVars.get('adTestSite');
      return uvs.adDomain;
    }else{
      return '';
    }
  }

  function getConfigAdDomain(){
    return karma.urlVars.containsEmail() ? 'email.mdp.com' : (adTestSite() || getDfpDomain());
  }

  function getDfpDomain(){
    
    function generateAdDomain(){
      if(!uvs.adDomain || uvs.adDomain.indexOf('.') === -1){
        var siteName = extractSiteName();
        adDomainBits.push(siteName);
        adDomainBits = adDomainBits.concat(addSuffix(siteName));
        return adDomainBits.join('.');
      }

      return uvs.adDomain;
    }

    if(karma.urlVars.containsEmail()){
      uvs.adDomain =  'email.mdp.com';
    }else{
      uvs.adDomain = (uvs.adDomain && uvs.adDomain.length > 0) ? uvs.adDomain :  generateAdDomain();
    }
    return uvs.adDomain;
  }  

  function extractSiteName() {
    return karma.utilities.getSiteAlias(karma.utilities.getSiteName(), 'abbr');
  }

  function addSuffix(siteName){
    // TEST: on desktop, the ad unit ends in .com, .shop, .com.arb, or .com.pe  
    // TEST: on mobile, the ad unit ends in .mob, .shop, .mob.arb, or .mob.pe      
    var path = window.location.pathname,
    // TEST: on pages where the pathname starts with /shop/, the ad unit ends in .shop
      shopMode = path.match(/^\/shop\//),      
      suffixBits = [];
    if(siteName.length > 0){
      suffixBits.push('mdp');
      if(mobileAds){
        suffixBits.push('mob');
      }else{
        suffixBits.push(shopMode ? 'shop' : 'com');
      }
    }
    return suffixBits;
  }

  function buildSub(slot){
    var adUnits = [],
        pvs;
    // TEST: If the slot is lazy and has unique targeting values, use those to build the ad unit. We need to clone so we don't override the settings on the page. 
    if (karma.slots.isLazy(slot)) {
      uvs = karma.utilities.clone(adService.unitValues);
      pvs = karma.utilities.clone(adService.pageTargetingValues);
      karma.utilities.extend(pvs, slot.slotTargetingValues);
      karma.utilities.extend(uvs, slot.slotTargetingValues);
    } else {
      uvs = adService.unitValues;
      pvs = adService.pageTargetingValues;
    }

    // TEST: the second-level ad unit should match the pattern 'tierx'
    adUnits.push(slot !== undefined && (slot.specialAdUnit ? slot.specialAdUnit.replace(/^\./, '') : 'tier0'));
    // TEST: the third-level ad unit should match the page targeting value 'type'
    adUnits.push(pvs.hasOwnProperty('type') && (pvs.type !== '' ? pvs.type : 'none'));
    // TEST: if adService.adUnit4thLevelOverride is specified in the config, and the page targeting value 'channel' matches adService.adUnit4thLevelOverride, the fourth-level ad unit should match the page targeting value 'parent'
    if(adService.adUnit4thLevelOverride && uvs.channel && uvs.channel === adService.adUnit4thLevelOverride && uvs.parent){
      adUnits.push(uvs.parent);
    // TEST: if adService.adUnit4thLevelOverride is NOT specified in the config, or the page targeting value 'channel' does not match adService.adUnit4thLevelOverride, the fourth level ad unit should match the page targeting value 'channel'
    }else if(uvs.channel) {
      adUnits.push(uvs.channel);
    }

    // TEST: the 2nd-4th level ad units should not contain spaces
    adUnits = adUnits.map(karma.utilities.cleanCharacters);
    // TEST: the 2nd-4th level ad units should be delimited with slashes
    return (adUnits.length > 0 ? '/' : '')+adUnits.join('/');
  }


  function build(slot, top, type){
    type = type || '';
    top = (type !== 'sub') ? karma.utilities.cleanCharacters(top) : '';
    // TEST: If the subdomain is www3: the top-level ad unit has '.pe' appended to it      
    return top
    + ((window.location.hostname.match(/^www3/) !== null && top.indexOf('.pe') === -1)  ? '.pe' : '')
    + buildSub(slot);
    
  }

  return {
    build: build,
    buildSub: buildSub,
    getConfigAdDomain: getConfigAdDomain,
    init: init
  };
}());
/* modules/footer/components/callbacks.js */
karma.callbacks = (function(){
    "use strict";
    function init(){ 
        // TEST: if the adService config contains an object called "callback", adService.callback should be an array of functions  
        if(adService.callback) {
            adService.callback = (typeof adService.callback !== 'function') ? adService.callback : [adService.callback];
            var i,
                l = adService.callback.length;
            if (typeof adService.callback === 'object' && Array.isArray(adService.callback)) {                        
                for (i = 0; i<l; i++) {
                    if(typeof adService.callback[i] === 'function'){
                        karma.gpt.addCallback(adService.callback[i]);
                    }
                }
            }else{
                karma.log('adService.callback is defined but is not an array of functions... ignoring callback.');
            }
        }else{
            adService.callback = [];
        }
    }

    function add(fn) {
        // TEST: An addToCallbackList function is available on adService.renderAds  
        // TEST: when invoked, addToCallbackList adds the function to the callback stack
        var callback = adService.callback;
        if (typeof callback === "function") { 
            karma.log("adService.callback has been overwritten as a function. Converting back to an array.",{forceMessage:true});
            adService.callback = [callback];
            add(callback); 
        }
        if (typeof fn === 'function') {
            adService.callback.push(fn);
            karma.gpt.addCallback(fn);
        } else {
            karma.log('adService.renderAds.addToCallbackList(fn): Not a valid function.',{forceMessage:true});
        }
    }

    return {
        init: init,
        add: add
    };
}());
/* modules/footer/components/config.storage.js */
karma.config = karma.config || {};
karma.config.storage = (function(){
    "use strict";
    function check(adDomain, env, version) {
        var prefix, data, obj;
        if (karma.utilities.isLocalStorageAvailable() && localStorage.getItem('mdpKarmaConfig')) {
            try {
                data = JSON.parse(localStorage.getItem('mdpKarmaConfig'));
            } catch(e) {
                data = false;
                karma.performance.log('Unable to parse stored config: localStorage.mdpKarmaConfig',{forceMessage:true});
            }

            if (data !== undefined) {
                Object.keys(data).forEach(function(i){
                    if (data[i].adDomain === adDomain && data[i].env === env) {
                        prefix = 'localStorage Config Found';
                        // TEST: if a cached KARMA config exists in localStorage, but the version number does not match the value in KARMA.service, the REST service is called anew
                        if(data[i].version !== version){
                            karma.performance.log(prefix+', but the version number is out of date. Removing cached version.');
                            localStorage.removeItem('mdpKarmaConfig');
                        }else if (data[i].expires >= Date.now()) {
                            obj = data[i];
                        // TEST: if a cached KARMA config exists in localStorage, and the expires property is in the past, the REST service is called anew    
                        }else{
                            karma.performance.log(prefix+'localStorage Config Found, but it\'s expired. Removing cached version.');
                            localStorage.removeItem('mdpKarmaConfig');                            
                        }
                    }
                });
            }
            return (obj && typeof obj === 'object') ? obj : false;
        }
    }
    function set(adDomain, data, env) {
        if (karma.utilities.isLocalStorageAvailable() && typeof data === 'object') {
            var res = [];
              
            // TEST: if a cached KARMA config exists in localStorage, the adDomain matches adService.unitValues.adDomain
            data.adDomain = adDomain;
            // TEST: if a cached KARMA config exists in localStorage, the expires property is not more than 5 minutes in the future  
            data.expires = Math.floor(Date.now() + 300000); // 5 minute TTL (in ms)
            // TEST: if a cached KARMA config exists in localStorage, on any URL that has adTestEnv=[local|dev|test|www] in the query string (and that does not have localConfig set to true), the localStorage KARMA config environment matches the specified environment  
            // TEST: if a cached KARMA config exists in localStorage, if the adService config contains a toggle called localConfig, and it's set to true, the localStorage KARMA config environment is local  
            // TEST: if a cached KARMA config exists in localStorage, if the URL query string contains karmaConfig, the localStorage KARMA config environment matches the specified environment  
            data.env = env; 
            // TEST: if a cached KARMA config exists in localStorage, the version of the KARMA config stored in local storage matches the version requested by the KARMA service  
            data.version = karma.config.getVersion(); 
            res.push(data);
            localStorage.setItem('mdpKarmaConfig', JSON.stringify(res));
        }
    }
    return {
        check: check,
        set: set
    };
}());
/* modules/footer/components/docking.leaderboard.js */
karma.docking = karma.docking || {};
karma.docking.leaderboard = (function(win, doc) {
    "use strict";
    /* ---- [ variables ] ---- */
    var 
        additionalLogic,
        backgroundOpacity,
        backgroundRGB,
        bannerSelector,
        bannerZindex,
        belowBannerSelector,
        complete,
        customStyles,
        delay,
        docked,
        dockedClass,
        dockingOffset,
        els,
        enabled,
        offset,
        position,
        rollUp,
        rollUpMs, 
        rollUpTimerId,
        selectors,
        settings,
        siteContainerSelector,
        timer,
        timerRunning,
        timerStarted,
        topMargin,
        transitionMs, 
        undockTimerId,
        useCSS,
        useDefaultHeight,
        // events
        dockEvent,
        undockEvent,
        // selectors
        body,
        banner,
        belowBanner,
        siteContainer,
        placeholder,
        varsAreInitialized = false;

    adService.docking = adService.docking || {};
        
    function initVars(){
        if(!varsAreInitialized){
            var convertNum = karma.utilities.convertStringToNumber,
                convertBool = karma.utilities.coerceBoolean;

            settings = settings || (adService.docking.leaderboard || {});
            
            // internal vars
            docked = false;
            rollUpTimerId = null;
            undockTimerId = null;
            delay = 0;
            offset = 0;
            els = [];
            selectors = [];
            timerStarted = false;
            timerRunning = false;
            complete = false;
            position = 'undocked';

            // configurable settings
            enabled = convertBool(settings.enabled) || false;
            additionalLogic = settings.additionalLogic || [];
            // TEST: if docking.leaderboard.backgroundOpacity is not set, the background opacity on bannerSelector is .7
            backgroundOpacity = settings.backgroundOpacity || '.7';
            // TEST: if docking.leaderboard.backgroundRGB is not set, the background color on bannerSelector is 255,255,255
            backgroundRGB = settings.backgroundRGB || '255,255,255';
            bannerSelector = settings.dockingElementSelector || '';
            // TEST: if docking.leaderboard.zIndex is not set, the z-index on bannerSelector is 595
            bannerZindex = convertNum(settings.zIndex) || 595;
            belowBannerSelector = settings.belowBannerSelector || '';
            customStyles = settings.customStyles || '';
            // TEST: if docking.leaderboard.dockedClass is not set, the class on the banner placeholder and the bannerSelector is 'docked'
            dockedClass = settings.dockedClass || 'docked';
            dockingOffset = convertNum(settings.offset) || 0;
            // TEST: if docking.leaderboard.rollUp is not set, the docked leaderboard never undocks
            rollUp = convertBool(settings.rollUp) || false;
            // TEST: if docking.leaderboard.rollUpMs is not set and docking.leaderboard.rollUp is true, the docked leaderboard undocks after 10 seconds
            rollUpMs = convertNum(settings.rollUpSeconds) || 10000; 
            siteContainerSelector = settings.siteContainerSelector || '';
            // TEST: if docking.leaderboard.topMargin is not set, the docked banner has a top position of 0
            topMargin = convertNum(settings.topMargin) || 0;
            transitionMs = convertNum(settings.transitionSeconds) || 1000; 
            useCSS = convertBool(settings.useCSS) || true;
            useDefaultHeight = convertBool(settings.useDefaultHeight) || false;

            //selectors
            body = doc.body;
            banner = doc.querySelector(settings.dockingElementSelector);
            belowBanner = doc.querySelector(settings.belowBannerSelector);
            siteContainer = doc.querySelector(settings.siteContainerSelector);
            placeholder = null;

            try{
                dockEvent = new Event('leaderboard_docked');
                undockEvent = new Event('leaderboard_undocked');
            }
            // polyfill custom events in IE
            catch(error){
                dockEvent = new CustomEvent("leaderboard_docked");
                undockEvent = new CustomEvent('leaderboard_undocked');        
            }

            if (rollUp && !isNaN(convertNum(rollUpMs, 10))) {
                delay = rollUpMs;
            }

            varsAreInitialized = true;
        }

    }

    function getBannerSelectorHeight() {
        //get total banner height
        if (enabled) {
            var bannerSelectorHeight,elmMargin,
                elmHeight = banner.clientHeight;
            if(document.all) {//IE
                elmMargin = parseInt(banner.currentStyle.marginTop, 10) + parseInt(banner.currentStyle.marginBottom, 10);
            } else {//Mozilla
                elmMargin = parseInt(document.defaultView.getComputedStyle(banner, '').getPropertyValue('margin-top')) + parseInt(document.defaultView.getComputedStyle(banner, '').getPropertyValue('margin-bottom'));
            }
            bannerSelectorHeight = elmHeight+elmMargin;
            return bannerSelectorHeight;
        } else {
            return 0;
        }
    }

    function isEnabled(){
        // TEST: if adService.docking or adService.docking.leaderboard is not set, KARMA still initializes
        settings = adService.docking.leaderboard || {};
        if (!settings.enabled) {
            return false; /* Don't init the vars if we don't need to */
        }

        // settings and corresponding defaults are processed
        initVars();
        
        // TEST: if the required DOM elements are missing, leaderboard docking is disabled
        if (!banner || !belowBanner || !siteContainer) {
            karma.log('Missing element for leaderboard docking. Disabling.');
            enabled = false;
        }else{
            // TEST: if additional docking logic is defineÂ© and it evals to false, leaderboard docking is disabled
            // TEST: if window.mdp.app.dockingBanner exists, leaderboard docking is disabled
            enabled = (enabled && karma.docking.processAdditionalLogic(additionalLogic) && !win.mdp.app.hasOwnProperty('dockingBanner'));
        }

        // TEST: if adService.docking.leaderboard is defined, the enabled status is altered to match module logic
        if(adService.docking.leaderboard){
            adService.docking.leaderboard.enabled = enabled;
        }
        return enabled;
    }

    function dockingProcedure() {   
        function startRollUpTimer() {

            function rollUpTimer(callback, rollUpDelay) {
                var start, remaining = rollUpDelay;

                this.pause = function pauseTimer() {
                    win.clearTimeout(rollUpTimerId);
                    remaining -= new Date() - start;
                    karma.log('Rollup timer paused! ' + remaining + ' remaining');
                };

                this.resume = function resumeTimer() {
                    start = new Date();
                    win.clearTimeout(rollUpTimerId);
                    rollUpTimerId = win.setTimeout(callback, remaining);
                    karma.log('Rollup timer resumed!');
                };

                this.resume();
            }

            // TEST: if docking.leaderboard.rollUp is true, the docked leaderboard rolls up after a given number of seconds
            timerStarted = true;
            timerRunning = true;
            timer = new rollUpTimer(function(){
                timerRunning = false;
                if (position !== 'docked') {
                    disable();
                    return;
                }
                releaseBanner(true);   
            }, delay);

            // TEST: if the user mouses over a docked leaderboard, the rollup timer pauses
            banner.addEventListener('mouseover', timer.pause);
            // TEST: if the user mouses off a docked leaderboard, the rollup timer resumes
            banner.addEventListener('mouseout', timer.resume);
        }   

        function dock() {
            karma.docking.rail.leaderboardEventHandler('leaderboardDocked');
            var l = els.length;     
            while (l--) {
                els[l].classList.add(dockedClass);
            }
            body.dispatchEvent(dockEvent);
        }

        var shouldDock = (!complete && position !== 'docked' && offset - topMargin - dockingOffset < win.pageYOffset),
            shouldRelease = (position === 'docked' && offset - topMargin - dockingOffset >= win.pageYOffset);

        if (shouldDock) {
            dock();
            position = 'docked';

            if (rollUp && !timerStarted) {
                startRollUpTimer();
            }
        } else if (shouldRelease) {
            releaseBanner();
        }
    } 
    
    function init() {

        function initSelectors() {
            // TEST: the selectors array contains the banner, placeholder, and siteContainer elements
            var elArr = [banner,placeholder],
                l = selectors.length;
            if (siteContainer !== null) {
                elArr.push(siteContainer);
            }
            while (l--) {
                elArr.push(doc.querySelectorAll(selectors[l]));
            }
            return elArr;
        }

        function addEventListeners() {
            doc.addEventListener('touchstart', dockingProcedure);
            doc.addEventListener('touchmove', dockingProcedure);
            doc.addEventListener('touchend', dockingProcedure);
            doc.addEventListener('scroll', dockingProcedure);
        }

        function sizeCheck(e) {
            // TEST: if the returned leaderboard is greater than 728 pixels wide or 90 pixels high, don't dock the leaderboard
            var slotId = e.slot.getSlotId().getDomId(), gptDiv, bannerHeight, bannerWidth;
            if (slotId.indexOf('div-gpt-leaderboard') !== -1) {
                gptDiv = doc.getElementById(slotId).querySelector('div[id^="google_ads_iframe"]');
                bannerHeight = Array.isArray(e.size) ? e.size[1] : ((gptDiv !== null) ? gptDiv.offsetHeight : 0);
                bannerWidth = Array.isArray(e.size) ? e.size[0] : ((gptDiv !== null) ? gptDiv.offsetWidth : 0);
                if (e.isEmpty || bannerHeight === 0 || bannerHeight > 90 || bannerWidth > 728) {
                    return false;
                }
                return true;
            }
        }


        initVars();

        var css, bannerHeight, placeholderId;

        if (isEnabled()) {

            karma.log('initializing docking banner...');
            
            // TEST: if leaderboard docking is enabled, an element with an id of docking-banner-placeholder exists and is a sibling of the belowBanner selector
            placeholderId = 'docking-banner-placeholder';
            bannerHeight = banner.offsetHeight;

            placeholder = doc.createElement('div');
            placeholder.id = placeholderId;
            belowBanner.parentElement.insertBefore(placeholder, belowBanner);

            // selectors are initialized
            els = initSelectors();            

            // TEST: if docking.leaderboard.useCSS is true, a stylesheet is appended to the document with docking styles
            if (useCSS) {
                css = bannerSelector + "{position:relative;top:0;}"
                    + "#" + placeholderId + "{height:0;width:100%;background-color:rgb("+ backgroundRGB +")}"
                    + "#" + placeholderId + "."+dockedClass+"{height:"+ bannerHeight +"px}"
                    + (useDefaultHeight ? "."+dockedClass+" #div-gpt-leaderboard-flex-1{min-height:100px;padding:5px 0;box-sizing:border-box}" : "")
                    + "#div-gpt-leaderboard-flex-1{text-align:center;overflow:hidden;box-sizing:border-box;position:relative;left:0;width:100%;top:0;}"
                    + bannerSelector + "."+dockedClass+"{position:fixed;z-index:" + bannerZindex +";background:rgba(" + backgroundRGB + ',' + backgroundOpacity + ");top:" + topMargin + "px;left:0;right:0;width:100%;"
                    + (useDefaultHeight ? "height: 100px" : "") + "}"
                    + bannerSelector + ".undocking{top:-"+(bannerHeight+20)+"px;transition:top 1s;z-index:500;}" 
                    + customStyles;
                karma.docking.appendStyleSheetCss(css);
            }

            if (banner !== null) {
                // the working value of offset matches the banner selector's top position
                offset = banner.offsetTop;

                // TEST: if the banner element is not null, a callback is added to the GPT queue that checks the size of the returned banner, initiates event selectors, and starts the docking procedure
                win.googletag = win.googletag || {};
                googletag.cmd = googletag.cmd || [];
                googletag.cmd.push(function() {
                    googletag.pubads().addEventListener('slotRenderEnded', function(e) {
                        if (sizeCheck(e)) {
                            addEventListeners();
                            dockingProcedure();
                        }
                    });
                });
            }
        }
    }

    function releaseBanner(useTransition) {
        function undock() {
            // TEST: when the banner undocks, the dockedClass is removed from the site container and the banner
            var l = els.length;
            banner.classList.remove(dockedClass);
            while (l--) {
                if (els[l] !== banner) {
                    els[l].classList.remove(dockedClass);
                }
            }

            if (rollUp && !timerRunning) { 
                disable();
            }

            position = 'undocked';
            // TEST: when the banner undocks, the leaderboard_undocked event is dispatched to the body (RVDEV-1689, RVDEV-1731)
            body.dispatchEvent(undockEvent);
            banner.classList.remove('undocking');
        }
        
        // TEST: when the user scrolls to the top of the page, the banner undocks
        // TEST: when the banner undocks, a class of undocking is added and subsequently removed after a timeout of transitionMS (default 1s)
        
        if (useTransition) {
            position = 'undocking';
            banner.classList.add('undocking');
            karma.docking.rail.leaderboardEventHandler('leaderboardUndocked', true);
            var undockingTimeOut = win.setTimeout(function() { undock(); }, transitionMs);
        } else {
            karma.docking.rail.leaderboardEventHandler('leaderboardUndocked');
            undock();
        }        
    }
    
    function forceReleaseBanner() {          
        if (isEnabled()) {
            if (position !== 'docked') {
                disable();
                return;
            }
            releaseBanner();
        }
    }

    function disable() {
        complete = true;
        // TEST: when the banner undocks, the touch/scroll event listeners are removed from the document
        doc.removeEventListener('touchstart', dockingProcedure);
        doc.removeEventListener('touchmove', dockingProcedure);
        doc.removeEventListener('touchend', dockingProcedure);
        doc.removeEventListener('scroll', dockingProcedure);
        // TEST: when the banner undocks, the undock timer is cleared
        win.clearTimeout(rollUpTimerId);
        // TEST: when the banner undocks, the hover pause event is removed from the banner
        banner.removeEventListener('mouseover', timer.pause);
        banner.removeEventListener('mouseout', timer.resume);
        timer = null;
    }

    /* ---- [ Public methods ] ---- */
    return {
        init: init,
        isEnabled: isEnabled,
        forceReleaseBanner: forceReleaseBanner,
        getBannerSelectorHeight: getBannerSelectorHeight
    };

}(window, document));

/* modules/footer/components/docking.rail.js */
karma.docking = karma.docking || {};
karma.docking.rail = (function(doc, win){
  "use strict";
  var pos,
      enabled,
      body,
      css,
      customCss,
      dockingElement,
      dockingParent,
      dockingElementSelector,
      leaderboardHeight,
      mainColumn,
      mainColumnSelector,
      rail,
      railSelector,
      offset,
      screenSizeThreshold,
      dockIfTooTall,
      additionalLogic,
      classPrefix,
      matchPattern,
      disablingMsg,
      availableHeight;

  adService.docking = adService.docking || {};

  /* Update available height on orientation change */
  win.addEventListener("orientationchange", function() {
    availableHeight = window.innerHeight;
  });

  function initVars(){
    var settings = adService.docking.rail || {};
    //vars
    classPrefix = 'karma-sticky-';
    matchPattern = /karma\-sticky\-(top|stuck|bottom)/;
    disablingMsg = 'Disabling rail docking: ';
    availableHeight = win.innerHeight;

    // settings
    enabled = settings.enabled || false;
    dockingElementSelector = settings.dockingElementSelector || false;
    mainColumnSelector = settings.mainColumnSelector || false;
    railSelector = settings.railSelector || false;
    customCss = settings.customCss || false;
    additionalLogic = settings.additionalLogic || [];
    offset = settings.offset || false;
    // TEST: if docking.rail.screenSizeThreshhold is not set, the value is 625
    screenSizeThreshold = settings.screenSizeThreshold || 625;
    dockIfTooTall = settings.dockIfTooTall || false;

    // elements
    body = doc.body;
    dockingElement = doc.querySelector(dockingElementSelector);
    mainColumn = doc.querySelector(mainColumnSelector);
    rail = doc.querySelector(railSelector);
  }

  function isEnabled(){
    initVars();

    // TEST: if dockingElementSelector, mainColumnSelector, or railSelector aren't specified, rail docking is disabled
    if (!enabled || !dockingElementSelector || !mainColumnSelector || !railSelector) {
      if (enabled) {
        karma.log(disablingMsg + 'Missing selectors');
        enabled = false;
      }
    }

    // TEST: if additionalLogic is present and returns false, rail docking is disabled
    if (!karma.docking.processAdditionalLogic(additionalLogic)) {
      if (enabled) {
        karma.log(disablingMsg + 'Disabled via additionalLogic');
        enabled = false;
      }
    }

    // TEST: if dockingElement, mainColumn, body, or rail DOM elements aren't present in the DOM, rail docking is disabled
    if (!body || !dockingElement || !mainColumn || !rail) {
      karma.log(disablingMsg + 'Missing DOM elements');
      enabled = false;
    }

    if (adService.docking.rail){
      adService.docking.rail.enabled = enabled;
    }

    return enabled;
  }

  function init() {
    initVars();
    enabled = isEnabled();

    /* don't do anything if we're not enabled */
    if (!enabled) {     
      return;
    }

    dockingParent = dockingElement.parentElement;
    dockingElementSelector += '.' + classPrefix;
    leaderboardHeight = karma.docking.leaderboard.getBannerSelectorHeight();

    // TEST: railSelector should have position: relative
    // TEST: dockingSelementSelector+'stuck' should have position: fixed and top defined in pixels
    // TEST: dockingSelementSelector+'bottom' should have position: absolute
    css = railSelector + ', ' + dockingElementSelector + 'top{position:relative}'
        + dockingElementSelector + 'stuck{position:fixed;top:' + offset + 'px}'
        + dockingElementSelector + 'stuck.dockedLeaderboard{top:' + (offset+leaderboardHeight) + 'px}'
        + dockingElementSelector + 'stuck.dockedLeaderboard.undockingLeaderboard{top:'+offset+'px;transition:top 1s;z-index:500;}' 
        + dockingElementSelector + 'bottom{position:absolute;}'
        + customCss;
    
    // TEST: a style block should be appended to the document with rail docking styles in it
    karma.docking.appendStyleSheetCss(css);

    check();
    // TEST: on document touchstart, touchmove, touchend, and scroll, the check function runs
    doc.addEventListener('touchstart', check);
    doc.addEventListener('touchmove', check);
    doc.addEventListener('touchend', check);
    doc.addEventListener('scroll', check);
  }
 
  function check() {
    function getOffset(el) {
      var offset = 0,
          failsafe = 50;

      while (el !== body && el !== null && failsafe !== 0) {
        offset += el.offsetTop;
        el = el.offsetParent;
        failsafe--; 
      }

      if (failsafe === 0 || el === null) {
        karma.log(disablingMsg + 'docking rail offset check failed',{forceMessage:true});
        releaseAtTop();
        enabled = false;
      }

      return offset;
    }

    function releaseAtTop() {
      removeInlineStyle();
      pos = update('top');
    }

    function releaseAtBottom() {
      function addInlineStyle() {
        var topDistance = mainColumn.offsetHeight - dockingElement.offsetHeight;
        dockingElement.style.top = topDistance + 'px';
      }
      pos = update('bottom');
      addInlineStyle();
    }

    function removeInlineStyle() {
      if (pos === 'bottom') {
        dockingElement.style.top = '';
      }
    }

    function park() {
      removeInlineStyle();
      pos = update('stuck');
    }

    function update(pos) {
      if (!enabled) {
        pos = 'top';
      }
      if (dockingElement.className.indexOf(classPrefix) === -1) {
        dockingElement.className += ' ' + classPrefix + pos;
      } else {
        dockingElement.className = dockingElement.className.replace(matchPattern, classPrefix + pos);
      }
      return pos;
    }

    if (availableHeight < screenSizeThreshold || mainColumn.offsetHeight < rail.offsetHeight || (!dockIfTooTall && dockingElement.offsetHeight + offset > availableHeight)) { 
      // TEST: on small screens, the rail is not docked
      releaseAtTop();
    } else if (pos !== "stuck" && pos !== "bottom" && pageYOffset > getOffset(dockingElement) - offset) {
      // TEST: if the right rail is in view and we're scrolled down, it's docked
      park();
    } else if (pos !== "top" && pos !== "bottom") {
      // TEST: if we're at the top of the page, it's not docked
      if (pageYOffset <= dockingParent.offsetHeight + getOffset(dockingParent) - offset) {
        releaseAtTop();
      // TEST: if the footer is in view, it's not docked
      } else if (pageYOffset + offset + dockingElement.offsetHeight > getOffset(mainColumn) + mainColumn.offsetHeight) {
        releaseAtBottom();
      }
    } else if (pos !== "top" && pos !== "stuck" && pageYOffset + offset + dockingElement.offsetHeight <=  getOffset(mainColumn) + mainColumn.offsetHeight) {
      park();
    }
  }

  function leaderboardEventHandler(event, useTransition) {
    if (isEnabled()) {
      switch(event) {
          case 'leaderboardDocked':
            dockingElement.classList.add('dockedLeaderboard');
            check();
          break;
          case 'leaderboardUndocked':
            if(useTransition) {
              dockingElement.classList.add('undockingLeaderboard');
              setTimeout(function() {
                  dockingElement.classList.remove('undockingLeaderboard');
                  dockingElement.classList.remove('dockedLeaderboard');
                  check();
              },1000);
            } else {
              dockingElement.classList.remove('undockingLeaderboard');
            }
          break;
          default:
      }
    }
  }

  return {
      init: init,
      isEnabled: isEnabled,
      leaderboardEventHandler: leaderboardEventHandler
  };
}(document, window));
/* modules/footer/components/dom.js */
karma.dom = (function(){
  "use strict";
  function scrapeSlots(){
      var gptDivs = document.querySelectorAll('div[id^="div-gpt"]'),
          adSlots = [],
          i,
          l=gptDivs.length,
          slotId,
          gptDiv,
          gptDivData;
          
      for(i=0; i<l; i++) {
        gptDiv = gptDivs[i];
        gptDivData = gptDiv.dataset;
        slotId = gptDiv.id;
        /* if it's a tiered slot */
        if(gptDivData && gptDivData.hasOwnProperty('tier') && !isNaN(parseInt(gptDivData.tier, 10))){
          slotId += ':tier' + gptDivData.tier;
          if(adSlots.indexOf(slotId) === -1){
            adSlots.push(slotId);
          }
        /* if there's no tier */
        } else if(!gptDivData || !gptDivData.hasOwnProperty('tier') || isNaN(parseInt(gptDivData.tier, 10))){
          slotId += ':tier0';
          if(adSlots.indexOf(slotId) === -1){
            adSlots.push(slotId);
          }
        /* if it's a normal slot */
        } else {
          adSlots.push(slotId);
        }
      }
      if (adSlots.length === 0) {
        adSlots.push('none');
      }
      return adSlots;
  }

  function addReadyListener(callback) {
    if (document.readyState === 'interactive' || document.readyState === 'complete') {
      callback();
    } else {
       document.addEventListener('DOMContentLoaded', callback);
    }
  }

  function get(slot) {
    slot = (typeof slot === 'string') ? adService.adSlotsById[slot] : slot;
    if (!slot.hasOwnProperty('dom')) {
      slot.dom = document.getElementById(slot.slotContainer);
    }
    return slot.dom;
  }

  return {
    scrapeSlots: scrapeSlots,
    addReadyListener: addReadyListener,
    get: get
  };

}());
/* modules/footer/components/gpt.js */
karma.gpt = (function(){
    "use strict";
    var videoCompanionSlot = document.getElementById('div-gpt-videoCompanion'),
        gptJsCalled = googletag.mdpScriptCalled || false,
        gptServicesEnabled = false;   

    function load(){
        // TEST: the Google Publisher Tag library was called  
        if (!googletag.mdpScriptCalled && !gptJsCalled) {
            gptJsCalled = true;
            (function () {
                var gads = document.createElement('script'), node;
                gads.async = true;
                gads.src = 'https://www.googletagservices.com/tag/js/gpt.js';
                node = document.getElementsByTagName('script')[0];
                node.parentNode.insertBefore(gads, node);
            }());
            googletag.mdpScriptCalled = true;    
        }
    }

    function enable(){
        if (!gptServicesEnabled) {
            gptServicesEnabled = true;
            // TEST: single request mode is enabled in GPT
            googletag.pubads().enableSingleRequest();
            // TEST: if ads have not been refreshed, the page targeting value 'refreshType' is set to 'hard'
            setPageTargeting('refreshType', 'hard');
            // TEST: if the page has a video companion slot, video ads are enabled in GPT
            if(videoCompanionSlot !== null) {
                googletag.pubads().enableVideoAds();
            }
            // TEST: disableInitialLoad is called to put us in GPT batch request mode (requied for lazy load)
            googletag.pubads().disableInitialLoad();
            googletag.enableServices();
        }
    }

    function display(slotContainer){
         googletag.display(slotContainer);
    }

    function displayAllSlots(){
        // TEST: when displayAllSlots is invoked, all ad slots with a slotType property defined
        var j,
            slotsArrayLength = adService.adSlots.length,
            adSlot;
        for(j = 0; j < slotsArrayLength; j++){
            adSlot = adService.adSlots[j];
            if(adSlot.slotType){ 
                display(adSlot.slotContainer);
            }
        }
    }

    function define(slot, slotAdUnit, slotName){
        function convertAdSizes(adSlot){
            var adSlotSizeArray = adSlot.slotSizes,
                sizeArrayLength = adSlotSizeArray.length,
                adSlotSizeValues,
                adSize = [],
                k,l=sizeArrayLength;

            /* convert ad sizes to an array of sizes */
            for(k=0; k < l; k++){
                adSlotSizeValues = adSlotSizeArray[k];
                adSlotSizeValues = adSlotSizeValues.split('x');
                adSize.push([parseInt(adSlotSizeValues[0],10),parseInt(adSlotSizeValues[1],10)]);
            }
            return adSize;
        }

        var gptSlot;
        karma.slots.makeHandle(slot);
        // TEST: out of page slots are defined as out of page slots in GPT
        if(slot.outOfPage){
            gptSlot = googletag.defineOutOfPageSlot(slotAdUnit, slotName).addService(googletag.pubads());
        // TEST: if the page has a video companion slot, the googletag.companionAds service is present on the page
        } else if(slot.slotType === 'videoCompanion'){ 
            gptSlot = googletag.defineSlot(slotAdUnit, convertAdSizes(slot), slotName).addService(googletag.companionAds()).addService(googletag.pubads());
        } else { 
            gptSlot = googletag.defineSlot(slotAdUnit, convertAdSizes(slot), slotName).addService(googletag.pubads());
        }
        slot.gptSlot = gptSlot;
        return gptSlot;
    }

    function destroy(slots){
        /* if slots is not an array, convert it to one */
        if(!Array.isArray(slots)){
            slots = [slots];
        }
        // TEST: when invoked, adService.renderAds.destroySlot removes the slot from GPT
        return googletag.destroySlots(slots);
    }

    function refresh(slots, isSoft){                            
        // TEST: karma.gpt has a method called refresh
        // TEST: All instant ads on the page have been requested
        queuePush(function(){
            if (isSoft) {
                karma.targeting.clear('refreshType');
            }
            
            googletag.pubads().clear(slots);  
            googletag.pubads().refresh(slots);   
        });
    }


    function getSlot(slotId){
        // TEST: when invoked, getSlot gets the GPT slot object for a given slot id
        return (adService.gptSlots.hasOwnProperty(slotId)) ? adService.gptSlots[slotId] : false;
    }

    function setPageTargeting(key, val){    
        // TEST: when invoked, setPageTargeting sets a GPT page-level targeting key/value pair
        queuePush(function(){
            googletag.pubads().setTargeting(karma.utilities.cleanCharacters(key), karma.utilities.cleanCharacters(val));   
        });
    }

    function setSlotTargeting(slotId, key, val){
        // TEST: when invoked, setSlotTargeting sets a GPT targeting key/value pair on the given slot id
        var slot = (typeof slotId === 'string') ? getSlot(slotId) : false;        
        if(slot !== undefined && slot !== false){
            queuePush(function(){
                slot.setTargeting(karma.utilities.cleanCharacters(key), karma.utilities.cleanCharacters(val));    
            });
        }
    }

    function clearPageTargeting(key) {
        // TEST: when invoked, clearPageTargeting clears a GPT page-level key/value pair
        queuePush(function(){
            googletag.pubads().clearTargeting(karma.utilities.cleanCharacters(key));
        });
    }

    function clearSlotTargeting(slotId, key) {
        // TEST: when invoked, clearSlotTargeting clears a GPT targeting key/value pair on the given slot id
        var slot = (typeof slotId === 'string') ? getSlot(slotId) : false;        
        if(slot !== false){
            queuePush(function(){
                slot.clearTargeting(karma.utilities.cleanCharacters(key));    
            });
        }
    }

    function queuePush(fn){
        // TEST: when invoked, queuePush pushes a function into the GPT command queue (so that it executes after GPT is initialized)
        if(typeof fn === 'function'){
            googletag.cmd.push(fn);
        }
    }

    function addCallback(fn){
        // TEST: when invoked, addCallback pushes a function into the GPT slotRenderEnded callback stack (so that it executes after each ad is rendered)
        if(typeof fn === 'function'){
            queuePush(function(){ googletag.pubads().addEventListener('slotRenderEnded', fn); });
        }
    }

    return {
        refresh: refresh,
        display: display,
        displayAllSlots: displayAllSlots,
        define: define,
        destroy: destroy,
        queuePush: queuePush,
        enable: enable,
        load: load,
        setPageTargeting: setPageTargeting,
        setSlotTargeting: setSlotTargeting,
        clearSlotTargeting: clearSlotTargeting,
        clearPageTargeting: clearPageTargeting,
        getSlot: getSlot,
        addCallback: addCallback
    };

}());

/* modules/footer/components/lazyLoad.js */
karma.lazyLoad = (function(){
    "use strict";
    var fillQueue = [],
        adSlotFillQueue = []; // INSERT RVDEV-1191 - Index Container Tag Integration
    
    function create(type,container,autofill,callback,opts) {

        function loopThroughSlots(slotArray, slotType, getSlotToCount){
            var l = slotArray.length, slot, slotToCount;
            getSlotToCount = getSlotToCount || false;
            while(l--) {
                if (slotType === slotArray[l].slotContainer) {
                    if(!karma.tiers.hasTier(slotType)){
                        slotToCount = slotArray[l];
                    }else{
                        slot = slotArray[l];                                
                    }
                }else if(opts.tier && type.replace(/-tier\d/, '') === slotArray[l].slotContainer){
                    slotToCount = slotArray[l];                    
                }
            }
            return getSlotToCount ? slotToCount : slot;
        }

        // TEST: a function is available on adService.renderAds called 'createLazyLoadSlot'  
        // TEST: when invoked, 'createLazyLoadSlot' creates a lazy loaded ad slot, which is added to adService.adSlotsbyId and adService.gptSlots
        var abortMsg = '. Aborting createLazyLoadSlot()', tieredType;

        // TEST: if the type value (first argument) is a non-string or empty string, createLazyLoadSlot will fail gracefully
        if(typeof type !== 'string' || type === ''){
            karma.log('type is not set or is not a string' + abortMsg,{forceMessage:true});
            return false;
        }

        // TEST: if the container value (second argument) is string, but does not exist in the DOM, createLazyLoadSlot will fail gracefully
        if (typeof container === "string" && !document.getElementById(container)) {
            karma.log('Container with id of "' + container + '" does not exist in DOM' + abortMsg,{forceMessage:true,color:'red'});
            return false;
        }

        // TEST: if the autofill value (third argument) is not a boolean, autofill defaults to false        
        if (typeof autofill !== 'boolean') {
            karma.log('autofill is not set or is not a boolean, defaulting to false');
            autofill = false;
        }

        // TEST: if the fourth value is an object, assume that it is options, not callback. Set callback to undefined
        if (typeof callback === 'object' && Object.keys(callback).length){
            opts = callback;
            callback = undefined;
        }

        container = (typeof container === "string") ? document.getElementById(container) : container;

        // TEST: if the container value is a DOM element but is not attached to the document body, createLazyLoadSlot fails gracefully
        if (!document.body.contains(container) && document.body !== container) {
            karma.log('Lazy load container for '+type+' is not attached to the document body. Aborting createLazyLoadSlot()',{forceMessage:true,color:'red'});
            return false;
        }

        opts = opts || {};

        // TEST: if the type value (first argument) does not include tier info, and opts.tier was not passed, '-tier0' is appended to the slot type
        if (!type.match(/tier\d/) && !opts.tier) {
            type += '-tier0';
        }

        tieredType = karma.tiers.hasTier(type);
        // TEST: if 'tier' was passed in the 'opts' argument, and it's a number, append '-tierx' to the slot type
        if(opts.hasOwnProperty('tier') && !isNaN(parseInt(opts.tier, 10)) && !tieredType){
            type = type + '-tier' + opts.tier;
        }else if(tieredType !== null && tieredType.length > 1){
            opts.tier = tieredType[1];
        } else if (tieredType === null) {
            opts.tier = 0;
            type += '-tier0';
        }

        var slot = loopThroughSlots(adService.lazyLoadSlots, type),
            slotName,
            gptSlot,
            el,
            slotToCount = loopThroughSlots(adService.lazyLoadSlots, type, true),
            slotCopy;
        
        if(!slot && slotToCount !== undefined){
            slot = slotToCount;
            slot = karma.tiers.configureTierZeroSlot(slot);
        }

        // TEST: if the passed in type does not match a slot configured for this site, createLazyLoadSlot fails gracefully
        if (!slot) {
            karma.log('Slot "' + type  + '" is not available' + abortMsg,{forceMessage:true});
            return false;
        }

        slotToCount = slotToCount || slot;
        slotToCount.count = (!slotToCount.count) ? 0 : slotToCount.count;
        slotToCount.count +=1;
        slotName = slot.slotContainer + '-' + slotToCount.count;
        slotName = slotName.replace(/-tier\d/, '');               

        // TEST: if the type is valid, the KARMA placeholder DIV is added to the container DOM element with the correct tier
        el = document.createElement('div');
        el.id = slotName;
        el.setAttribute('data-tier', opts.tier);
        container.appendChild(el);

        /* Make a copy of the slot so we break reference to the lazyLoadSlots array */
        slotCopy = karma.utilities.clone(slot);
        slot = slotCopy;

        slot.slotTargetingValues = slot.slotTargetingValues || {};
        // TEST: the slot refreshType is set to lazy 
        slot.slotTargetingValues.refreshType = 'lazy';
        // TEST: if targeting values were passed in opts.targeting, those values are appended as slot targeting key/value pairs
        if (opts.hasOwnProperty('targeting') && typeof opts.targeting === 'object') {
            karma.utilities.extend(slot.slotTargetingValues, opts.targeting);
        }

        // TEST: the new slot is defined and registered with GPT
        gptSlot = adService.gptSlots[slotName] = karma.gpt.define(slot, karma.targeting.adunit.build(slot, adService.adUnit.top), slotName);
        // TEST: the new slot is added to adService.adSlotsById and adService.adSlots
        adService.adSlotsById[slotName] = slot;
        slot.slotContainer = slotName;
        adService.adSlots.push(slot);

        karma.targeting.slotLevel(slot, gptSlot, slotName);
        karma.gpt.display(slotName);
        // TEST: the new slot information is sent to GA
        karma.reporting.lazyLoadSlot(type);
        
        // TEST: the new slot is added to the fill queue
        fillQueue.push(gptSlot);
        
        // TEST: the new slot is added to the Index ad slot queue
        // INSERT START - RVDEV-1191 - Index Container Tag Integration
        if (karma.partner.header_tag_manager) {
            adSlotFillQueue.push(slot); 
        }
        // INSERT END - RVDEV-1191 - Index Container Tag Integration

        karma.log('Finished adding GPT slot ' + slotName );

        // TEST: if autofill is set to true, go ahead and fill the slot
        if (autofill) {
            fill();
        }

        if(opts.refreshable){
            // TEST: if opts.refreshable is set to true and opts.purgeRefreshList is set to true, purge the refresh slot list
            if(opts.purgeRefreshList) {
                karma.refresh.purgeSlots();
            }
            // TEST: if opts.refreshable is set to true, add the slot to the refreshable slots list
            karma.refresh.addSlot(slotName);
        }

        // TEST: if the callback value (third argument) is a function, add it to the GPT callback stack for this slot only
        if (typeof callback === 'function') {
            karma.gpt.addCallback(function(event) {
                if (event.slot.getSlotId().getDomId() === slotName){
                    callback(event);
                }
            });
        // TEST: if the callback value (third argument) is not a function or an object, do not add it to the GPT callback stack and log a warning
        } else {
            karma.log('Callback for ' + slotName + ' is not a function... ignoring callback',{forceMessage:true});
        }

        return el;
    }

    function fill() {
        // TEST: a function named fillLazyLoadSlots exists on adService.renderAds  
        // TEST: when called, fillLazyLoadSlots fills any lazy loaded slots that have been put in the fill queue     
        var gptSlots = fillQueue,
            slotConfigs = adSlotFillQueue;

        if (gptSlots.length > 0) {
            karma.refresh.processQueue(slotConfigs, gptSlots, true);
            fillQueue = [];
            adSlotFillQueue = [];             
        } else {
            karma.log('Attempted to fill newly created slots, but no unfilled slots exist.',{forceMessage:true});
        }

    }

    return {
        create: create,
        fill: fill,
        fillQueue: fillQueue
    };
}());

/* modules/footer/components/methods.js */
karma.methods = (function(){
  "use strict";
  function init(){
    return {
        createLazyLoadSlot: karma.lazyLoad.create,
        fillLazyLoadSlots: karma.lazyLoad.fill,
        lazyLoadSlotsFillQueue: karma.lazyLoad.fillQueue,

        updatePageTargeting: karma.targeting.updatePage,
        updateSlotTargeting: karma.targeting.updateSlot,

        buildDefaultRefreshSlots: karma.refresh.buildDefaultSlots,
        purgeRefreshSlots: karma.refresh.purgeSlots,
        addToRefreshSlots: karma.refresh.addSlot,
        removeFromRefreshSlots: karma.refresh.removeSlot,
        destroySlot: karma.slots.destroy,

        addToCallbackList: karma.callbacks.add,

        getSlotCount: karma.slots.getSlotCount,

        isInView: karma.viewability.isInView,
        
        clearRefreshTimer: karma.refresh.clearTimer,
        disableTimedRefreshOnSlot: karma.refresh.timed.disableTimedRefreshOnSlot,

        forceReleaseBanner: karma.docking.leaderboard.forceReleaseBanner,

        /* aliases to the old function names (for backwards compatibility) */
        createInfiniteScrollSlot: karma.lazyLoad.create,
        fillInfiniteScrollSlots: karma.lazyLoad.fill
    };
  }

  return {
    init: init
  };

}()); 
/* modules/footer/components/partner.a9.js */
karma.partner = karma.partner || {};
karma.partner.a9 = (function(){
    "use strict";

    // keys to target for each slot
    var a9TargetingKeys = ['amznbid', 'amzniid'];

    // load apstag JavaScript and initalize library with pubID
    function init() {
        // TEST: When a9 is enabled, window.apstag exists and is an object
        // TEST: When a9 is not enabled, apstag.js is not added to the page
        // TEST: if A9 is enabled in the config and we have A9-compatible slots, a9 is loaded 
        !function(a9, a, p, s, t, A, g) {
            if(a[a9]){ return; }
            function q(c, r) { a[a9]._Q.push([c,r]); }
            a[a9] = {
                init: function() {q('i', arguments);},
                fetchBids: function(){q('f', arguments);},
                _Q: []
            };
            A = p.createElement(s);
            A.async = !0;
            A.src = t;
            g = p.getElementsByTagName(s)[0];
            g.parentNode.insertBefore(A, g);
        }('apstag', window, document, 'script', 'https://c.amazon-adsystem.com/aax2/apstag.js');
        
        apstag.init({
            pubID: '3446'
        });  
    }

    // returns an array of slots like:
    // [{slotID: div-id-123, sizes: [[300, 250], [300,600]]}, { ... }]
    function getSlots(slots) {
        var a9Slots = slots || adService.a9SlotCatalog,
            slots = [];

        // turn object keyed by slot to an array of slots 
        Object.keys(a9Slots).forEach(function(slotID){
            a9Slots[slotID].a9Sizes = a9Slots[slotID].a9Sizes || [];
            slots.push(a9Slots[slotID]);
        });
        // map slots to format to include in fetchBids request and return
        return slots.map(function(slot) {
            return {
                slotID: slot.slotContainer,
                sizes: slot.a9Sizes
            };
        });
    }
    // fetch bids from a9 and process the response
    function load() {
        // TEST: karma.partner.a9 has a method called load
        // TEST: if A9 is enabled in the config and we have A9-compatible slots, a9 is loaded
        // TEST: we have an object on adService called 'a9SlotCatalog'
        // TEST: we have an object on adService called 'a9Slots'

        function processResponse(bids) {
            bids = validateBids(bids);
            adService.a9Loaded = true;
            storeTargeting(bids);
            karma.partner.proceedToSetup(false);
        }

        adService.a9Loaded = false;
        init();
        
        apstag.fetchBids({
            slots: getSlots(), 
            timeout: adService.partnerTimeout
        }, function(bids) {
            try {   
                processResponse(bids);
            } catch (e) {
                console.error(e);
            }   
        });

        var a9Timeout = setTimeout(function a9Limit(){
            if (!adService.a9Loaded) {
                adService.a9Loaded = true;
                //clearTimeout(a9FakeRequest);
                karma.partner.proceedToSetup(false);
            }
        }, adService.partnerTimeout);
    }

    function initiateRefresh(slots, callback) {                         
        // TEST: karma.partner.a9 has a method called initiateRefresh
        var timeoutLength = adService.partnerRefreshTimeout || 300,
            refreshTimeoutExpired = false;
        
        function processSoftRefreshResponse(bids, callback) {
            var refreshSlots = [];
            bids = validateBids(bids);
            if (!refreshTimeoutExpired) {
                bids.forEach(function(bid){
                    if (bid.hasOwnProperty('slotID')) {
                        var slotID = bid.slotID;
                        refreshSlots.push(adService.adSlotsById[slotID]);
                    }
                });
                adService.a9Loaded = true;
                storeTargeting(bids);
                setTargeting(refreshSlots);
                karma.partner.proceedToSetup(false);
                if (typeof callback === 'function') {
                    callback();
                }
            }
        }

        // filter to only a9Enabled slots
        slots = slots.filter(function(slot){
            return slot.a9 === true;
        });

        // check if there are any slots that a9 is targeting and if not,
        // excute callback and return from this function 
        if (slots.length === 0) {
            /* No valid sizes for a9 */
            callback();
            return; 
        }

        // clear the previous targeting from DFP to prevent sending more than once
        slots.forEach(function(slot) {
            delete slot.a9Targeting;
            a9TargetingKeys.forEach(function(key) {
                karma.targeting.clear(key,slot.slotContainer);  
            });
        });

        adService.a9Loaded = false;

        // request new bids for the slots
        apstag.fetchBids({
            slots: getSlots(slots),
            timeout: timeoutLength
        }, function(bids) {
            try {   
                processSoftRefreshResponse(bids, callback);
            } catch (e) {
                window.console.error(e);
                //karma.log(e.toString(),{color:'red',forceMessage:true});
            }   
        });

        setTimeout(function(){
            refreshTimeoutExpired = true;
            if (!adService.a9Loaded) {
                karma.log('a9 failed to load before timeout period ended.');
                callback();
            }
        },timeoutLength);
    }

    function validateBids(bids) {
        if (!Array.isArray(bids)) {
            karma.log('Unexpected data structure from a9. Ignoring response.');
            return [];
        } 
        return bids;
    }

    // associate the bid object returned from a9 with the corresponding slot object
    function storeTargeting(bids) {
        // TEST: If in debug mode, amazon targeting (amznbid) is added to an amazon slot
        // TEST: If in debug mode, amazon targeting (amzniid) is added to an amazon slot
        // TEST: If in debug mode, amazon targeting (size) is added to an amazon slot
        // TEST: If in debug mode, amazon targeting (slotId) is added to an amazon slot and matches the corresponding slotContainer
        var a9Slots = adService.a9SlotCatalog;
        bids.forEach(function(bid){
            var slot = Object.keys(a9Slots).filter(function(prop){
                if (a9Slots[prop].slotContainer === bid.slotID) {
                    return a9Slots[prop];
                }
            })[0];
            if (slot) {
                a9Slots[slot].a9Targeting = bid;
            }
        });
    }
    // set the a9 targeting keys on each slot
    function setTargeting(slots) {
        // TEST: karma.partner.a9 has a method called setTargeting
        // TEST: If in debug mode, amazon targeting (amznbid) is added to a GPT slot
        // TEST: If in debug mode, amazon targeting (amzniid) is added to a GPT slot
        // loop over slots
        slots.forEach(function(slot){
            // check if slot has an a9Targeting property
            if (typeof slot === 'object' && slot.hasOwnProperty('a9Targeting')) {
                // loop over keys to target
                a9TargetingKeys.forEach(function(key) {
                    // set key from the slot targeting onto the gpt slot
                    karma.targeting.set(key, slot.a9Targeting[key], slot.slotContainer);   
                });
            }
        });
    }

    return {
        load: load,
        initiateRefresh: initiateRefresh,
        targeting: setTargeting
    };
}());
/* modules/footer/components/partner.krux.js */
karma.partner = karma.partner || {};
karma.partner.krux = (function(){
    "use strict";
    // TEST: adService has a boolean property defined called "kruxEnabled"  
    adService.kruxEnabled = adService.kruxEnabled || false;

    function targeting(){
        /* Set Krux Interchange values */
        if (adService.kruxEnabled) {
            // TEST: if Krux is enabled, window.Krux exists and is a function
            window.Krux || ((window.Krux = function () {
                window.Krux.q.push(arguments);
            }).q = []);
            (function () {
                function
                retrieve(n) {
                    var m, k = 'kx' + n;
                    if (window.localStorage) {
                        return window.localStorage[k] || "";
                    } 
                    if (navigator.cookieEnabled) {
                        m = document.cookie.match(k + '=([^;]*)');
                        return (m && unescape(m[1])) || "";
                    }
                    return '';                
                }

                window.Krux.user = retrieve('user');
                window.Krux.segments = retrieve('segs') && retrieve('segs').split(',') || [];
            })();
        }

        if(adService.kruxEnabled) {/* Add Krux targeting values only if Krux is enabled in the config */
            // TEST: If we're on the second or greater page view, Krux has passed the user segments as a page targeting value  
            // TEST: If we're on the second or greater page view, Krux has passed the user id as a page targeting value  
            karma.targeting.set("ksg", window.Krux.segments);
            karma.targeting.set("kuid", window.Krux.user);
        }
    }

    return {
        targeting: targeting
    };

}());

/* modules/footer/components/performance.js */
// TEST: adService has a object property called performance  
karma.performance = adService.performance = (function(d, w){
    "use strict";
    var count = 0,
        logObject = {},
        timingSupported = !!window.performance && typeof window.performance.now === 'function',                     /* Check for performance timing support */
        pageRenderStart = timingSupported ? performance.timing.responseEnd - performance.timing.fetchStart : 0,   /* Set start of page render as event 0 */
        partnerEventLoggedOnce = {};

    function log(message, options) {
        
        if (typeof message === 'object') {
            options = message;
            message = options.label || '';
        } else {
            options = options || {};
        }

        function getRange(n) {
            var floor = Math.floor(n/100),
                low = (floor === n/100) ? floor * 100 - 99 : floor * 100 + 1,
                high = low + 99;
            return low + '-' + high;    
        }
        var referencePoint = options.referencePoint || false,
            report = options.report || false,
            color = options.color || 'green', 
            now = timingSupported ? Math.floor(performance.now()) : 0,
            timestamp = now - pageRenderStart,
            label,
            eventDelta = (referencePoint && logObject[referencePoint]) ? timestamp - logObject[referencePoint].timestamp : false,
            eventDeltaMessage = (eventDelta ? ' : ' +  referencePoint + ' +' + eventDelta : ''),
            range = (report === 'range' && eventDelta) ? getRange(eventDelta) : false,
            showLabel = !(!options.label || message === options.label),
            forceMessage = options.forceMessage || false,
            reportLabel = options.reportLabel || false;

        count++;

        label = options.label || ('entry' + count);

        /* Build log oject */
        logObject[label] = {
            timestamp: timestamp,
            referencePoint: referencePoint,
            eventDelta: eventDelta,
            eventDeltaMessage: eventDeltaMessage,
            consoleMessage: timestamp + (showLabel ? ' : ' + label : '') + ' : ' + message + eventDeltaMessage + (range ? ' (' + range + ')' : ''),
            report: report,
            reportLabel: reportLabel,
            reported: false
        };

        // TEST: if karmaDebug is in the page's URL parameters, the log event is added to the browser's console
        if ((karma.urlVars.isTrue('karmaDebug') || forceMessage) && window.console) { 
            window.console.log('%c--KARMA : ' + logObject[label].consoleMessage, "font-size:12px;color: "+color+";"); 
        }
    }

    function showLog() {
        // TEST: when invoked, adService.performance.showLog dumps the KARMA log to the console
        var c=window.console;
        Object.keys(logObject).forEach(function(m){
            c.log(logObject[m].consoleMessage);            
        });
        return logObject;
    }

    function logPartnerEventOnce(label, referencePoint) {
        var isSetupRunning = karma.partner.isSetupRunning();
        if (!partnerEventLoggedOnce[label]) {
            partnerEventLoggedOnce[label] = true;
            karma.performance.log(label + '. Win: ' + !isSetupRunning, {
                report: true,
                label: label,
                referencePoint: referencePoint,
                reportLabel: !isSetupRunning+''
            });
        }
    }

    function report() {
        var logEntry,
            reportObject,
            reportCount = 0;

        if (!karma.reporting.shouldReport()) {
            return false;
        }
    
        // TEST: performance timings are sent to GA if the measured value is between 0 and 599,999 ms
        Object.keys(logObject).forEach(function(i){
            logEntry = logObject[i];
            if (!!logEntry.report && !logEntry.reported) {           
               reportObject = {
                    'event': 'Timing',
                    'CategoryT': 'KarmaPerformance',
                    'Var': i,
                    'Value': (logEntry.eventDelta) || logEntry.timestamp,
                    'Label': logEntry.reportLabel || 'null'
                };

                logEntry.reported = true;

                if (reportObject.Value === 0) {
                    karma.log('Attempted to send performance timings to GA, but measured value is 0');
                    return false;
                }

                if (reportObject.Value >= 600000) {
                    karma.log('Attempted to send performance timing to GA, but measured value exceeds 599,999ms');
                    return false;
                }

                karma.reporting.report(reportObject, i);
            }
        });
        if (reportCount) {
            return reportCount;   
        } 
        
        karma.log('adService.performance.report() was called, but there was nothing to report');

    }

    function onloadHandler(){
        karma.performance.log({label:'onload'});
        // if runKarmaTests is in the URL, runKarmaTests.js is added to the page
        // TEST: if adTestTicket is in the URL, a test script with the ticket number is added to the page    
        var isLocal = (adService.environment === 'local'),
            protocol = 'http://',
            ticket = karma.urlVars.get('adTestTicket'),
            runTests = karma.urlVars.get('runKarmaTests'),
            testScript;
        if (ticket || runTests) {
            karma.gpt.queuePush(function(){
                testScript = d.createElement('script');
                testScript.src = runTests ? protocol + (isLocal ? 'local.karma.mdpcdn.com:9998/files/' : 'test-cdn.selectablemedia.com/karma/') +'tools/bookmarklets/runKarmaTests.js' : 'http://localhost:9090/test/' + ticket + '/test.js';
                d.body.appendChild(testScript);                
            });
        }
    }

    function exposeKarma() {
        w.karma = karma;
        /* add karmaHeader modules to window.karma */
        if(w.karmaHeader){
            Object.keys(w.karmaHeader).forEach(function(module){
                if(!w.karma.hasOwnProperty(module)){
                    w.karma[module] = karmaHeader[module];
                }else if(typeof w.karmaHeader[module] === 'object'){
                    Object.keys(w.karmaHeader[module]).forEach(function(submodule){
                        w.karma[module][submodule] = w.karmaHeader[module][submodule];
                    });
                }
            });
        }
    }

    /* Public api for adService.performance */
    return {
        exposeKarma: exposeKarma,
        log:log,
        showLog:showLog,
        report:report,
        logPartnerEventOnce: logPartnerEventOnce,
        logObject: logObject,
        onloadHandler: onloadHandler
    };

}(document, window));

karma.log = karma.performance.log;

/* modules/footer/components/refresh.timed.js */
karma.refresh = karma.refresh || {};
karma.refresh.timed = (function(){
    "use strict";
    /* Module locals (defined in init) */
    var adSlots = [],
        activeMap = {},
        map = [],
        slotCount,
        debounceCheck,
        refreshSettings,
        timedSettings,
        intervals,
        listenersActive = false;

    function init() {
        // TEST: karma.refresh.timed has a method called init
        adSlots = adService.adSlots;
        refreshSettings = adService.refresh || {};
        timedSettings = refreshSettings.timed || {};
        intervals = timedSettings.intervals || {};
        map = timedSettings.map || [];
        slotCount = 0;
        debounceCheck = karma.utilities.debounce(check,250);

        /* Add X-domain listener */
        window.addEventListener('message', function(e){
            var data;
            if (typeof e.data === 'string' && e.data.indexOf('karmaStopRefresh') !== -1 ) {
                try {
                    data = JSON.parse(e.data);
                    karma.refresh.timed.disableTimedRefreshOnSlot('div-gpt-' + data.slot);
                } catch (err) {
                    karma.log(err.toString(),{color:'red',forceMessage:true});
                }
            }
        },false);

        check();
    }
    
    function loopSlots(){
        var slot,
            slotMapContainer,
            mapProp,
            slotMap,
            slotMapCopy,
            mapLength = map.length,
            adSlotsLength = adSlots.length,
            i,
            j;
           
        adSlots = adService.adSlots;
           
        for (j=0; j<adSlotsLength;j++) {
            slot = adSlots[j];

            if (typeof slot.timedRefresh !== 'object') {
                slot.timedRefresh = {};
            }

            if (!slot.handle || !slot.handle.full) {
                return false;                       //Tisk tisk, there is a missing handle somewhere, so we'll give up
            }
            
            // TEST: If timed refresh is enabled, there are slots mapped in adService.refresh.timed.map, activeMap is an object and the properties align with the members of adService.timed.map
            if (!activeMap.hasOwnProperty(slot.slotContainer) && slot.timedRefresh.enabled !== false) {
                for (i=0; i<mapLength; i++) {
                    slotMapContainer = map[i];
                    mapProp = Object.keys(slotMapContainer)[0];  //Configurations are stored as an array of single-property objects
                    slotMap = slotMapContainer[mapProp];

                    if (karma.slots.matchHandle(slot, mapProp)) {
                        slotMapCopy = karma.utilities.clone(slotMap);
                        activeMap[slot.slotContainer] = slotMapCopy;
                        slotCount++;
                        slot.timedRefresh = slotMapCopy;
                        slotMapCopy.slot = slot;
                        slotMapCopy.mode = slotMap.hasOwnProperty('swap') ? 'swap' : 'refresh';
                        break;
                    } 
                    slot.timedRefresh.enabled = false;                    
                }
            }
        }
        if (slotCount > 0 && !listenersActive) {
            addListeners();
        } else if (slotCount <= 0 && listenersActive) {
            removeListeners();
        }
        return true;
    }

    function swap(slot) {
        var dom = karma.dom.get(slot),
            result = false,
            slotSettings = slot.timedRefresh;

        if (!slotSettings.filled && slot.requested && dom !== null) { 
            dom.id = slotSettings.swap.replace('div-gpt','karma-reload-container');
            dom.style.height = dom.clientHeight + 'px';
            dom.style.width = dom.clientWidth + 'px';
            karma.slots.destroy(slot.slotContainer);
            karma.lazyLoad.create(slotSettings.swap,dom,true,function(){dom.style.height='';dom.style.width='';},{targeting:{'refreshType':'swap'}});
            result = true;
        } else {
            karma.performance.log('Tried to swap ' + dom.id + ', but failed. Disabling swap on this slot.');
            removeSlot(slot);
        }
        return result;
    }

    function clearSlotTimer(slot) {
        // TEST: karma.refresh.timed has a method called clearSlotTimer and it sets slot.timedRefresh.timer to false
        slot.timedRefresh = slot.timedRefresh || {};
        clearTimeout(slot.timedRefresh.timer);
        slot.timedRefresh.timer = false; 
    }


    function startSlotTimer(slot, timeout) {
        // TEST: karma.refresh.timed has a method called startSlotTimer, and it returns a timeout (number)
        var timer = setTimeout((function(slot) { 
            
            return function() { 
                if (isSlotInView(slot)) {
                    clearSlotTimer(slot); 
                    var timedRefreshSlotsOverride = {};
                    if (slot.timedRefresh.mode === 'swap') {
                        karma.log("Swapping " + slot.slotContainer);
                        swap(slot);    
                    } else if (slot.timedRefresh.mode === 'refresh') {
                        timedRefreshSlotsOverride[slot.slotContainer] = adService.gptSlots[slot.slotContainer];
                        karma.refresh.doRefresh(timedRefreshSlotsOverride);
                    }
                    
                }    
            }; 
        }(slot)), timeout);
        return timer;
    }

    function isSlotInView(slot){        
        var isInView = karma.viewability.isInView(slot);
        return isInView; 
    }

    function check() {
        // TEST: karma.refresh.timed has a method called check
        if (!isEnabled()) {
            return;
        }

        var isRefreshable,
            slotsAreValid = loopSlots(),
            timeout;

        if (slotCount > 0) {
            if (!slotsAreValid){
                karma.log("An ad slot is missing a handle. Aborting slot swap.", {forceMessage:true});
                return;
            }

            Object.keys(activeMap).forEach(function(slot){
                slot = activeMap[slot].slot;
                isRefreshable = isTimedRefreshable(slot);
                timeout = intervals[slot.timedRefresh.mode] || 20000;

                if (slot.requested && !slot.timedRefresh.timer && isRefreshable) {
                    slot.timedRefresh.timer = startSlotTimer(slot, timeout); 
                    karma.log('Starting timer for ' + slot.slotContainer + ': ' + timeout);
                } else if (!isRefreshable && slot.timedRefresh.timer) {
                    clearSlotTimer(slot);
                    karma.log('Clearing timeout for ' + slot.slotContainer);                  
                }                
            });
        }        
    }

    function isTimedRefreshable(slot){
        var timedRefreshable = false,
            tier = slot.handle.tier || 0,
            isAdX = karma.utilities.isAdX(slot),
            unrestrictedTiers = timedSettings.unrestrictedTiers || [],
            isUnrestrictedTier = unrestrictedTiers.indexOf(tier) > -1,
            isInView = isSlotInView(slot);
        if (isInView && !timedRefreshOverrideIsSet(slot) && (isAdX || isUnrestrictedTier || !advertiserIsBlacklisted(slot))) {
            timedRefreshable = true;
            slot.timedRefreshOverride = false; // Reset the override to false. This will need to be reset by DFP if the slot is refreshable.
        }

        return timedRefreshable;
    }

    function advertiserIsBlacklisted(slot) {
        var result = false,
            responseInformation = slot.gptSlot.getResponseInformation() || {},
            responseAdvertiserId = responseInformation.advertiserId || null,
            blackList = timedSettings.advertiserBlacklist || [];

        if (blackList.indexOf(responseAdvertiserId) > -1) {
            karma.log('Advertiser for ' + slot.slotContainer + ' is blacklisted for timed refresh. Disabling on this slot.');
            removeSlot(slot);
            result = true;
        }
        return result;
    }

    function timedRefreshOverrideIsSet(slot) {
        var result = slot.timedRefreshOverride || false;
        return result;
    }

    function isEnabled(){
        // TEST: karma.refresh.timed has a method called isEnabled and it returns a boolean
        var timedRefreshEnabled = false,
            as = adService;

        if (as.refresh && as.refresh.timed && as.refresh.timed.enabled && as.refresh.timed.map && typeof as.refresh.timed.map === 'object' && as.refresh.timed.map.length > 0) {
            timedRefreshEnabled = true;
        }else{
            karma.log('Timed refresh disabled for this page.');
        }

        return timedRefreshEnabled;
    }

    function removeSlot(slot) {
        // TEST: karma.refresh.timed has a method called removeSlot 
        // TEST: If a slot is removed, it no longer appears in the activeMap, and timedRefrsh.enabled is set to false on the slot.
        delete activeMap[slot.slotContainer];
        slot.timedRefresh = slot.timedRefresh || {};
        slot.timedRefresh.enabled = false;
        slotCount--;
    }

    function addListeners() {
        listenersActive = true;
        document.addEventListener('scroll', debounceCheck);
        window.addEventListener('focus', debounceCheck);
        window.addEventListener('blur',debounceCheck);
    }

    function removeListeners() {
        listenersActive = false;
        document.removeEventListener('scroll', debounceCheck);
        window.removeEventListener('focus', debounceCheck);
        window.removeEventListener('blur', debounceCheck);
    }

    function disableTimedRefreshOnSlot(containerId) {
        // TEST: When disableTimedRefreshOnSlot is called, the slot is removed from the active map and slot.timedRefresh.enabled === false
        var adSlotsById = adService.adSlotsById,
            slot;
        if (typeof containerId === 'string' && adSlotsById.hasOwnProperty(containerId)) {
            slot = adSlotsById[containerId];
            slot.timedRefreshOverride = true;
            clearSlotTimer(slot);
            removeSlot(slot);
            karma.log('Disabling timed refresh on ' + containerId);
        }
    }

    return {
        init: init,
        check: check,
        isEnabled: isEnabled,
        startSlotTimer: startSlotTimer,
        clearSlotTimer: clearSlotTimer,
        disableTimedRefreshOnSlot: disableTimedRefreshOnSlot,
        removeSlot: removeSlot
    }; 
}());
/* modules/footer/components/reload.js */
karma.reload = (function(){
  "use strict";
  // TEST: adService.useSSL is set to true  
  adService.useSSL = true;

  function header(){
    // TEST: if karma.header.js is not present on the page, request it (except on AR)        
    var adTestSite = karma.urlVars.get('adTestSite'), env, headerPath;
    if(!window.karmaHeader && !karma.utilities.getKarmaScript('header') && window.location.hostname.indexOf('allrecipes') === -1 && (adTestSite === null || !adTestSite.match(/^ar\.(supporting\.)?mdp/))){
        karma.log('Attempting to load Karma header file from footer',{forceMessage: true});
        env = adService.environment || 'www';
        headerPath = 'https://'
          + ((env !== 'www') ? env + '.' : '')
          + 'karma.mdpcdn.com' + ((env === 'local') ? ':9999' : '') 
          + '/service/js'+ (adService.minified ? '-min' : '') + '/karma.header.js';    
        karma.utilities.fetchResource(headerPath, function(){
            karma.log('Karma header file was loaded from footer');
        }, function(){
            karma.log('Karma header file failed to load from the footer',{forceMessage: true, color: 'red'});
        });
    }
  }

  function checkParams() {
    var matches = karma.utilities.getKarmaScript('footer'),
        initialEnv = (matches[1] === '' || matches[1] === undefined) ? 'www' : matches[1],
        initialMin = matches[2] === 'js-min',
        fileName = matches[3],
        envParam = karma.urlVars.get('adTestEnv'),
        minParam = karma.urlVars.get('adTestMin'),
        desiredEnv = envParam || initialEnv,
        desiredMin = minParam || ((desiredEnv === 'local' && desiredEnv !== initialEnv) ? 'false' : initialMin),
        reloadScript,
        subDomain = (desiredEnv === 'www') ? '' : desiredEnv + '.',
        reloadPath;
    
    // TEST: if adTestMin is false, the active KARMA file is unminified    
    desiredMin = JSON.parse(desiredMin);
    // TEST: adService.environment matches the environment requested in adTestEnv    
    adService.environment = desiredEnv;
    adService.minified = desiredMin;
  
    // TEST: if there is a mismatch between the initial environment and the requested environment, or the initial minification and the requested minification, and adService has not already been reloaded, the initialization of KARMA is suppressed and a new KARMA file is requested    
    if ((initialEnv !== desiredEnv || initialMin !== desiredMin) && !adService.reloaded) {
      
      // TEST: if we're requesting a new KARMA file, it matches the requested environment and minifaction
      // TEST: if the requested environment is local, :9999 is added to the end of the new hostname
      reloadPath = 'https://'
        + subDomain
        + 'karma.mdpcdn.com'
        + ((desiredEnv === 'local') ? ':9999' : '') 
        + '/service/js'
        + ((desiredMin === true) ? '-min' : '')
        + '/'
        + fileName;    

      // TEST: if we're requesting a new KARMA file, adService.karmaPath matches the new path    
      adService.karmaPath = reloadPath;
      // TEST: if we're requesting a new KARMA file, adService.reloaded is true
      adService.reloaded = true;
      
      // TEST: if we're requesting a new KARMA file, a second instance of the karma.footer.js file is present on the page          
      reloadScript = document.createElement('script');
      reloadScript.src = reloadPath;
      document.getElementsByTagName('head')[0].appendChild(reloadScript);    
      karma.log('Reloading KARMA due to testing URL param. Env: ' + desiredEnv + ', Min: ' + desiredMin,{forceMessage:true});
      return true;
    } 
    return false;
    
  }

  return {
    header: header,
    checkParams: checkParams
  }; 

}());
/* modules/footer/components/reporting.js */
karma.reporting = (function(){
  "use strict";
  var random = Math.floor(Math.random() * (100 - 1) + 1);
  
  // TEST: adService has an boolean property called adService.reportingEnabled
  // TEST: adService has an integer property called adService.reportingSampleRate
  // TEST: adService.reportingEnabled is set to false on sites like AllRecipes that don't have GA

  function shouldReport () {
    return (!adService.reportingSampleRate || 0) || (random <= (adService.reportingSampleRate || 0));
  }

  function report(reportObject, key, data){
    if(adService.reportingEnabled + '' === 'true'){
      window.dataLayer = window.dataLayer || [];
      if(window.dataLayer && typeof window.dataLayer === 'object' && window.dataLayer.push && typeof window.dataLayer.push === 'function'){
        window.dataLayer.push(reportObject);
        karma.log('Reported ' + key + (data ? ': ' + data : ''));  
      }
    }
  }

  function initialSlots(){
    if (shouldReport()) {
      var slotLookupArray = karma.slots.getSlotIdTierCombos(adService.adSlots);
      report({'event': 'adRequest', 'karmaAdSlots': slotLookupArray, 'karmaPageType': karma.targeting.get('type'), 'karmaChannel': adService.unitValues.channel, 'karmaId': adService.pageTargetingValues.id}, 'adRequest', slotLookupArray.join());
    }
  }

  function lazyLoadSlot(slotName){
    if (shouldReport()) {
      report({'event': 'adSlotLazyLoad', 'karmaAdSlots': [slotName], 'karmaPageType': karma.targeting.get('type'), 'karmaChannel': adService.unitValues.channel, 'karmaId': adService.pageTargetingValues.id}, 'adSlotLazyLoad', slotName);
    }
  }

  return{
    report: report,
    shouldReport: shouldReport,
    initialSlots: initialSlots,
    lazyLoadSlot: lazyLoadSlot
  };

}());  
/* modules/footer/components/slots.js */
karma.slots = (function(){
    "use strict";
    // TEST: adService has an object property called gptSlots
    adService.gptSlots = adService.gptSlots || {};
    // TEST: adService has an array property called adSlots      
    adService.adSlots = adService.adSlots || [];
    // TEST: adService has an object property called adSlotsById
    adService.adSlotsById = {}; 

    var initialLoadSlots = [],
        slotCounter = {},
        videoCompanionSlot = document.getElementById('div-gpt-videoCompanion');
    
    function isValidSlotForDevice(slot){
        // TEST: on desktop, our list of GPT slots does not contain any mobile slot names  
        // TEST: on mobile, our list of GPT slots should only contain mobile slot names + interstitial/wallpaper/sponsorLogo  
        return (slot.isMobile && mobileAds) || (!slot.isMobile && !mobileAds);
    }

    function setResponseData(event){
        // TEST: each slot inside adService.adSlots has a property called 'requested'
        // TEST: each slot inside adService.adSlots has a property called 'creativeId'
        // TEST: each slot inside adService.adSlots has a property called 'lineItemId'
        // TEST: each slot inside adService.adSlots has a property called 'isEmpty'
        // TEST: each slot inside adService.adSlots has a property called 'size'
        adService.adSlots = adService.adSlots || [];
        var id = event.slot.getSlotId().getDomId(), l = adService.adSlots.length;
        while(l--){
            if(adService.adSlots[l].slotContainer === id){
                adService.adSlots[l].requested = true;
                adService.adSlots[l].creativeId = event.creativeId;
                adService.adSlots[l].lineItemId = event.lineItemId;
                adService.adSlots[l].isEmpty = event.isEmpty;
                adService.adSlots[l].size = event.size;
            }
        }     
    }

    
    function injectOutOfPageSlots(){
        // TEST: if there's a video companion slot on the page, the interstitial and wallpaper slots should not be present
        // TEST: if adService.suppressInterstitial is set to true, the interstitial and wallpaper slots should not be present
        if (videoCompanionSlot === null && !adService.suppressInterstitial) {
            var interstitial, wallpaper;

            // TEST: if there isn't a video companion slot, and adService.suppressInterstitial is not set to true, the interstitial slot should be present
            karma.log('Creating KARMA interstitial slot.');
            interstitial = document.createElement('div');            
            interstitial.id = 'div-gpt-interstitial';
            interstitial.setAttribute('data-tier', 1);            
            document.body.appendChild(interstitial);

            // TEST: if there isn't a video companion slot, and adService.suppressInterstitial is not set to true, the wallpaper slot should be present
            karma.log('Creating KARMA wallpaper slot.');
            wallpaper = document.createElement('div');
            wallpaper.id = 'div-gpt-wallpaper';
            wallpaper.setAttribute('data-tier', 1);            
            document.body.appendChild(wallpaper);
        }
    }

    function setup(){
        
        function buildAdSlotsById(){
            // TEST: adService.adSlotsById is the same as adSlots but with the ids as keys on an object  
            // TEST: adService.gptSlots and adService.adSlotsById should have the same number of slots          
            karma.log('buildAdSlotsById: adService.adSlots.length: ' + adService.adSlots.length);
            var l = adService.adSlots.length, adSlot;
            while(l--){
                adSlot = adService.adSlots[l];
                adService.adSlotsById[adSlot.slotContainer] = adSlot;
            }
            return adService.adSlotsById;
        }        

        var slots = adService.adSlots,
            finalSlots = [],
            si,
            sl = slots.length,
            slot;

        for(si = 0; si < sl; si++) {
            slot = slots[si];
            if(isValidSlotForDevice(slot) || slot.slotType === "interstitial")  {
                // TEST: if the video companion slot is on the page, but it's hidden, don't request it
                if (slot.slotType === 'videoCompanion' && videoCompanionSlot && karma.viewability.isElementHidden(videoCompanionSlot)) {
                    karma.log('The Video Campanion div is hidden and will not be added to finalSlots.');                    
                } else {
                    finalSlots.push(slot);
                }
            }
        }
        // TEST: adService returned valid slots from the config service in a property called adSlots, which is a non-empty array      
        adService.adSlots = finalSlots;

        /* build list of slots by id */
        adService.adSlotsById =  buildAdSlotsById();
    }

    function define(){
        var j,
            adSlotsArray = adService.adSlots,
            slotsArrayLength = adSlotsArray.length,
            adSlot,
            slotAdUnit;

         /* defineSlot calls for each adSlot in the array*/ //karma.gpt.function define(slot, slotAdUnit, slotName)
         // TEST: adService.gptSlots is an id-indexed object containing references to the slots we've requested through GPT      
        for(j = 0; j < slotsArrayLength; j++){
            adSlot = adSlotsArray[j];        
            // TEST: each ad slot has a valid tiered ad unit   
            slotAdUnit = karma.targeting.adunit.build(adSlot, adService.adUnit.top);
            if(adSlot.hasOwnProperty('slotType')) { 
                // TEST: if the video companion slot is present, don't include it with the initial ad request (the player will request it instead)
                if(adSlot.slotType === "videoCompanion") { 
                    adService.gptSlots[adSlot.slotContainer] = karma.gpt.define(adSlot, slotAdUnit, adSlot.slotContainer);
                }else{
                    adService.gptSlots[adSlot.slotContainer] = karma.gpt.define(adSlot, slotAdUnit, adSlot.slotContainer);
                    initialLoadSlots.push(adService.gptSlots[adSlot.slotContainer]);                
                }
                karma.targeting.slotLevel(adSlot);
            }
        }

        return initialLoadSlots;

    } 

    function getSlotCount() {
        return adService.adSlots.length;
    }

    function isLazy(slot) {
        var isItLazy = false;
        if (typeof slot === 'object' && slot.hasOwnProperty('slotContainer') && slot.slotContainer.indexOf('-lazy-') > 0) {
            isItLazy = true;
        }
        return isItLazy;
    }

    function makeHandle(slot) {
        var specialAdUnit = slot.specialAdUnit || '',
            tierMatch = specialAdUnit.match(/^\.tier(\d)$/),
            tier = tierMatch ? tierMatch[1] : 0,
            propName = slot.slotType + ':tier' + tier;

        slotCounter[propName] = slotCounter[propName] || 0;
        slotCounter[propName]++;
        // TEST: each slot has an object property called 'handle' that has the following keys: full, type, tier, instance
        slot.handle = {
            full: propName + ':' + slotCounter[propName],
            type: slot.slotType,
            tier: parseInt(tier, 10),
            instance: slotCounter[propName]
        };
    }

    function matchHandle(slot, handle) {
        if (slot === undefined) {
            karma.performance.log('Tried to match handle, but slot is undefined', {forceMessage:true});
            return false;
        }

        if (!slot.handle) {
            karma.performance.log('No handle is available for slot: ' + slot.slotContainer, {forceMessage:true});
            return false;
        }
        if (slot.handle.full === handle) {return true;} //If we have an exact match, no need to parse everything out.

        var slotHandle = slot.handle,
            matchPattern = /^([a-zA-Z\-]*)(?::tier)?(\d)?:?(\d+)?$/,
            handleMatch = handle.match(matchPattern) || [],
            matchType = handleMatch[1],
            matchTier = handleMatch[2],
            matchInstance = handleMatch[3],
            result = true;

        if (matchType !== slotHandle.type) {
            result = false;
        }

        if (matchTier !== slotHandle.tier+'' && matchTier !== undefined) {
            result = false;
        }

        if (matchInstance !== slotHandle.instance+'' && matchInstance !== undefined ) {
            result = false;
        }

        return result;
    }

    function getSlotIdTierCombos(slotArray){
        var idTierArray = [], l;
        slotArray = Array.isArray(slotArray) ? slotArray : [];
        l = slotArray.length;

        while (l--) {
            idTierArray.push(slotArray[l].slotContainer + (slotArray[l].specialAdUnit ? slotArray[l].specialAdUnit.replace('.', ':') : ''));                        
        }
        return idTierArray;
    }

    function matchHandleArray(slot, handleArray) {
        var l;

        handleArray = Array.isArray(handleArray) ? handleArray : [];
        l = handleArray.length;

        while (l--) {
            if (matchHandle(slot, handleArray[l])) {
                return true;
            }
        }

        return false;    
    }

    function destroy(slotId){
        if(slotId){
    
            // TEST: when invoked, karma.slots.destroy removes the slot from GPT
            if(adService.gptSlots.hasOwnProperty(slotId)){
                karma.gpt.destroy(adService.gptSlots[slotId]);
                // TEST: when invoked, karma.slots.destroy removes the slot from adService.gptSlots
                delete adService.gptSlots[slotId];
            }

            // TEST: when invoked, karma.slots.destroy removes the slot from all partner slot arrays
            karma.partner.removeSlotFromAll(slotId);
                    
            // TEST: when invoked, karma.slots.destroy removes the slot from the list of user-refreshable slots
            karma.refresh.removeSlot(slotId);
            // TEST: when invoked, karma.slots.destroy removes the slot from the list of timed-refreshable slots
            karma.refresh.timed.removeSlot(adService.adSlotsById[slotId]);

            // TEST: when invoked, karma.slots.destroy removes the slot from adService.adSlots
            adService.adSlots = adService.adSlots.filter(function(v){ return v.slotContainer !== slotId; });

            // TEST: when invoked, karma.slots.destroy removes the slot from adService.adSlotsById
            if(adService.adSlotsById.hasOwnProperty(slotId)){
                delete adService.adSlotsById[slotId];
            }

        }
        return false;
    }

    return {
        setup: setup,
        define: define,
        makeHandle: makeHandle,
        matchHandle: matchHandle,
        matchHandleArray: matchHandleArray,
        injectOutOfPageSlots: injectOutOfPageSlots,
        isValidSlotForDevice: isValidSlotForDevice,
        getSlotIdTierCombos: getSlotIdTierCombos,
        getSlotCount: getSlotCount,
        setResponseData: setResponseData,
        isLazy: isLazy,
        destroy: destroy
    };
    
}());
/* modules/footer/components/tiers.js */

karma.tiers = (function(){
  "use strict";
    
  function configureTierZeroSlot(slot){
      if(!slot.specialAdUnit){
        slot.specialAdUnit = '.tier0';
        slot.yieldbot = false;
        slot.pubmatic = false;
        // todo: add other header bidding partners?
      }
      return slot;
  }
  
  function hasTier(slotName){
      return slotName.match(/-tier(\d+)$/);
  }

  function isValidTier(tier){
      return (tier !== undefined && !isNaN(parseInt(tier, 10)) && tier >= 0 && tier <= 4);
  }

  function setTierSettings(tier, slot, site){

      if (isValidTier(tier)){
          var slotContainer = slot.slotContainer.replace(/-\d+$/i, ''), 
              siteSettings = adService.siteSettings,
              tierString = 'tier' + tier,
              i, l;

          // TEST: slots have a special ad unit of '.tierx' that matches the data-tier attribute
          slot.specialAdUnit = '.tier' + tier;

          if (siteSettings.tiers && siteSettings.tiers[slotContainer] && siteSettings.tiers[slotContainer][tierString]){
              // TEST: tier-level configurations override slot-level configs
              Object.keys(siteSettings.tiers[slotContainer][tierString]).forEach(function(key){
                slot[key] = siteSettings.tiers[slotContainer][tierString][key];
              });
              // TEST: if the slot is Yieldbot-enabled, the Yieldbot slot name, if not defined already, defaults to the slot container name with -tierx appended to the end
              if (slot.yieldbot && !slot.hasOwnProperty('yieldbotSlot')) {
                slot.yieldbotSlot = slotContainer + '-tier' + tier;
              }

              // TEST: if the slot is Pubmatic-enabled, the Pubmatic key has tierx inserted before the @ sign
              if (slot.pubmaticKeys && typeof slot.pubmaticKeys === 'object' && slot.pubmaticKeys.length > 0){
                  l = slot.pubmaticKeys.length;
                  for (i=0; i<l; i++){
                      slot.pubmaticKeys[i] = slot.pubmaticKeys[i].replace('@', slot.specialAdUnit + '@');
                  }
              } else if (!slot.hasOwnProperty('pubmaticKeys') && slot.hasOwnProperty('pubmaticSizes')){
                  slot.pubmaticKeys = [];
                  l = slot.pubmaticSizes.length;
                  for (i=0; i<l; i++){
                      slot.pubmaticKeys.push(site + slot.specialAdUnit + '@' + slot.pubmaticSizes[i]);
                  }                
              }
          }
      }
  }

  return{
    configureTierZeroSlot: configureTierZeroSlot,
    hasTier: hasTier,
    setTierSettings: setTierSettings
  };
}());
/* modules/footer/components/urlvars.js */
karma.urlVars = (function(w){
    "use strict";
    var queryString = w.location.search;

    // TEST: karma.urlVars.vars is an object that contains all key/value pairs passed in the URL query string
    function init() {
        var vars = {},
            parts = queryString.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {
                vars[key.toLowerCase()] = value;
            });
        return vars;
    }

    function get(key){
        if(karma.urlVars.vars.hasOwnProperty(key.toLowerCase())){
            return karma.urlVars.vars[key.toLowerCase()];
        }
        return null;
    }

    function isTrue(key) {
        return get(key.toLowerCase()) === 'true';
    }

    function getTestValues(type){
        function titleCase(str){
            return str ? str.replace(/\b\w+/g,
                function(str){
                    return str.charAt(0).toUpperCase() + str.substr(1).toLowerCase();
                }) : '';
        }

        // TEST: karma.urlVars.testValues is an object that contains all key/value pairs that are contained within adTestKeyValues in the URL
        // TEST: karma.urlVars.serviceValues is an object that contains all key/value pairs that are contained within adTestServiceKeyValues in the URL
        type = titleCase(type) || '';

        var testValues = {};
        queryString.replace(new RegExp("[?&]adtest" + type + "keyvalues=([^&]*)", 'i'), function(m,valueArray) {
            valueArray.replace(/([^,-]+),([^-]*)/gi, function(tagM, tagKey, tagValue) {
                testValues[tagKey] = tagValue;
            });
        });

        return testValues;
    }

    function setTestValues(type){
        type = type || '';
        switch(type){
            case 'service':
                // TEST: On any URL that has adTestKeyServiceValues=key,value-key2,value2 in the query string, adService['key'] is set to 'value', and adService['key2'] is set to 'value2' (overriding config-set values)
                var testServiceValues = karma.urlVars.serviceValues;
                Object.keys(testServiceValues).forEach(function(key){
                    adService[key] = karma.utilities.coerceBoolean(testServiceValues[key]);
                });
            break;
            default:
                // TEST: On any URL that has adTestKeyValues=key,value-key2,value2 in the query string, the page targeting parameter 'key' is set to 'value', and the page targeting parameter 'key2' is set to 'value2'
                karma.targeting.loopSet(karma.urlVars.testValues);
            break;
        }
    }

    function containsEmail(){
        return w.location.href.match(/[-a-z0-9~!$%^&*_=+}{\'?]+(\.[-a-z0-9~!$%^&*_=+}{\'?]+)*@([a-z0-9_][-a-z0-9_]*(\.[-a-z0-9_]+)*\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|[a-z][a-z])|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(:[0-9]{1,5})?/ig);
    }

    return {
        vars: init(),
        testValues: getTestValues(),
        serviceValues: getTestValues('service'),
        setTestValues: setTestValues,
        get: get,
        isTrue: isTrue,
        containsEmail: containsEmail
    };

}(window));
/* modules/footer/components/viewability.js */
karma.viewability = (function(){
  "use strict";
  var browserWindowFocused = true,
      supportsViewabilityDetection = typeof document.getElementsByTagName('head')[0].getBoundingClientRect === 'function' && typeof document.elementFromPoint === 'function' && typeof addEventListener === 'function';

  function isElementHidden(el) {
      return (el !== null) ? (el.offsetParent === null) : false;
  }

  function addFocusListeners(){
    // TEST: window listeners are added that determine whether or not the window is focused
    if (supportsViewabilityDetection) {    
        window.addEventListener('blur',function(){
            browserWindowFocused = false;
        });

        window.addEventListener('focus',function(){
            browserWindowFocused = true;
        });
    } else {                        
        browserWindowFocused = false;
    }
  }

  function getViewabilityElement(dom) {
    return (!!dom.firstChild && !!dom.firstChild.firstChild) ? dom.firstChild.firstChild : dom.firstChild;
  }

  function isInView(slot, bypassFocusRules) {
    /* NOTE: bypassFocusRules should be used for in-console testing only */
    
    var el = getViewabilityElement(karma.dom.get(slot)),
        inView = true,
        rect = el.getBoundingClientRect(),
        topLeft = [Math.round(rect.left),Math.round(rect.top)],
        topRight = [Math.round(rect.right-1),Math.round(rect.top)],
        bottomLeft = [Math.round(rect.right-1),Math.round(rect.bottom-1)],
        bottomRight = [Math.round(rect.left),Math.round(rect.bottom-1)],
        coords = [topLeft,topRight,bottomLeft,bottomRight],
        i,
        currentCoords,
        currentX,
        currentY,
        topEl;

    if (!bypassFocusRules && (!browserWindowFocused || document.visibilityState !== 'visible')) {
        inView = false;
        return inView;
    }

    // TEST: if the mobile adhesive banner is passed in to karma.viewability.isInView, it always returns true
    if(karma.dom.get(slot).id.indexOf('div-gpt-mob-adhesive-banner-fixed') !== -1){
      inView = true;
      return inView;
    }

    for (i=0;i<4;i++) {
        currentCoords = coords[i];
        currentX = currentCoords[0];
        currentY = currentCoords[1];
        topEl = document.elementFromPoint(currentX,currentY);
        if (topEl !== el && !el.contains(topEl)) {
            inView = false;
            break;
        }
    }

    return inView;
  } 

  return {
    isInView: isInView,
    isElementHidden: isElementHidden,
    addFocusListeners: addFocusListeners
  };

}());       
/* modules/footer/built_components/config.slots.js */
karma.config = karma.config || {};
karma.config.slots = (function() {
    "use strict";
    var slotContainer_aliases,
        lazyLoad_definitions,
        slotContainers = {},
        slotConfigs = {}, // This will house the instant and lazy slot configs for the current page
        finalSlots = [],
        slot_definitions = [
            {
    slotContainer: 'div-gpt-pushdown-flex',
    slotType: 'pushdown',
    slotSizes: ["970x66", "970x90", "970x250"],
    yieldbot: false,
    incrementable: true
}, {
    slotContainer: 'div-gpt-leaderboard-flex',
    slotType: 'leaderboard',
    slotSizes: ["728x90", "970x66", "970x90", "970x250"],
    a9: true,
    a9Sizes: [[728,90]],
    pubmatic: true,
    pubmaticSizes: ["728x90"],
    indexExchange: true,
    indexExchangeSlotIds: ["27"],
    rubicon: true,
    apnx: true,
    apnxUnits: {"9882296":[[728,90]]},
    yieldbot: true,
    yieldbotSizes: [
        [728, 90]
    ],
    canBeLazy: true,
    incrementable: true
}, {
    slotContainer: 'div-gpt-leaderboard-fixed',
    slotType: 'leaderboard',
    slotSizes: ["728x90"],
    a9: true,
    a9Sizes: [[728,90]],
    pubmatic: true,
    pubmaticSizes: ["728x90"],
    indexExchange: true,
    indexExchangeSlotIds: ["27"],
    rubicon: true,
    apnx: true,
    apnxUnits: {"9882296":[[728,90]]},
    yieldbot: true,
    yieldbotSizes: [
        [728, 90]
    ],
    canBeLazy: true,
    incrementable: true
}, {
    slotContainer: 'div-gpt-square-flex',
    slotType: 'square',
    slotSizes: ["300x250", "300x600", "300x1050"],
    a9: true,
    a9Sizes: [[300,250]],
    pubmatic: true,
    pubmaticSizes: ["300x250"],
    indexExchange: true,
    indexExchangeSlotIds: ["17", "19"],
    rubicon: true,
    apnx: true,
    apnxUnits: {"9882292":[[300,250]]},
    yieldbot: true,
    yieldbotSizes: [
        [300, 250]
    ],
    canBeLazy: true,
    incrementable: true
}, {
    slotContainer: 'div-gpt-square-fixed',
    slotType: 'square',
    slotSizes: ["300x250"],
    a9: true,
    a9Sizes: [[300,250]],
    pubmatic: true,
    pubmaticSizes: ["300x250"],
    indexExchange: true,
    indexExchangeSlotIds: ["17"],
    rubicon: true,
    apnx: true,
    apnxUnits: {"9882292":[[300,250]]},
    yieldbot: true,
    yieldbotSizes: [
        [300, 250]
    ],
    canBeLazy: true,
    incrementable: true
}, {
    slotContainer: 'div-gpt-shop-square-fixed',
    slotType: 'square',
    slotSizes: ["300x250"],
    a9: true,
    a9Sizes: [[300,250]],
    pubmatic: true,
    pubmaticSizes: ["300x250"],
    indexExchange: true,
    indexExchangeSlotIds: ["17"],
    yieldbot: true,
    yieldbotSizes: [
        [300, 250]
    ],
    canBeLazy: true,
    incrementable: true
}, {
    slotContainer: 'div-gpt-ancillary-flex',
    slotType: 'square',
    slotSizes: ["300x250", "303x253", "300x450"],
    pubmatic: true,
    pubmaticSizes: ["300x250"],
    pubmaticPrefix: 'ancillary',
    yieldbot: true,
    yieldbotSizes: [
        [300, 250],
        [300, 450]
    ],
    specialAdUnit: ".ancillary",
    canBeLazy: true
}, {
    slotContainer: 'div-gpt-halfPage-fixed',
    slotType: 'halfPage',
    slotSizes: ["300x600"],
    pubmatic: false,
    yieldbot: false,
    canBeLazy: true,
    incrementable: true
}, {
    slotContainer: 'div-gpt-halfPage-flex',
    slotType: 'halfPage',
    slotSizes: ["300x250", "300x600"],
    a9: true,
    a9Sizes: [[300,250]],
    pubmatic: true,
    pubmaticSizes: ["300x250"],
    yieldbot: true,
    yieldbotSizes: [
        [300, 250]
    ],
    canBeLazy: true,
    incrementable: true
}, {
    slotContainer: 'div-gpt-remnant-square-fixed',
    slotType: 'remnant-square',
    slotSizes: ["301x251"],
    yieldbot: false,
    canBeLazy: true,
    incrementable: false
}, {
    slotContainer: 'div-gpt-remnant-secondary-square-fixed',
    slotType: 'remnant-secondary-square',
    slotSizes: ["302x252"],
    yieldbot: false,
    canBeLazy: true,
    incrementable: false
}, {
    slotContainer: 'div-gpt-house-square-fixed',
    slotType: 'house-square',
    slotSizes: ["300x250"],
    yieldbot: false,
    canBeLazy: true,
    incrementable: true,
    specialAdUnit: ".house"
}, {
    slotContainer: 'div-gpt-interstitial',
    slotType: 'interstitial',
    yieldbot: false,
    outOfPage: true,
    incrementable: false
}, {
    slotContainer: 'div-gpt-wallpaper',
    slotType: 'wallpaper',
    yieldbot: false,
    outOfPage: true,
    incrementable: false
},{
    slotContainer: 'div-gpt-skyscraper',
    slotType: 'skyscraper',
    slotSizes: ["160x600"],
    pubmaticSizes: ["160x600"],
    apnx: true,
    apnxUnits: {"9882286":[[160,600]]},
    yieldbot: false,
    canBeLazy: true,
    incrementable: true,
    indexExchange: true,
    indexExchangeSlotIds: ["11"]
},
/* special use slots */
{
    slotContainer: 'div-gpt-related',
    slotType: 'related',
    slotSizes: ["700x175", "320x175"],
    yieldbot: false,
    canBeLazy: true,
    incrementable: true
}, {
    slotContainer: 'div-gpt-videoCompanion',
    slotType: 'videoCompanion',
    slotSizes: ["300x250"],
    yieldbot: false,
    incrementable: false
}, {
    slotContainer: 'div-gpt-sponsorLogo',
    slotType: 'sponsorLogo',
    slotSizes: ["122x34", "120x75"],
    yieldbot: false,
    incrementable: true,
    canBeLazy: true
},
/*Begin Mobile Slots*/
{
    slotContainer: 'div-gpt-mob-square-fixed',
    slotType: 'mob-square',
    slotSizes: ["300x250"],
    a9: true,
    a9Sizes: [[300,250]],
    yieldbot: true,
    yieldbotSizes: [
        [300, 250]
    ],
    canBeLazy: true,
    incrementable: true,
    indexExchange: true,
    indexExchangeSlotIds: ["34"],
    rubicon: true,
    apnx: true,
    apnxUnits: {"9882321":[[300,250]]},
    isMobile: true,
    pubmatic: true,
    pubmaticSizes: ["300x250"]
}, {
    slotContainer: 'div-gpt-mob-square-flex',
    slotType: 'mob-square',
    slotSizes: ["300x250", "320x100", "320x200"],
    a9: true,
    a9Sizes: [[300,250]],
    yieldbot: true,
    isMobile: true,
    yieldbotSizes: [
        [300, 250]
    ],
    indexExchange: true,
    indexExchangeSlotIds: ["34"],
    rubicon: true,
    apnx: true,
    apnxUnits: {"9882321":[[300,250]]},
    pubmatic: true,
    pubmaticSizes: ["300x250"],
    canBeLazy: true,
    incrementable: true,
}, {
    slotContainer: 'div-gpt-mob-native-square-fixed',
    slotType: 'mob-native-square',
    slotSizes: ["300x250"],
    yieldbot: true,
    yieldbotSizes: [
        [300, 250]
    ],
    isMobile: true,
    canBeLazy: true,
    incrementable: true
}, {
    slotContainer: 'div-gpt-mob-banner-fixed',
    slotType: 'mob-banner',
    slotSizes: ["320x50"],
    a9: true,
    a9Sizes: [[300,250]],
    apnx: true,
    apnxUnits: {"9882301":[[300,250]]},
    indexExchange: true,
    indexExchangeSlotIds: ["39"],
    pubmatic: true,
    pubmaticSizes: ["320x50"],
    yieldbot: false,
    canBeLazy: true,
    isMobile: true,
    incrementable: true
}, {
    slotContainer: 'div-gpt-mob-banner-flex',
    slotType: 'mob-banner',
    slotSizes: ["320x50"],
    a9: true,
    a9Sizes: [[320,50]],
    apnx: true,
    apnxUnits: {"9882322":[[320,50]]},
    indexExchange: true,
    indexExchangeSlotIds: ["39"],
    pubmatic: true,
    pubmaticSizes: ["320x50"],
    yieldbot: true,
    yieldbotSizes: [
        [320, 50]
    ],
    isMobile: true,
    canBeLazy: true,
    incrementable: true
}, {
    slotContainer: 'div-gpt-mob-remnant-banner-fixed',
    slotType: 'mob-remnant-banner',
    slotSizes: ["321x51"],
    yieldbot: false,
    canBeLazy: true,
    isMobile: true,
    incrementable: false
}, {
    slotContainer: 'div-gpt-mob-adhesive-banner-fixed',
    slotType: 'mob-adhesive-banner',
    slotSizes: ["320x50"],
    a9: true,
    a9Sizes: [[320,50]],
    apnx: true,
    apnxUnits: {"9882322":[[320,50]]},
    yieldbot: true,
    indexExchange: true,
    indexExchangeSlotIds: ["39"],
    rubicon: true,
    pubmatic: true,
    pubmaticSizes: ["320x50"],
    yieldbotSizes: [
        [320, 50]
    ],
    isMobile: true,
    incrementable: true
}, {
    slotContainer: 'div-gpt-mob-house-square-fixed',
    slotType: 'house-square',
    slotSizes: ["300x250"],
    yieldbot: false,
    canBeLazy: true,
    incrementable: true,
    specialAdUnit: ".house"
}, {
    slotContainer: 'div-gpt-mob-related',
    slotType: 'related',
    isMobile: true,
    slotSizes: ["320x175"],
    yieldbot: false,
    canBeLazy: true,
    incrementable: true
}, {
    slotContainer: 'div-gpt-mob-sponsorLogo',
    slotType: 'sponsorLogo',
    isMobile: true,
    slotSizes: ["122x34", "120x75"],
    yieldbot: false,
    incrementable: true,
    canBeLazy: true
}, {
    slotContainer: 'div-gpt-mob-siteSkin',
    slotType: 'siteSkin',
    isMobile: true,
    slotSizes: ["320x170"],
    incrementable: false,
    canBeLazy: false
},
        ];

    /* Variable slotContainer_aliases defined above is populated in this include */
    slotContainer_aliases = { 
    'div-gpt-pushdownBanner': 'div-gpt-pushdown-flex',
    'div-gpt-topBanner': 'div-gpt-leaderboard-flex',
    'div-gpt-narrowTopBanner': 'div-gpt-leaderboard-fixed',
    'div-gpt-bottomBanner': 'div-gpt-leaderboard-fixed',
    'div-gpt-rightBanner': 'div-gpt-square-flex',
    'div-gpt-shortRightBanner': 'div-gpt-square-fixed',
    'div-gpt-shopRightBanner': 'div-gpt-shop-square-fixed',
    'div-gpt-rightBannerLower': 'div-gpt-square-fixed',
    'div-gpt-rightBannerLower301': 'div-gpt-remnant-square-fixed',
    'div-gpt-rightBannerLower302': 'div-gpt-remnant-secondary-square-fixed',
    'div-gpt-tertiarySquare': 'div-gpt-square-fixed',
    'div-gpt-quaternarySquare': 'div-gpt-square-fixed',
    'div-gpt-ancillary': 'div-gpt-ancillary-flex',
    'div-gpt-mob-nativeInStream': 'div-gpt-mob-native-square-fixed',
    'div-gpt-mob-inStreamBanner': 'div-gpt-mob-square-fixed',
    'div-gpt-mob-topBanner': 'div-gpt-mob-banner-fixed',
    'div-gpt-mob-bottomBanner': 'div-gpt-mob-remnant-banner-fixed',
    'div-gpt-mob-hoverBanner': 'div-gpt-mob-adhesive-banner-fixed'
};

    function buildPageSlotConfigs(adSlots, siteSettings, site, siteSpecificSlots) {

        function getSlotConfigByContainerName(slotName, tier){ //Fetch the correct config object and assign it to the slot that exists on the page
            var legacySlotName, 
                slotContainer,
                slotDef,
                i,
                match,
                l; 

            /* legacy slot name support */
            if (slotContainer_aliases.hasOwnProperty(slotName)){
                legacySlotName = slotName;
                slotContainer = slotContainer_aliases[slotName];
            }else{
                slotContainer = slotName;
            }

            /* loop through slots */
            l = slot_definitions.length;
            for (i=0; i<l; i++) {
                slotDef = karma.utilities.extend({}, slot_definitions[i]);

                /* if the container name matches exactly */
                if (slotContainer === slotDef.slotContainer){
                    /* if we're calling for a legacy slot name, use setTierSettings as the slot container */
                    if(legacySlotName !== undefined){
                        slotDef.slotContainer = legacySlotName;
                    }
                    return slotDef;
                }                
                /* if it's an incrementable slot, match on partial slot name */
                if (slotDef.incrementable && slotContainer.indexOf(slotDef.slotContainer + "-") !== -1){
                    slotDef.slotContainer = slotContainer;
                    match = slotDef.slotContainer.match(/-\d+$/);
                    if(match !== null && match[0] !== '-1' && !tier){
                        if(slotDef.yieldbot){
                            slotDef.yieldbot = false;
                            delete slotDef.yieldbotSizes;
                        }                
                        if(slotDef.pubmatic){
                            slotDef.pubmatic = false;
                            delete slotDef.pubmaticSizes;
                        }                             
                    }
                    return slotDef;                
                }
            }
            return false; 
        }

        function buildLazyLoadDefinitions(site) {
            var definitions = [],
                i, 
                l, 
                slotDef;

            /* set up instant/lazy loaded slots */
            l = slot_definitions.length;
            for (i=0; i < l; i++){
                slotDef = slot_definitions[i];
                            
                if(!slotDef.hasOwnProperty('site') || slotDef.site === site || slotDef.site.indexOf(site) !== -1){                    
                    if(slot_definitions[i].canBeLazy){
                        slotDef = karma.utilities.extend({}, slot_definitions[i]);                    
                        slotDef.slotContainer = slot_definitions[i].slotContainer.replace('div-gpt', 'div-gpt-lazy');                        
                        definitions.push(slotDef);
                    }
                }            
            }
            return definitions;
        }

        function addLazyLoadTierSupport(siteSettings, site) {
            var tieredSlotDef;
            if (siteSettings.hasOwnProperty('tiers')){
                Object.keys(siteSettings.tiers).forEach(function(slot){
                    Object.keys(siteSettings.tiers[slot]).forEach(function(tier){
                        tier = tier.replace(/[^\d+]/g, '');
                        tieredSlotDef = getSlotConfigByContainerName(slot, tier);
                        if (tieredSlotDef) {
                            karma.tiers.setTierSettings(tier, tieredSlotDef, site);
                            tieredSlotDef.slotContainer = tieredSlotDef.slotContainer.replace(/^div-gpt-/, 'div-gpt-lazy-') + '-tier' + tier;
                            lazyLoad_definitions.push(tieredSlotDef);
                        } else {
                            karma.log('Could not find a match for slot "'+slot+'", tier ' + tier + ' via siteSettings.tiers',{report:true,color:"red",forceMessage:true});
                        }
                    });
                });
            }
        }

        function matchPassedInSlotsWithPredefinedSlots(adSlots, site) {
            var j,
                psl,
                l,
                slotDef,
                tier;
            
            if (typeof adSlots === 'object'){
                l = adSlots.length;
                for (j=0; j<l; j++) {
                    tier = adSlots[j].match(/:tier(\d+)/);
                    tier = (tier !== null && tier.length > 1) ? tier[1] : null;
                    slotDef = getSlotConfigByContainerName(adSlots[j].replace(/:tier\d+/, ''), tier);

                    if(slotDef !== false){ 

                        if(tier !== null){
                            karma.tiers.setTierSettings(tier, slotDef, site);
                        }
                        /* construct pubmatic keys */
                        if(slotDef.pubmatic && slotDef.hasOwnProperty('pubmaticSizes') && slotDef.pubmaticSizes.length > 0) {
                            slotDef.pubmaticKeys = [];
                            psl = slotDef.pubmaticSizes.length;
                            while (psl--) {
                                /* if slotdef has pubmatic prefix, use that, otherwise use tier if it has one */
                                slotDef.pubmaticKeys.push(
                                    site 
                                    + ((tier !== null) ? '.tier' 
                                    + tier : (slotDef.hasOwnProperty('pubmaticPrefix') ? '.' 
                                    + slotDef.pubmaticPrefix : '')) 
                                    + '@' 
                                    + slotDef.pubmaticSizes[psl]
                                );
                            }                     
                        }

                        /* add slot to list of final slots */
                        if(!slotContainers.hasOwnProperty(slotDef.slotContainer)){ /* Make sure it's not a duplicate */
                            finalSlots.push(slotDef);
                            slotContainers[slotDef.slotContainer] = true;
                        }
                    }            
                }
            }
        }

        slot_definitions = slot_definitions.concat(siteSpecificSlots);
        lazyLoad_definitions = buildLazyLoadDefinitions(site);    
        addLazyLoadTierSupport(siteSettings, site);
        matchPassedInSlotsWithPredefinedSlots(adSlots, site);

        /* Set adSlots */
        slotConfigs.adSlots = finalSlots;
        slotConfigs.lazyLoadSlots = lazyLoad_definitions; 

        /* return json object with callback if specified */
        return slotConfigs;
    }

    return {
        buildPageSlotConfigs: buildPageSlotConfigs
    };

}());

/* modules/footer/built_components/utilities.js */
karma.utilities = (function(){
    "use strict";

    var hostParts = window.location.hostname.split('.');

    // TEST: if we're in Internet Explorer, window.CustomEvent is still a thing
    (function () {

      if ( typeof window.CustomEvent === "function" ){
        return false;
      }

      function CustomEvent ( event, params ) {
        params = params || { bubbles: false, cancelable: false, detail: undefined };
        var evt = document.createEvent( 'CustomEvent' );
        evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );
        return evt;
       }

      CustomEvent.prototype = window.Event.prototype;

      window.CustomEvent = CustomEvent;
    }());

    function setPageCount() {
        if (!karma.utilities.isLocalStorageAvailable()) {
            adService.mdpPageCount = 0;
            karma.log('localStorage not available ... setting adService.mdpPageCount to 0.');
        } else {
            var currentTime = Date.now(),
                pageCountTTL = currentTime + 900000, /*Set to 15 min in the future*/
                retrievedTTL = localStorage.mdpAdPageCountTTL || false,
                expired = false;

            // TEST: the browser's localStorage has an item called mdpAdPageCountTTL that's set to the timestamp of 15 minutes in the future or less
            localStorage.setItem('mdpAdPageCountTTL', pageCountTTL);

            if (!retrievedTTL || currentTime > retrievedTTL) {
                expired = true;
            }

            adService.mdpPageCount = expired ? 0 : parseInt(localStorage.mdpAdPageCount, 10);
            adService.mdpPageCount++;
            // TEST: the browser's localStorage has an item called mdpAdPageCount that matches the pv targeting value
            localStorage.setItem('mdpAdPageCount', adService.mdpPageCount);
        }
        return adService.mdpPageCount;
    }
    
    function coerceBoolean(str){
        // TEST: if we pass 'true' or 'false' as a string to karma.utilities.coerceBoolean, the returned result is a boolean        
        if((typeof str === 'string' && (str === 'true' || str === 'false' || str === '')) || str === undefined || str === null){
            return (str === 'true') || false;
        }
        return str;
    }

    function convertStringToNumber(str){
        // TEST: if we pass a string to karma.utilities.convertStringToNumber, the returned result is either a number or NaN    
        return parseInt(str, 10);
    }

    function extend(obj1, obj2) {
      // TEST: if we pass two objects to karma.utilities.extend, the properties of the second will be copied on top of the first
      Object.keys(obj2).forEach(function(p){
        try {
          // Property in destination object set; update its value.
          if ( obj2[p].constructor===Object ) {
            obj1[p] = extend(obj1[p], obj2[p]);

          } else {
            obj1[p] = obj2[p];

          }

        } catch(e) {
          // Property in destination object not set; create it and set its value.
          obj1[p] = obj2[p];

        }
      });

      return obj1;
    }

    function clone(obj) {
        var copy;
        if (!isObject(obj)) {
            copy = obj;
        } else {
            copy = Object.create(obj.constructor.prototype);
            Object.keys(obj).forEach(function(key){
                copy[key] = clone(obj[key]);
            });
        }
        return copy;
    }

    function isObject(x) {
        // TEST: if we pass an array to karma.utilities.isObject, it will return false
        // TEST: if we pass a non-array object to karma.utilities.isObject, it will return true
        return (x !== null && typeof x === 'object' && !Array.isArray(x));
    }

    function fetchResource(url, resolve, reject) {
        function getIEVersion() {
           var ieMatch = navigator.appVersion.match(/MSIE ([0-9]{1,}[\.0-9]{0,})/);
           return (ieMatch !== null && ieMatch.length >= 2) ? ieMatch[1] : false;
        }

        resolve = resolve || function(){};
        reject = reject || function(){};

        // TEST: if we pass a URL to karma.utilities.fetchResource, the URL will be appended to the document head
        var ieVersion = getIEVersion(),
            thescript = document.createElement('script');
        thescript.src = url;
        if (ieVersion !== '9.0' && ieVersion !== '10.0') { /* Do not support static config fallback in IE 9 or 10, since it breaks things. */
            thescript.onload = thescript.onreadystatechange = function() {
                var rs = this.readyState;
                if (rs && rs !== 'complete' && rs !== 'loaded'){
                    reject();
                }
                try { resolve(); } catch (e) { reject(); }
            };
            thescript.onerror = function(){
                reject();
            }; 
        }
        document.getElementsByTagName('head')[0].appendChild(thescript);      
    }

    function generateProtocol() {
        return 'https://';
    }

    function isHomepage() {
        // TEST: on pages with no pathname and no special subdomain, karma.utilities.isHomepage returns true
        // TEST: on pages with a pathname, karma.utilities.isHomepage returns false
        // TEST: on pages with a special subdomain, karma.utilities.isHomepage returns false
        return (window.location.pathname === '/' && (hostParts.length < 3 || hostParts[0].match(/^(new)?www|dev|test|local$/) !== null));
    }

    function getSiteName(){
        // TODO: once all sites have KARMA header, then we can remove these redundant functions    
        if(!!(window.karmaHeader && karmaHeader.hasOwnProperty('header') && karmaHeader.header.hasOwnProperty('utilities') && karmaHeader.header.utilities.hasOwnProperty('getSiteName'))){
            return karmaHeader.header.utilities.getSiteName();
        }

        var nameMatch = window.location.hostname.match(/([^.]*)(?=\.[^.]*$)/), 
            adTestSite = window.location.search.match(/adTestSite=([a-z]+)/),
            siteName = adTestSite ? getSiteAlias(adTestSite[1]) : nameMatch ? nameMatch[0] : 'bhg';
        if(siteName === 'mytestwedding'){ siteName = 'mywedding'; }
        if(siteName === 'familycirclepromo'){ siteName = 'familycircle'; }
        return siteName;    
    }

    function getSiteAlias(site, returnMode){
        // TODO: once all sites have KARMA header, then we can remove these redundant functions
        if(!!(window.karmaHeader && karmaHeader.hasOwnProperty('header') && karmaHeader.header.hasOwnProperty('utilities') && karmaHeader.header.utilities.hasOwnProperty('getSiteAlias'))){
            return karmaHeader.header.utilities.getSiteAlias(site, returnMode);
        }

        returnMode = returnMode || 'domain';
        var aliasMap = {
          'apq': 'allpeoplequilt',
          'ag': 'agriculture',
          'ar': 'allrecipes',
          'diy': 'diyadvice',
          'dlv': 'diabeticlivingonline',
          'ew': 'eatingwell',
          'fc': 'familycircle',
          'fitness': 'fitnessmagazine',
          'fitpreg': 'fitpregnancy',
          'lcl': 'livingthecountrylife',
          'mwl': 'midwestliving',
          'mslo': 'marthastewart',
          'msw': 'marthastewartweddings',
          'recipecom': 'recipe',
          'rrmag': 'rachaelraymag',
          'sm': 'siempremujer',
          'sp': 'serpadres',
          'tradhome': 'traditionalhome',
          'wood': 'woodmagazine',
        },
        val = site;

        if(returnMode === 'abbr'){
          Object.keys(aliasMap).forEach(function(abbr){
            if(site === aliasMap[abbr]){
              val = abbr;
            }
          });
        }else{
          val = aliasMap[site] || site;
        }

        return val; 
      };

    function referrerIsAmp() {
        // TEST: if the document referrer is from cdn.ampproject.org or amp.*.com, karma.utilities.referrerIsAmp returns true
        var site = getSiteName(),
            referrer = document.referrer,
            match = referrer.match(/^https?:\/\/(?:cdn\.ampproject\.org\/.\/)?(?:test\.|dev\.)?amp\.([a-z]*)\.com/);

        return match !== null && match[1] === site;
    }

    function isLocalStorageAvailable() {
        var testKey = 'mdpTest',
            storage = window.localStorage;
        try {
            storage.setItem(testKey, '1');
            storage.removeItem(testKey);
            return true;
        } catch (error) {
            return false;
        }
    }

    function cleanCharacters(string){
        var cleanString = '';
        /* start recursion */
        if(isObject(string) || Array.isArray(string)){
            cleanString = {};
            Object.keys(string).forEach(function(key){
                // convert the key back to an integer
                key = parseInt(key, 10);
                // TEST: karma.utilities.cleanCharacters can clean all the keys and values in an object
                if(isNaN(key)){
                    if(string.hasOwnProperty(key)){
                        cleanString[cleanCharacters(key)] = cleanCharacters(string[key]);
                    }
                // TEST: karma.utilities.cleanCharacters can clean all the values in an array
                }else{
                    if(key === 0){
                        cleanString = [];
                    }
                    cleanString[key] = cleanCharacters(string[key]);
                }
            });
        } else if (typeof string === 'string') {
            // TEST: if any targeting values are passed in that contain special characters, they're stripped 
            cleanString = string.replace(/['"=!#\+\*~;\^\(\)<>\[\],&\s]/gi, '');
            // TEST: if any targeting values are passed in that contain multiple dashes in a row, they're converted to only one dash
            cleanString = cleanString.replace(/-+/gi, '-');
        } else if (typeof string === 'number' || typeof string === 'boolean') {
            // TEST: karma.utilities.cleanCharacters converts booleans to strings
            // TEST: karma.utilities.cleanCharacters converts numbers to strings
            cleanString = string + '';
        } else if (string === null || string === undefined){
            cleanString = '';
        }
        return cleanString;
    }

    function hasMethod(method, module){
        // TEST: if an invalid method is passed in for a given KARMA module, karma.utilities.hasMethod returns false
        // TEST: if a valid method is passed in for a given KARMA module, karma.utilities.hasMethod returns true
        if(isObject(module)){
            module = module || karma;
            return module.hasOwnProperty(method) && typeof module[method] === 'function';
        }
        // TEST: if a non-object is passed as the module argument, karma.utilities.hasMethod returns false
        karma.log('An invalid module was passed into karma.utilities.hasMethod');
        return false;        
    }

    /* debounce - for throttling functions so they only run once per wait period, even if the are triggered more frequently (e.g. onscroll listeners) */
    function debounce(func, wait, immediate) {
        var timeout;
        return function() {
            var context = this, 
                args = arguments,
                later = function() {
                    timeout = null;
                    if (!immediate) {
                        func.apply(context, args);
                    }
                },
                callNow = immediate && !timeout;
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
            if (callNow) {
                func.apply(context, args);
            }
        };
    }

    function isAdX(slot) {
        return slot.isEmpty === false && slot.creativeId === null;
    }

    function getKarmaScript(file) {
        file = file || 'footer';
        var scripts,
        scriptsLength,
        currentScript,
        matchPattern;

        // TEST: The KARMA footer file is the first js file from the above CDNs that matches karma.footer.js, karma.core.js, or karma.service.js  
        // TEST: On secure pages, the karma footer file is loaded off https://karma.mdpcdn.com/service/
        // TEST: On non-secure pages, the karma footer file is loaded off http://karma.mdpcdn.com/service/    
        scripts = document.querySelectorAll('script[src*="karma.mdpcdn.com"]');
        if(file === 'header'){
            matchPattern = /^http(?:s)?:\/\/([^\.]*)\.?karma\.mdpcdn\.com[:9]*\/service\/(js|js-min)\/(karma\.(header|interstitial)\.js)/; 
        }else{
            matchPattern = /^http(?:s)?:\/\/([^\.]*)\.?karma\.mdpcdn\.com[:9]*\/service\/(js|js-min)\/(karma\.(footer|core|service)\.js)/;             
        }


        scriptsLength = scripts.length;

        // TEST: there should be at least one match for a KARMA footer file on the page    
        while (scriptsLength--) {
            currentScript = scripts[scriptsLength].src;
            if (!!currentScript.match(matchPattern)) {
                // TEST: adService has a property called karmaPath that matches the current location of the active KARMA file      
                adService.karmaPath = scripts[scriptsLength].src;
                return currentScript.match(matchPattern);
            }
        }

        return null;    
    }

    function getGptObjectsFromSlotConfigs(slotConfigs) {
        var gptObjects = [];
        slotConfigs.forEach(function(config) {
            if (config.hasOwnProperty('gptSlot')) {
                gptObjects.push(config.gptSlot);
            }
        });
        return gptObjects;
    }

    function initKismet() {
        // TEST Kismet pixel is requested if doubleclick pixel request fails to complete
        function reportKismet() { 
  var hasKismet = (adService.kismetReported || document.querySelector('img[src$="kismet/spacer.png"]') !== null);
  if (!hasKismet) {
    adService.kismetReported = true;
    var pixel = document.createElement('img');
    pixel.src = '/kismet/spacer.png';
    document.body.appendChild(pixel);      
  }
}

        var imp = document.createElement('img'),
            rand = Math.floor(Math.random()*1e10),
            adDomain = adService.unitValues.adDomain;

        if (adDomain !== 'fitpreg.mdp.com' && adDomain !== 'fitpreg.mdp.mob') {
            //For the test period, only run kismet on fitpreg.
            return;
        }

        imp.async = true;
        imp.src = 'https://pubads.g.doubleclick.net/gampad/ad?iu=3865/site.mdp.com&sz=1x1&c=' + rand;
        imp.onload = imp.onreadystatechange = function() {
          var rs = this.readyState;
          if (rs && rs != 'complete' && rs != 'loaded'){ reportKismet(); }
          try {} catch (e) { reportKismet(); }
        };
        imp.onerror = reportKismet; 
        document.body.appendChild(imp);
    }

    return {
        cleanCharacters: cleanCharacters,
        isHomepage: isHomepage,
        isLocalStorageAvailable: isLocalStorageAvailable,
        getSiteName: getSiteName,
        getSiteAlias: getSiteAlias,
        referrerIsAmp: referrerIsAmp,
        fetchResource: fetchResource,
        setPageCount: setPageCount,
        hasMethod: hasMethod,
        generateProtocol: generateProtocol,
        extend: extend,
        coerceBoolean: coerceBoolean,
        clone: clone,
        debounce: debounce,
        isAdX: isAdX,
        convertStringToNumber: convertStringToNumber,
        getKarmaScript: getKarmaScript,
        getGptObjectsFromSlotConfigs: getGptObjectsFromSlotConfigs,
        initKismet: initKismet
    };
}());  

  

/* modules/footer/vendor_components/header_tag_manager.js */
karma.partner = karma.partner || {};
karma.partner.header_tag_manager = (function htm_closure(){
    // begin HTM closure

    // this value is updated at the bottomof the HTM closure
    var refreshCount = 0;
    function get_karma_partner_timeout() {
        var timeout;
        if (refreshCount <= 1) {
            timeout = window.adService.partnerTimeout;
        }
        else {
            timeout = window.adService.partnerRefreshTimeout;
        }

        if (typeof timeout === 'string') {
            timeout = parseInt(timeout, 10);
        }

        if (typeof timeout === 'number' && !isNaN(timeout)) {
            return timeout;
        }

        throw new Error('Could not determine the value of timeout safty net');
    }


(function () {

    function LightSpeed() {
        this.start_time = Date.now();
        this.hooks = {};
        this.session_hooks = {};
        this.request_counter = 0;
        this.post_hooks_count = {};
        this.post_hooks_completed_count = {};
        this.correlator = {};
        this.slot_targeting_hooks = [];
        this.dynacounter = {};
        this.DEFAULT_NAMESPACE = 'initial-load';
        this.registered_bidders = [];
        this.bidder_complete = {};
        this.isRefreshing = false;

        // fields for envoke_on_or_after_session_end_hooks
        this.is_after_session_end = false;
        this.envoke_on_or_after_session_end_hooks = [];
    }

    function validate_hook(hook) {
        if (typeof hook === 'function') return true;
        else {
            header_tag_manager.log('LightSpeed hook is not a function: ' + hook);
            return false;
        }
    }



    LightSpeed.prototype.log = function (msg) {
        console.log(msg);
    }
    LightSpeed.prototype.warn = function (msg) {
        console.warn(msg);
    }
    LightSpeed.prototype.crit = function (msg) {
        console.error(msg);
    }

    LightSpeed.prototype.register_bidder = function (name) {
        this.registered_bidders.push(name);
    }

    LightSpeed.prototype.add_pre_refresh_hook = function (name, hook, oneshot, namespace) {
        if (typeof namespace === 'undefined') namespace = this.DEFAULT_NAMESPACE;
        if (!validate_hook(hook)) return;
        this.hooks[namespace] = this.hooks[namespace] || {};
        var hooks = this.hooks[namespace];

        hooks[name] = hooks[name] || {};
        hooks[name].pre_refresh = hooks[name].pre_refresh || [];
        hook.oneshot = oneshot ? true : false;
        hooks[name].pre_refresh.push(hook);
        this.log("Added pre-refresh hook for: '" + name);
    }

    LightSpeed.prototype.add_post_refresh_hook = function (name, hook, oneshot, namespace) {
        if (typeof namespace === 'undefined') namespace = this.DEFAULT_NAMESPACE;
        if (!validate_hook(hook)) return;
        this.hooks[namespace] = this.hooks[namespace] || {};
        var hooks = this.hooks[namespace];
        this.post_hooks_count[namespace] = this.post_hooks_count[namespace] || 0;

        hooks[name] = hooks[name] || {};
        hooks[name].post_refresh = hooks[name].post_refresh || [];
        hook.oneshot = oneshot ? true : false;
        hooks[name].post_refresh.push(hook);
        this.post_hooks_count[namespace]++;
        this.log("Added post-refresh hook for: '" + name);
    }

    LightSpeed.prototype.add_session_start_hook = function (hook, oneshot, namespace) {
        if (typeof namespace === 'undefined') namespace = this.DEFAULT_NAMESPACE;
        if (!validate_hook(hook)) return;
        hook.oneshot = oneshot ? true : false;
        this.session_hooks[namespace] = this.session_hooks[namespace] || {
                    start: [],
                    finish: []
                };
        this.session_hooks[namespace].start.push(hook);
    }

    LightSpeed.prototype.add_session_end_hook = function (hook, oneshot, namespace) {
        if (typeof namespace === 'undefined') namespace = this.DEFAULT_NAMESPACE;
        if (!validate_hook(hook)) return;
        hook.oneshot = oneshot ? true : false;
        this.session_hooks[namespace] = this.session_hooks[namespace] || {
                    start: [],
                    finish: []
                };
        this.session_hooks[namespace].finish.push(hook);
    }

    LightSpeed.prototype.dynacounter_set = function (name, maxads, namespace) {
        if (typeof namespace === 'undefined') namespace = this.DEFAULT_NAMESPACE;
        this.dynacounter[namespace] = this.dynacounter[namespace] || {};
        var dynacounter = this.dynacounter[namespace];

        dynacounter[name] = this.dynacounter[name] || {};
        dynacounter[name].enabled = true;
        dynacounter[name].maxads = maxads;
        dynacounter[name].numads = 0;
        this.log("Setup Dynamic ads Counter for technology: '" + name + "'. Maximum ads before canonical refresh end: " + maxads + ".");
    }

    LightSpeed.prototype.dynacounter_enable = function (name, namespace) {
        if (typeof namespace === 'undefined') namespace = this.DEFAULT_NAMESPACE;
        this.dynacounter_set(name, 0, namespace);
    }

    LightSpeed.prototype.dynacounter_stall = function (name, addads, namespace) {
        if (typeof namespace === 'undefined') namespace = this.DEFAULT_NAMESPACE;
        this.dynacounter[namespace] = this.dynacounter[namespace] || {};
        var dynacounter = this.dynacounter[namespace];

        dynacounter[name] = dynacounter[name] || {};
        dynacounter[name].enabled = true;
        dynacounter[name].maxads += addads;
        this.log("Stalling Dynamic ads Counter for technology: '" + name + "'. Stalled for " + addads + " additional ads.");
    }

    LightSpeed.prototype.dynacounter_tick = function (name, namespace) {

        if (typeof namespace === 'undefined') namespace = this.DEFAULT_NAMESPACE;
        var dynacounter = this.dynacounter[namespace] || {};

        dynacounter[name].numads++;
        this.log("Dynamic ads Counter TICK for '" + name + "'. 1 Ads refreshed.");
        if (dynacounter[name].numads !== dynacounter[name].maxads) return;
        dynacounter[name].enabled = false;
        dynacounter[name].maxads = 0;
        dynacounter[name].numads = 0;
        this.log("Dynamic ads Counter TOCK for '" + name + "': ALL ADS READY.");
        this.end_refresh(name, namespace);
    }

    LightSpeed.prototype.end_refresh = function (name, namespace) {
        if (typeof namespace === 'undefined') namespace = this.DEFAULT_NAMESPACE;
        var session_hooks = this.session_hooks[namespace];
        var all_hooks = this.hooks[namespace];

        // Tell LS bidder is done
        this.bidder_complete[namespace][name] = true;

        // Post refresh tasks
        if (all_hooks.hasOwnProperty(name)) {
            var hooks = all_hooks[name].post_refresh;
            //ls.analytics.timeout(name, timeout);
            if (typeof hooks !== 'undefined') {
                for (var i = 0; i < hooks.length; i++) {
                    this.log("Executing post-refresh hook for: " + name);
                    hooks[i](this.correlator[namespace][i]);
                    if (hooks[i].oneshot) {
                        hooks.splice(i, 1);
                    }
                }
            }
        }

        // Run session end hooks if all refreshes done (all post-refresh tasks have been completed).
        var all_done = true;
        for (var i = 0; i < this.registered_bidders.length; i++) {
            var name = this.registered_bidders[i];
            all_done &= this.bidder_complete[namespace][name];
        }
        if (all_done) {
            this.bidder_complete[namespace] = {}; // reset bidder statuses
            this.log("Session has completed. Running session end hooks.");


            for (var i = 0; i < session_hooks.finish.length; i++) {
                var hook = session_hooks.finish[i];

                hook();
                if (session_hooks.finish[i].oneshot) {
                    session_hooks.finish.splice(i, 1);
                }
            }
            this.is_after_session_end = true;
            this.run_envoke_on_or_after_session_end_hooks();
            this.isRefreshing = false;
        }

    }

    LightSpeed.prototype.run_envoke_on_or_after_session_end_hooks = function () {
        while (this.envoke_on_or_after_session_end_hooks.length > 0) {
            var hook = this.envoke_on_or_after_session_end_hooks.shift();
            hook();
        }
    };

    LightSpeed.prototype.envoke_on_or_after_session_end = function (hook) {
        if (typeof hook === 'function') {
            this.envoke_on_or_after_session_end_hooks.push(hook);
            if (this.is_after_session_end) {
                this.run_envoke_on_or_after_session_end_hooks();
            }
        }
    };

    LightSpeed.prototype.refresh = function (namespace) {
        if (this.isRefreshing) {
            return;
        }
        this.isRefreshing = true;

        if (typeof namespace === 'undefined') namespace = this.DEFAULT_NAMESPACE;
        this.is_after_session_end = false;
        this.bidder_complete[namespace] = {};
        this.log("Refresh begin");

        this.post_hooks_completed_count[namespace] = 0;
        this.session_hooks[namespace] = this.session_hooks[namespace] || {
            start: [],
            finish: []
        };
        // Run session start hooks
        var session_hooks = this.session_hooks[namespace];
        for (var i = 0; i < session_hooks.start.length; i++) {
            var hook = session_hooks.start[i];

            hook();

            if (session_hooks.start[i].oneshot) {
                session_hooks.start.splice(i, 1);
            }
        }

        // Refresh tech
        var all_hooks = this.hooks[namespace];
        for (var name in all_hooks) {
            if (!all_hooks.hasOwnProperty(name)) continue;
            var hooks = all_hooks[name].pre_refresh;
            if (typeof hooks !== 'undefined') {
                for (var i = 0; i < hooks.length; i++) {
                    this.log("Executing pre-refresh hook for: " + name);
                    this.correlator[namespace] = this.correlator[namespace] || {};
                    this.correlator[namespace][i] = hooks[i]();
                    if (hooks[i].oneshot) {
                        hooks.splice(i, 1);
                    }
                }
            }
        }
    }

    LightSpeed.prototype.add_slot_targeting_hook = function (hook) {
        this.slot_targeting_hooks.push(hook);
    };

    LightSpeed.prototype.set_slot_targeting = function (slots) {
        for (var j = 0; j < this.slot_targeting_hooks.length; j++) {
            this.slot_targeting_hooks[j](slots);
        }
    }

    LightSpeed.prototype.generate_request_id = function () {
        var id = String((new Date().getTime() % 2592000) * 256 + this.request_counter + 256);
        this.request_counter++;
        return id;
    }

    LightSpeed.prototype.is_mobile = function () {
        var a = navigator.userAgent || navigator.vendor || window.opera;
        //if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) return true;
        if (window.adService.mobileAds) return true;
        return false;
    }

    window.ix_ls_names = [];
    window.header_tag_manager = new LightSpeed();
})();

(function() {

    function Analytics () {
        this.timers = {};
        this.requestIDs = [];
        this.sessions = {};
        this.targets = {};
    }

    Analytics.prototype.latest_request_id = function() {
        return this.requestIDs.length > 0 ? this.requestIDs[this.requestIDs.length - 1] : undefined;
    }

    Analytics.prototype.start_session = function(id) {
        if (typeof id === 'undefined') {
            // If we have header_tag_manager, just generate an ID, otherwise complain
            if (typeof window.header_tag_manager !== 'undefined' && typeof window.header_tag_manager.generate_request_id !== 'undefined') {
                id = header_tag_manager.generate_request_id();
            } else {
                console.log("Lightspeed not detected. You must provide generate the request ID manually.");
            }
        }
        console.log("New request started: " + id);
        this.requestIDs.push(id);
        this.sessions[id] = { started: Date.now(), ended: -1 };
        this.timers[id] = {};
    }

    Analytics.prototype.end_session = function (id) {
        if (typeof id === 'undefined') {
            // End the last session if there was one
            id = this.latest_request_id;
            if (typeof id === 'undefined') {
                console.log("Warning: tried to end a header_tag_manager session without ever having started one.");
            }
        }

        this.sessions[id].ended = Date.now();
    }

    Analytics.prototype.is_valid_request_id = function(id) {
        if (typeof id === 'undefined') return false;
        if (typeof this.timers[id] === 'undefined') return false;
        if (typeof this.sessions[id] === 'undefined') return false;
        return true;
    }

    Analytics.prototype.start_timer = function (name) {
        var reqid = this.latest_request_id();
        if (!this.is_valid_request_id(reqid)) {
            console.log('Timers must be correlated with a request session. Please start a new request session using header_tag_manager.analytics.start_session().');
            return;
        }

        var now = Date.now();
        console.log("TIMER STARTED FOR " + name + " AT " + now);

        this.timers[reqid][name] = {
            started: now
        }
    }

    Analytics.prototype.peek_timer = function (name) {
        var reqid = this.latest_request_id();
        if (!this.is_valid_request_id(reqid)) {
            console.log('Timers must be correlated with a request session. Please start a new request session using header_tag_manager.analytics.set_request_id().');
            return;
        }
        var start = this.timers[reqid][name] ? this.timers[reqid][name].started : undefined;
        if (typeof start === 'undefined') return undefined;
        var end = this.timers[reqid][name] ? this.timers[reqid][name].ended : Date.now();
        return end - start;
    }

    Analytics.prototype.stop_timer = function (name) {
        var reqid = this.latest_request_id();
        if (!this.is_valid_request_id(reqid)) {
            console.log('Timers must be correlated with a request session. Please start a new request session using header_tag_manager.analytics.set_request_id().');
            return;
        }

        var start = this.timers[reqid][name] ? this.timers[reqid][name].started : undefined;
        if (typeof start === 'undefined') return undefined;
        var end = this.timers[reqid][name].ended;

        if (typeof end === 'undefined') {
            end = Date.now();

            console.log("TIMER ENDED FOR " + name + " AT " + end);

            this.timers[reqid][name].ended = end;
            return end - start;
        } else {
            return end - start;
        }
    }

    Analytics.prototype.timeout = function(name) {
        var reqid = this.latest_request_id();
        name = name || '';
        if(typeof this.timed_out ==='undefined') this.timed_out = {};
        if(typeof this.timed_out[reqid] ==='undefined') this.timed_out[reqid] = {};
        if(!this.is_valid_request_id(reqid) || !(typeof this.timed_out[reqid][name] ==='undefined')) return;
        this.timed_out[reqid][name] = 1;
    }

    Analytics.prototype.save_targets = function (name, key, values) {
        var reqid = this.latest_request_id();
        if (!this.is_valid_request_id(reqid)) {
            console.log('Targeting reports must be correlated with a request session. Please start a new request session using header_tag_manager.analytics.set_request_id().');
            return;
        }

        this.targets[reqid] = this.targets[reqid] || {};
        this.targets[reqid][name] = this.targets[reqid][name] || {};
        this.targets[reqid][name][key] = values;
    }

    Analytics.prototype.send_null_creative_alert = function (site_id, href, null_creative_target_ids, request_id) {
        var type = 'RT'; // only type supported by data team
        var reqid = this.latest_request_id();

        var q = '?type=' + type + '&r=' + request_id + '&blank=' + JSON.stringify(null_creative_target_ids) + '&s=' + site_id + '&u=' + encodeURIComponent(href);

        var url = new String();
        if (location.protocol === 'https:')
            url += 'https://as-sec';
        else
            url += 'http://as';

        url += '.casalemedia.com/headerstats' + q;

        var beacon = new Image();
        beacon.src = url;

        console.log("Sent Blank Creative Alert:\nurl: " + url + "\nParameters:\n" + url.split('&').slice(1).join('\n'));

    }

    // Also takes optional arguments for what timers to output
    Analytics.prototype.create_report_query = function (site_id, href, names, request_id) {
        var type = 'RT'; // only type supported by data team
        var reqid = this.latest_request_id();

        var auction_start_ts = this.sessions[reqid].started;
        var auction_end_ts   = this.sessions[reqid].ended || -1; // undefs are bad

        if (!this.is_valid_request_id(reqid)) {
            console.log('Reports must be correlated with a request session. Please start a new request session using header_tag_manager.analytics.set_request_id().');
            return;
        }

        var q = '?type=' + type + '&r=' + request_id + '&t0=' + auction_start_ts + '&t1=' + auction_end_ts;

        var timers = this.timers[request_id];
        var targets = this.targets[request_id] || {};
        var timeouts = this.timed_out || {};

        for (var i = 0; i < names.length; i++) {
            var name = names[i];
            if (typeof timers[name] === 'undefined') continue;
            var start = timers[name].started || -1;
            var end = timers[name].ended || -1;
            var duration = end - start;
                duration = duration > 0 ? duration : -1;
            var timeout = get_karma_partner_timeout();
            var timed_out = (timeouts[reqid] && timeouts[reqid][name]) || 0;

            // Write out timing report
            q += '&' + name + '.t=' + duration + '&' + name + '.ts=' + timeout + '&' + name + '.to=' + timed_out;

            // Write out key value reports, if any
            if (typeof targets !== 'undefined' && targets.hasOwnProperty(name)) {
                for (var key in targets[name]) {
                    var values = targets[name][key];
                    var values_str = '';

                    if (values instanceof Array) {
                        for (var j = 0; j < values.length - 1; j++) values_str += values[j] + ',';
                        values_str += values[values.length -1];
                    } else {
                        values_str = values;
                    }

                    q += '&' + name + '.p.pl.' + key + '=' + values_str;
                }
            }
        }

        return q + '&s=' + site_id + '&u=' + encodeURIComponent(href);
    }

    Analytics.prototype.send_report = function (site_id, names, request_id) {
        var url = new String();
        if (location.protocol === 'https:')
            url += 'https://as-sec';
        else
            url += 'http://as';

        url += '.casalemedia.com/headerstats' + this.create_report_query(site_id, location.href, names, request_id);

        var beacon = new Image();
        beacon.src = url;

        console.log("Sent Report:\nurl: " + url + "\nParameters:\n" + url.split('&').slice(1).join('\n'));
    }

    var analytics = new Analytics();

    if (typeof window.header_tag_manager !== 'undefined') {
        header_tag_manager.analytics = analytics;
    } else {
        window.header_tag_manager = {
            analytics: analytics
        };
    }
})();


var mapSlots = (function (slots) {
    return function mapSlots() {
        if((/ag\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":178489,"2":178490,"3":178491,"5":178492,"11":178493,"12":178494,"13":178495,"17":178496,"19":178497,"20":178498,"21":178499,"27":178500,"28":178501,"29":178502},"slots":[]};
}
if((/ag\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"9":178503,"10":178504,"39":178505},"slots":[]};
}
if((/cdms\.ag\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":178489,"5":178492,"17":178496,"19":178497,"20":178498,"27":178500},"slots":[]};
}
if((/apq\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":178506,"2":178507,"5":178509,"17":178510,"20":178512,"27":178513},"slots":[]};
}
if((/apq\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"6":178514,"9":178515,"10":178516,"39":178518},"slots":[]};
}
if((/ar\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":178519,"2":178520,"3":178521,"4":178522,"5":178523,"15":178525,"17":178526,"19":178527,"20":178528,"27":178529,"29":178531,"30":178532},"slots":[]};
}
if((/ar\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"6":178533,"8":178534,"9":178535,"10":178536,"34":178537,"39":178540},"slots":[]};
}
if((/ar\.mdp\.shop/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":179247,"17":179248,"20":179249},"slots":[]};
}
if((/foodwishes\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":178519,"12":181443},"slots":[]};
}
if((/bhg\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":178542,"2":178543,"3":178544,"4":178545,"5":178546,"15":178547,"17":178548,"19":178549,"20":178550,"21":178551,"27":178552,"28":178553,"30":178555,"32":178556},"slots":[]};
}
if((/bhg\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"6":178557,"7":178558,"8":178559,"9":178560,"10":178561,"34":178562,"35":178563,"39":178564},"slots":[]};
}
if((/bhg\.mdp\.com\.arb/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":178542,"2":178543,"3":178544,"5":178546,"15":178547,"17":178548,"19":178549,"20":178550,"27":178552,"28":178553,"32":178556},"slots":[]};
}
if((/bhg\.mdp\.mob\.arb/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"6":178557,"7":178558,"8":178559,"9":178560,"10":178561,"34":178562,"39":178564},"slots":[]};
}
if((/bhg\.mdp\.shop/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":178542,"2":178543,"3":178544,"4":178545,"5":178546,"17":178548,"20":178550,"27":178552},"slots":[]};
}
if((/comidakraft\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":178566,"2":178567,"3":178568,"4":178569,"5":178570,"15":178571,"17":178572,"20":178573,"27":178574,"30":178575,"32":178576},"slots":[]};
}
if((/comidakraft\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"6":178577,"9":178579,"10":178580,"34":178581,"39":178582},"slots":[]};
}
if((/dlv\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":178583,"2":178584,"3":178585,"5":178586,"15":178587,"17":178588,"20":178590,"27":178591,"32":178592},"slots":[]};
}
if((/dlv\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"6":178593,"9":178595,"10":178596,"34":178597,"39":178598},"slots":[]};
}
if((/dc\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":178599,"2":178600,"3":178601,"5":178602,"15":178603,"17":178604,"19":178605,"20":178606,"21":178607,"27":178608,"32":178609},"slots":[]};
}
if((/dc\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"6":178610,"7":178611,"8":178612,"9":178613,"10":178614,"34":178615,"35":178616,"39":178617},"slots":[]};
}
if((/dc\.mdp\.shop/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":178599,"17":178604,"20":178606},"slots":[]};
}
if((/diy\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":178618,"2":178619,"5":178621,"17":178622,"20":178623,"27":178624},"slots":[]};
}
if((/ew\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":178625,"2":178626,"3":178627,"4":178628,"5":178629,"15":178630,"17":178631,"20":178633,"27":178634,"32":178635},"slots":[]};
}
if((/ew\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"6":178636,"8":178637,"9":178638,"10":178639,"34":178640,"39":178641},"slots":[]};
}
if((/eatthis\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":178642,"2":178643,"4":178644,"5":178645,"15":178646,"17":178647,"20":178649,"22":178650,"27":178651,"28":178652,"30":178653,"32":178654},"slots":[]};
}
if((/eatthis\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"6":178655,"7":178656,"8":178657,"9":178658,"10":178659,"34":178660,"35":178661,"39":178662},"slots":[]};
}
if((/emerils\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":178663,"2":178664,"17":178665,"20":178666},"slots":[]};
}
if((/emerils\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"6":178667,"7":178944,"8":178945,"34":178946},"slots":[]};
}
if((/fc\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":178947,"2":178948,"3":178949,"4":178950,"5":178951,"15":178952,"17":178953,"20":178955,"27":178956,"32":178957},"slots":[]};
}
if((/fc\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"6":178958,"9":178959,"10":178960,"39":178962,"40":178963},"slots":[]};
}
if((/fitness\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":178688,"2":178689,"3":178690,"5":178691,"15":178692,"17":178693,"19":178694,"20":178695,"21":178696,"27":178697,"32":178698},"slots":[]};
}
if((/fitness\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"6":178699,"7":178700,"8":178701,"9":178702,"10":178703,"34":178704,"39":178705},"slots":[]};
}
if((/fitness\.mdp\.shop/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":178688,"17":178693,"20":178695},"slots":[]};
}
if((/fitpreg\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":178707,"2":178708,"3":178709,"4":178710,"5":178711,"15":178712,"17":178713,"20":178715,"27":178716,"32":178717},"slots":[]};
}
if((/fitpreg\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"6":178718,"7":178719,"8":178720,"9":178721,"10":178722,"34":178723,"35":178724,"39":178725},"slots":[]};
}
if((/howtosew\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":178727,"17":178728,"23":178729,"24":178730,"25":178731},"slots":[]};
}
if((/kraftrecipes\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":178732,"2":178733,"3":178734,"4":178735,"5":178736,"15":178737,"17":178738,"20":178739,"27":178740,"30":178741,"32":178742},"slots":[]};
}
if((/kraftrecipes\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"6":178743,"9":178745,"10":178746,"39":178748},"slots":[]};
}
if((/lcl\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":178749,"2":178750,"5":178752,"17":178753,"20":178755,"27":178756},"slots":[]};
}
if((/lcl\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"9":178757,"10":178758,"39":178759},"slots":[]};
}
if((/mslo\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":178760,"2":178761,"4":178763,"5":178764,"15":178765,"17":179042,"19":179043,"20":179044,"21":179045,"27":179046,"32":179047},"slots":[]};
}
if((/mslo\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"6":179048,"7":179049,"8":179050,"9":179051,"10":179052,"34":179053,"35":179054,"36":179055,"37":179056,"38":179057,"39":179058},"slots":[]};
}
if((/msw\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":179059,"2":179060,"5":179062,"17":179063,"20":179065,"27":179067,"30":179068},"slots":[]};
}
if((/msw\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"6":179069,"7":179070,"8":179071,"34":179072,"36":179073,"37":179074,"38":179075},"slots":[]};
}
if((/mwl\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":179076,"2":179077,"3":179078,"5":179079,"15":179080,"17":179081,"20":179083,"27":179084,"32":179085},"slots":[]};
}
if((/mwl\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"6":179086,"9":179087,"10":179088,"34":179089,"39":179090},"slots":[]};
}
if((/more\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":179091,"2":179092,"3":179093,"4":179094,"5":179095,"15":179098,"17":179099,"20":179100,"27":179101,"28":181445,"32":179102},"slots":[]};
}
if((/more\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"3":180799,"6":180797,"7":180798,"9":180802,"10":180803,"35":180800},"slots":[]};
}
if((/more\.mdp\.shop/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":179091},"slots":[]};
}
if((/mywedding\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":179103,"2":179104,"3":179105,"4":179107,"5":179108,"12":179110,"17":179112,"19":179113,"20":179114,"21":179115,"27":179116,"30":179117},"slots":[]};
}
if((/mywedding\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"6":179118,"7":179119,"8":179120,"9":179121,"34":179122,"35":179123,"40":179124},"slots":[]};
}
if((/mywedding\.mdp\.com\.pe/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"14":179111,"16":179125,"18":179126,"26":179127,"31":179128},"slots":[]};
}
if((/mywedding\.mdp\.shop/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":179103,"17":179112,"20":179114},"slots":[]};
}
if((/parenting\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":179129,"2":179130,"3":179131,"5":179132,"15":179133,"17":179134,"20":179136,"27":179137,"32":179138},"slots":[]};
}
if((/parenting\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"6":179139,"7":179140,"8":179141,"9":179142,"10":179143,"34":179144,"39":179145},"slots":[]};
}
if((/parenting\.mdp\.com\.pe/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"14":179146,"16":179147,"18":179148,"26":179149,"31":179150},"slots":[]};
}
if((/parenting\.mdp\.mob\.pe/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"33":179151},"slots":[]};
}
if((/parents\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":179152,"2":179153,"3":179154,"4":179155,"5":179156,"15":179157,"17":179158,"20":179160,"21":179161,"27":179162,"32":179163},"slots":[]};
}
if((/parents\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"6":179164,"7":179165,"8":179166,"9":179167,"10":179168,"34":179169,"35":179170,"39":179171,"40":179172},"slots":[]};
}
if((/parents\.mdp\.shop/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":179152,"17":179158,"20":179160},"slots":[]};
}
if((/rrmag\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":179173,"2":179174,"3":179175,"4":179176,"5":179177,"15":179178,"17":179179,"20":179180,"27":179181,"32":179182},"slots":[]};
}
if((/recipecom\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":179183,"2":179184,"3":179185,"4":179186,"5":179187,"15":179188,"17":179190,"20":179192,"27":179194,"32":179195},"slots":[]};
}
if((/recipecom\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"6":179196,"7":179197,"8":179198,"9":179199,"10":179201,"34":179202,"39":179203,"40":179204},"slots":[]};
}
if((/recipecom\.mdp\.shop/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":179183,"17":179190,"20":179192},"slots":[]};
}
if((/sp\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":179205,"2":179207,"3":179208,"4":179209,"5":179210,"17":179211,"20":179212,"27":179213,"30":179214},"slots":[]};
}
if((/sp\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"6":179215,"7":179216,"8":179217,"9":179218,"10":179219,"34":179220,"39":179221},"slots":[]};
}
if((/shape\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":179222,"2":179223,"3":179224,"4":179225,"5":179226,"15":179227,"17":179228,"20":179230,"21":179231,"27":179232,"32":179233},"slots":[]};
}
if((/shape\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"6":179234,"7":179235,"8":179236,"9":179237,"10":179238,"34":179239,"35":179240,"39":179241},"slots":[]};
}
if((/shape\.mdp\.com\.pe/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"14":179242,"16":179243,"18":179244,"26":179245,"31":179246},"slots":[]};
}
if((/shape\.mdp\.mob\.pe/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"33":181444},"slots":[]};
}
if((/shape\.mdp\.shop/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":179222,"17":179228,"20":179230},"slots":[]};
}
if((/sm\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":179250,"2":179251,"3":179252,"4":179253,"5":179254,"17":179255,"20":179256,"27":179257,"30":179258},"slots":[]};
}
if((/sm\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"6":179259,"7":179260,"8":179261,"9":179262,"10":179263,"34":179264,"35":179265,"39":179266},"slots":[]};
}
if((/tradhome\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":179267,"3":179268,"5":179269,"15":179270,"17":179271,"20":179273,"27":179274,"32":179275},"slots":[]};
}
if((/tradhome\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"6":179276,"9":179278,"10":179279,"34":179280},"slots":[]};
}
if((/wood\.mdp\.com/.test(window.adService.unitValues.adDomain))) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"1":179282,"2":179283,"5":179286,"17":179288,"27":179290,"28":179291,"29":179292,"32":179293},"slots":[]};
}
if((/wood\.mdp\.mob/.test(window.adService.unitValues.adDomain)) && header_tag_manager.is_mobile()) {
window.cygnus_index_args = {"name":"cygnus","embedMode":1,"targetMode":2,"siteID":178489,"siteIds":{"9":179294},"slots":[]};
}

        var adServiceCheck = typeof window.adService.indexExchangeSlots !== 'undefined' && typeof window.adService.indexExchangeSlotCatalog !== 'undefined' ? true : false;

        if (typeof window.cygnus_index_args !== 'undefined' && adServiceCheck) {
            window.cygnus_index_args.slots = [];
            for (var slotId in window.cygnus_index_args.siteIds) {
                if (!window.cygnus_index_args.siteIds.hasOwnProperty(slotId)) {
                    continue;
                }

                for (var karmaSlotDivId in window.adService.indexExchangeSlots) {
                    if (!karmaSlotDivId in window.adService.indexExchangeSlotCatalog) {
                        continue;
                    }

                    if (!"indexExchangeSlotIds" in window.adService.indexExchangeSlotCatalog[karmaSlotDivId]){
                        continue;
                    }

                    var karmaIXSlotId = window.adService.indexExchangeSlotCatalog[karmaSlotDivId].indexExchangeSlotIds;

                    if (karmaIXSlotId == slotId) {
                        var slot = slots[karmaIXSlotId];
                        slot.siteID = window.cygnus_index_args.siteIds[slotId];
                        window.cygnus_index_args.slots.push(slot);
                    }
                }
            }
        }
        else {
            window.cygnus_index_args = {
                slots: [],
                name: "cygnus",
                siteID: 178489,
                embedMode: 1,
                targetingMode: 2
            };
        }
    };
}({
  "1": {
    "id": "1",
    "width": 300,
    "height": 250
  },
  "2": {
    "id": "2",
    "width": 300,
    "height": 250
  },
  "3": {
    "id": "3",
    "width": 300,
    "height": 250
  },
  "4": {
    "id": "4",
    "width": 300,
    "height": 250
  },
  "5": {
    "id": "5",
    "width": 728,
    "height": 90
  },
  "6": {
    "id": "6",
    "width": 300,
    "height": 250
  },
  "7": {
    "id": "7",
    "width": 300,
    "height": 250
  },
  "8": {
    "id": "8",
    "width": 300,
    "height": 250
  },
  "9": {
    "id": "9",
    "width": 320,
    "height": 50
  },
  "10": {
    "id": "10",
    "width": 320,
    "height": 50
  },
  "11": {
    "id": "11",
    "width": 160,
    "height": 600
  },
  "12": {
    "id": "12",
    "width": 160,
    "height": 600
  },
  "13": {
    "id": "13",
    "width": 160,
    "height": 600
  },
  "14": {
    "id": "14",
    "width": 300,
    "height": 1050
  },
  "15": {
    "id": "15",
    "width": 300,
    "height": 1050
  },
  "16": {
    "id": "16",
    "width": 300,
    "height": 250
  },
  "17": {
    "id": "17",
    "width": 300,
    "height": 250
  },
  "18": {
    "id": "18",
    "width": 300,
    "height": 600
  },
  "19": {
    "id": "19",
    "width": 300,
    "height": 600
  },
  "20": {
    "id": "20",
    "width": 300,
    "height": 600
  },
  "21": {
    "id": "21",
    "width": 300,
    "height": 600
  },
  "22": {
    "id": "22",
    "width": 300,
    "height": 600
  },
  "23": {
    "id": "23",
    "width": 320,
    "height": 50
  },
  "24": {
    "id": "24",
    "width": 320,
    "height": 50
  },
  "25": {
    "id": "25",
    "width": 320,
    "height": 50
  },
  "26": {
    "id": "26",
    "width": 728,
    "height": 90
  },
  "27": {
    "id": "27",
    "width": 728,
    "height": 90
  },
  "28": {
    "id": "28",
    "width": 728,
    "height": 90
  },
  "29": {
    "id": "29",
    "width": 728,
    "height": 90
  },
  "30": {
    "id": "30",
    "width": 728,
    "height": 90
  },
  "31": {
    "id": "31",
    "width": 970,
    "height": 250
  },
  "32": {
    "id": "32",
    "width": 970,
    "height": 250
  },
  "33": {
    "id": "33",
    "width": 300,
    "height": 250
  },
  "34": {
    "id": "34",
    "width": 300,
    "height": 250
  },
  "35": {
    "id": "35",
    "width": 300,
    "height": 250
  },
  "36": {
    "id": "36",
    "width": 300,
    "height": 50
  },
  "37": {
    "id": "37",
    "width": 300,
    "height": 50
  },
  "38": {
    "id": "38",
    "width": 300,
    "height": 50
  },
  "39": {
    "id": "39",
    "width": 320,
    "height": 50
  },
  "40": {
    "id": "40",
    "width": 320,
    "height": 50
  }
}
));

/* C2-APL7 */
/* Copyright (C) 2015 Index Exchange All Rights Reserved.
The information contained within this document is confidential,
copyrighted and or trade secret. No part of this document may
be reproduced or distributed in any form or by any means, in
whole or in part, without the prior written permission of
Index Exchange. */

header_tag_manager.register_bidder('INDX');
window.googletag = window.googletag || {};
googletag.cmd = googletag.cmd || [];

var cygnus_tid   = 4;
var public_key = 'IOM';
var pmp_key = 'IPM';
var cygnus_index_stats = {
    sampling: {
        defaults: 1
    }
};

var cygnus_index_adunits =  {
    '728x90': 2, '120x600': 3, '300x250': 4, '160x600': 5, '336x280': 6,
    '234x60': 7, '300x600': 8, '300x50': 9, '320x50': 10, '970x250': 12,
    '300x1050': 13, '970x90': 14, '180x150': 15
};

// Adds tiers to cygnus_index_args
var tierone2tiertwo = {
    160242: 164103
};

function splitIndexSlots() {
    var slots_O = new Array();
    var slots_P = new Array();
    for (var i = 0; i < index_slots.length; i++) {
        var index_params = index_slots[i].split('_');
        var op = index_params.shift();
        var k = op;
        var v = index_params.join('_');
        if (k == public_key) {
            slots_O.push(v);
        } else if (k == pmp_key) {
            slots_P.push(v);
        }
    }

    return [slots_O, slots_P];
}

function isSameSlot(input, test){
    input = input.split('_');
    test= test.split('_');
    return input.pop()==test.pop()&&input.pop()==test.pop();
}


function clearTargeting(targetID) {
    void(0);
}

function cygnus_index_judge( candidate_slots ) {
    var slotTiers = {};
    // Extract the tier number from the slots
    var tierExtractionRegexStr = '^(?:' + public_key + '|' + pmp_key  + ')_(?:T([0-9])_)?(.*)_.*$';
    var tierExtractionRegex = new RegExp(tierExtractionRegexStr);
    var private_slots = [];
    for (var i = 0; i < candidate_slots.length; i++) {
        // If this is a private market bid, skip tiering it wins automatically.
        if (candidate_slots[i].split('_')[0] === pmp_key) {
            private_slots.push(candidate_slots[i]);
            continue;
        }

        var match = tierExtractionRegex.exec(candidate_slots[i]);
        if (typeof match === 'undefined' || match === null) {
            //console.log("ERROR: Recieved invalid targetID: " + candidate_slots[i] + ". This bid will be ignored.");
            continue;
        }
        var tier, slot;
        // match 0 is the whole string
        tier = match[1];
        slot = match[2];

        // If no tier, set to tier 0
        if (typeof tier === 'undefined' || tier === null) {
            tier = 0;
        }

        slotTiers[slot] = slotTiers[slot] || {};
        if (typeof slotTiers[slot].tier === 'undefined' || slotTiers[slot].tier < tier) {
            // Previously saved tier is lower than this one, replace it's bid and set tier to current
            slotTiers[slot].tier = tier;

            // If there was a tier replace the ADM and remove the tierID from the targetID
            var targetID = candidate_slots[i];
            if (tier > 0) {
                var parts = candidate_slots[i].split('_');
                var market = parts.shift();
                var tid_nomarket_withtier = parts.join('_');
                parts.shift(); // kill tier
                var tid_nomarket = parts.join('_');
                targetID = market + '_' + tid_nomarket;
                _IndexRequestData.targetIDToBid[tid_nomarket] = _IndexRequestData.targetIDToBid[tid_nomarket_withtier];
            }

            slotTiers[slot].target = targetID;
        }
    }
    //console.log("Original slots: " + JSON.stringify(candidate_slots) + "\nTier mapping: " + JSON.stringify(slotTiers, null, '\t'));
    var winning_slots = [];
    for (var slotID in slotTiers) {
        if (slotTiers.hasOwnProperty(slotID) === false) continue;
        winning_slots.push(slotTiers[slotID].target);
    }
    //console.log("Winning slots: " + JSON.stringify(winning_slots));
    return winning_slots.concat(private_slots);
}


function cygnus_augment_slots() {
    var slots = cygnus_index_args.slots;
    var initialLength = slots.length;
    for (var i = 0; i < initialLength; i++) {
        var slotObj = slots[i];
        slotObj.siteID = cygnus_index_args.siteID;
        //cygnus_log('Slot ' + i + ': ' + JSON.stringify(slotObj));

        // Push the tier 2 copy
        var t1id = 'T1_' + slotObj.id;
        slots.push({
            'id': t1id,
            'width': slotObj.width,
            'height': slotObj.height,
            'siteID': tierone2tiertwo[cygnus_index_args.siteID]
        });
    }

    // Add in the SQPS bid
    cygnus_index_args.slots.push({
        'id': 'SQPS',
        'width': 300,
        'height': 250,
        'siteID': cygnus_x1_args.SQPS_siteID
    });

    //for (var i = initialLength; i < slots.length; i++) {
    //  //cygnus_log('Slot ' + i + ': ' + JSON.stringify(slots[i]));
    //}

    // Add the default information into cygnus_index_args
    cygnus_index_args.default_slots = cygnus_x1_args.default_slots;
    cygnus_index_args.default_bins = cygnus_x1_args.default_bins;
    cygnus_index_args.default_adcodes = cygnus_x1_args.default_adcodes;
}

function cygnus_index_parse_res(response) {
    // instructions from http://confluence.indexexchange.com/display/HTE/Dual+PMP+Strategy+in+Index+Bidder
    window.index_slots = []
    function record_index_bid(targetPrefix, targetID){
        index_slots.push(targetPrefix + targetID);
        if (_IndexRequestData.targetIDToBid[targetID] === undefined) {
            _IndexRequestData.targetIDToBid[targetID] = [bid.adm];
        } else {
            _IndexRequestData.targetIDToBid[targetID].push(bid.adm);
        }
        var impBid = {};
        impBid.impressionID = bid.impid;
        if (typeof bid.ext.dealid !== 'undefined') {
            impBid.dealID = bid.ext.dealid;
        }
        impBid.bid = bid.price;
        impBid.slotID = slotID;
        impBid.priceLevel = bid.ext.pricelevel;
        impBid.target = targetPrefix + targetID;
        allBids.push(impBid);
    }

    try {
        if (response) {
            if (typeof _IndexRequestData !== "object" || typeof _IndexRequestData.impIDToSlotID !== "object" || typeof _IndexRequestData.impIDToSlotID[response.id] === "undefined") {
                return;
            }
            var targetMode = 0;
            var callbackFn;
            if (typeof _IndexRequestData.reqOptions === 'object' && typeof _IndexRequestData.reqOptions[response.id] === 'object') {
                if (typeof _IndexRequestData.reqOptions[response.id].callback === "function") {
                    callbackFn = _IndexRequestData.reqOptions[response.id].callback;
                }
                if (typeof _IndexRequestData.reqOptions[response.id].targetMode === "number") {
                    targetMode = _IndexRequestData.reqOptions[response.id].targetMode;
                }
            }

            _IndexRequestData.lastRequestID = response.id;

            var allBids = [];
            var seatbidLength = typeof response.seatbid === "undefined" ? 0 : response.seatbid.length;
            for (var i = 0; i < seatbidLength; i++) {
                for (var j = 0; j < response.seatbid[i].bid.length; j++) {
                    var bid = response.seatbid[i].bid[j];
                    if (typeof bid.ext !== "object" || typeof bid.ext.pricelevel !== "string") {
                        continue;
                    }
                    if (typeof _IndexRequestData.impIDToSlotID[response.id][bid.impid] === "undefined") {
                        continue;
                    }
                    var slotID = _IndexRequestData.impIDToSlotID[response.id][bid.impid];
                    if (typeof index_slots === "undefined") {
                        index_slots = [];
                    }
                    if (typeof _IndexRequestData.targetIDToBid === "undefined") {
                        _IndexRequestData.targetIDToBid = {};
                    }
                    var targetID;
                    var targetPrefix;
                    if (typeof bid.ext.dealid === "string") {
                        targetPrefix = pmp_key + '_';
                        if (targetMode === 1) {
                            targetID = slotID + bid.ext.pricelevel;
                            record_index_bid(targetPrefix, targetID);
                        }
                        else if (targetMode === 2){
                            targetID = slotID + bid.ext.pricelevel;
                            record_index_bid(targetPrefix, targetID);
                            targetID = slotID + "_" + bid.ext.dealid;
                            record_index_bid(targetPrefix, targetID);
                        }
                        else {
                            targetID = slotID + "_" + bid.ext.dealid;
                            record_index_bid(targetPrefix, targetID);
                        }
                    } else {
                        targetPrefix = public_key + '_';
                        targetID = slotID + bid.ext.pricelevel;
                        record_index_bid(targetPrefix, targetID);
                    }
                }
            }
            if (typeof callbackFn === "function") {
                if (allBids.length === 0) {
                    callbackFn(response.id);
                } else {
                    callbackFn(response.id, allBids);
                }
            }

            // Cygnus X-1: M1: Defaults by SQPS
            // Block certain req (sqps/nocookie)
            var default_bin = cygnus_index_sqps();
            var use_defaults = 1;

            if (default_bin < 0) {
                // SSQPS enabled, does NOT pass squelch, or SQPS disabled. Disable defaults
                use_defaults = 0;
            }

            if ( use_defaults ) {
                //cygnus_log("Enabling defaults if within sample percentage");
                // Implement sampling threshold for the defaults
                var r = Math.random();
                if (r < cygnus_index_stats.sampling.defaults) {
                    //cygnus_log("Defaults enabled, using bin: " + default_bin);
                    cygnus_index_prepare_defaults(default_bin);
                }
            } else {
                //cygnus_log("Defaults have been disabled.");
            }

            // Choose only the highest tier bids
            index_slots = cygnus_index_judge(index_slots);
            //cygnus_log(index_slots);
        }
    } catch (e) {}
    if (typeof index_slots === "undefined") {
        index_slots = [];
    }
    header_tag_manager.analytics.stop_timer('INDX');
    // header_tag_manager.end_refresh('indx');

    cygnus_index_set_targets();
}


function index_render_default(doc, defaultSettings) {
    var scriptBody = "CasaleArgs = new Object();\n" +
                     "CasaleArgs.version = " + defaultSettings.version + ";\n" +
                     "CasaleArgs.adUnits = \"" + defaultSettings.adUnits + "\";\n" +
                     "CasaleArgs.casaleID = " + defaultSettings.casaleID + ";\n";

    doc.write("<script type='text/javascript'>" + scriptBody + "</script><script type='text/javascript' src='" + defaultSettings.tag + "'></scr"+"ipt>");
}

function index_render(doc, targetID) {
    clearTargeting(targetID);

    // Render default if default activated on this line item
    if (index_activated_defaults.hasOwnProperty(public_key + '_' + targetID)) {
        var defaultSettings = index_activated_defaults[pmp_key + '_' + targetID];
        return index_render_default(doc, defaultSettings);
    }

    if (typeof index_demand === 'undefined') {
        index_demand = {};
    }

    var slotParts = targetID.split('_');
    var slotID = slotParts[0];
    for (var r = 0; r < index_slots_render.length; r++) {
        if (typeof index_slots_render[r][public_key + '_' + targetID] === 'string') {
            //cygnus_log('unpack tier' + targetID);
            targetID = index_slots_render[r][public_key + '_' + targetID];
            var parts = targetID.split('_');
            targetID = parts[1] + '_' + parts[2] + '_' + parts[3];
            slotID = parts[1] + '_' + parts[2];
        }
    }
    //cygnus_log("index_render: " + targetID);

    try {
        var ad = _IndexRequestData.targetIDToBid[targetID].pop();
        if (ad != null) {
            doc.write(ad);

            //cygnus_log("Logged demand for slot " + slotID);
            index_demand[slotID] = 1;
            //delete index_no_demand[slotID];
        } else {
            header_tag_manager.analytics.send_null_creative_alert(
                cygnus_index_args.site_id,
                location.href,
                [targetID],
                header_tag_manager.correlator
            );
        }
    } catch (e) {}
}

var secondary_request = 0;
function header_tag_manager_index_start() {

    // If cygnus_index_args is still undefined after executing mapSlots,
    // end refresh and abort processing
    if (window.cygnus_index_args.slots.length === 0) {
        header_tag_manager.end_refresh('INDX');
        karma_cygnus_loaded();
        return;
    }

    karma.performance.log({label:'IndexInit'});
    window.index_slots = [];
    header_tag_manager.cygnus_refresh_done = false;
    karma_set_index_loaded_flag(false);
    window.setTimeout(function() {
        if (header_tag_manager.cygnus_refresh_done) {
            return;
        }
        header_tag_manager.cygnus_refresh_done = true;
        index_slots = [];
        header_tag_manager.analytics.timeout('INDX');
        header_tag_manager.end_refresh('INDX');
        karma_cygnus_loaded();
    }, karma_cygnus_get_timeout());

    if (!secondary_request) {
        //cygnus_augment_slots()
    } else {
        cygnus_index_args.embedMode = 1;
    }

    secondary_request = 1;

    /*if (typeof index_no_demand === 'undefined') {
        index_no_demand = {};
    }*/
    index_slots_render = [];
    index_slots_add = [];
    targetID_to_slotID = [];
    index_activated_defaults = {};
    cygnus_index_args.parseFn = cygnus_index_parse_res;
    var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
    var meta = {
        '\b': '\\b',
        '\t': '\\t',
        '\n': '\\n',
        '\f': '\\f',
        '\r': '\\r',
        '"': '\\"',
        '\\': '\\\\'
    };

    function escapeCharacter(character) {
        var escaped = meta[character];
        if (typeof escaped === 'string') {
            return escaped;
        } else {
            return '\\u' + ('0000' + character.charCodeAt(0).toString(16)).slice(-4);
        }
    }

    function quote(string) {
        escapable.lastIndex = 0;
        if (escapable.test(string)) {
            return string.replace(escapable, escapeCharacter);
        } else {
            return string;
        }
    }

    function OpenRTBRequest(siteID, parseFn) {
        this.initialized = false;
        if (typeof siteID !== "number" || siteID % 1 !== 0 || siteID < 0) {
            throw "Invalid Site ID";
        }
        this.siteID = siteID;
        this.impressions = [];
        this._parseFnName = undefined;
        if (top === self) {
            this.sitePage = location.href;
            this.topframe = 1;
        } else {
            this.sitePage = document.referrer;
            this.topframe = 0;
        }
        if (typeof parseFn !== 'undefined') {
            if (typeof parseFn === 'function') {
                this._parseFnName = "cygnus_index_args.parseFn";
            } else {
                throw "Invalid jsonp target function";
            }
        }
        if (typeof _IndexRequestData.requestCounter === 'undefined') {
            _IndexRequestData.requestCounter = Math.floor(Math.random() * 256);
        } else {
            _IndexRequestData.requestCounter = (_IndexRequestData.requestCounter + 1) % 256;
        }
        this.requestID = String((new Date().getTime() % 2592000) * 256 + _IndexRequestData.requestCounter + 256);
        this.initialized = true;
    }
    OpenRTBRequest.prototype.serialize = function() {
        var json = '{"id":' + this.requestID + ',"site":{"page":"' + quote(this.sitePage) + '"';
        if (typeof document.referrer === 'string') {
            json += ',"ref":"' + quote(document.referrer) + '"';
        }
        json += '},"imp":[';
        for (var i = 0; i < this.impressions.length; i++) {
            var impObj = this.impressions[i];
            var ext = [];
            json += '{"id":"' + impObj.id + '", "banner":{"w":' + impObj.w + ',"h":' + impObj.h + ',"topframe":' + String(this.topframe) + "}";
            if (typeof impObj.bidfloor === 'number') {
                json += ',"bidfloor":' + impObj.bidfloor;
                if (typeof impObj.bidfloorcur === 'string') {
                    json += ',"bidfloorcur":"' + quote(impObj.bidfloorcur) + '"';
                }
            }
            if (typeof impObj.slotID === 'string' && (!impObj.slotID.match(/^\s*$/))) {
                ext.push('"sid":"' + quote(impObj.slotID) + '"');
            }
            if (typeof impObj.siteID === 'number') {
                ext.push('"siteID":' + impObj.siteID);
            }
            if (ext.length > 0) {
                json += ',"ext": {' + ext.join() + '}';
            }
            if (i + 1 == this.impressions.length) {
                json += '}';
            } else {
                json += '},';
            }
        }
        json += "]}";
        return json;
    };
    OpenRTBRequest.prototype.setPageOverride = function(sitePageOverride) {
        if (typeof sitePageOverride === 'string' && (!sitePageOverride.match(/^\s*$/))) {
            this.sitePage = sitePageOverride;
            return true;
        } else {
            return false;
        }
    };
    OpenRTBRequest.prototype.addImpression = function(width, height, bidFloor, bidFloorCurrency, slotID, siteID) {
        var impObj = {
            'id': String(this.impressions.length + 1)
        };
        if (typeof width !== 'number' || width <= 1) {
            return null;
        }
        if (typeof height !== 'number' || height <= 1) {
            return null;
        }
        if ((typeof slotID === 'string' || typeof slotID === 'number') && String(slotID).length <= 50) {
            impObj.slotID = String(slotID);
        }
        impObj.w = width;
        impObj.h = height;
        if (bidFloor != undefined && typeof bidFloor !== 'number') {
            return null;
        }
        if (typeof bidFloor === 'number') {
            if (bidFloor < 0) {
                return null;
            }
            impObj.bidfloor = bidFloor;
            if (bidFloorCurrency != undefined && typeof bidFloorCurrency !== 'string') {
                return null;
            }
            impObj.bidfloorcur = bidFloorCurrency;
        }
        if (typeof siteID !== 'undefined') {
            if (typeof siteID === 'number' && siteID % 1 === 0 && siteID >= 0) {
                impObj.siteID = siteID;
            } else {
                return null;
            }
        }
        this.impressions.push(impObj);
        return impObj.id;
    };

    function embedCygnusCall(scriptSrc, async) {
        if (async) {
                var scriptTag = document.createElement("script");
                scriptTag.setAttribute("src", scriptSrc);
                scriptTag.setAttribute("type", "text/javascript");

                /*var scriptReadyStateCallback = function() {
                    if (!this.readyState || (this.readyState == "loaded" || this.readyState == "complete")) {
                        if (typeof index_slots === 'undefined') {
                            index_slots = [];
                        }
                        if (index_slots.length == 0) {

                            var r = Math.random();
                            if (r < 0.01) {
                            var cygnus_coll = new Image( );
                                cygnus_coll.src = "http://p.casalemedia.com/cygnus.gif?S="+cygnus_index_args.siteID+"&RB=NULL&U=" + encodeURIComponent( location.href );
                            }
                            index_set_targets();
                        }
                    }
                }

                if (scriptTag.addEventListener) {
                    scriptTag.addEventListener("load", scriptReadyStateCallback, false);
                } else if (scriptTag.readyState) {
                    scriptTag.onreadystatechange = scriptReadyStateCallback;
                }*/

                var firstScript = document.getElementsByTagName('script')[0];
                if (firstScript.parentNode) {
                    firstScript.parentNode.insertBefore(scriptTag, firstScript);
                }
        } else {
            document.write('<script src="'+ scriptSrc +'"></script>');
        }
    }

    OpenRTBRequest.prototype.sendRequestAsync = function() {
        if (this.impressions.length == 0 || this.initialized !== true) {
            return;
        }
        var jsonURI = encodeURIComponent(this.serialize());
        var scriptSrc = window.location.protocol === 'https:' ? 'https://as-sec.casalemedia.com' : 'http://as.casalemedia.com';
        timeout = get_karma_partner_timeout();
        scriptSrc += '/cygnus?v=7&fn=cygnus_index_parse_res&s=' + this.siteID + '&r=' + jsonURI + '&t=' + timeout;

        embedCygnusCall(scriptSrc, cygnus_index_args.embedMode);

        return this.requestID;
    };
    try {
        if (typeof cygnus_index_args === 'undefined' || typeof cygnus_index_args.siteID === 'undefined' || typeof cygnus_index_args.slots === 'undefined') {
            return;
        }
        if (typeof _IndexRequestData === 'undefined') {
            _IndexRequestData = {};
            _IndexRequestData.impIDToSlotID = {};
            _IndexRequestData.reqOptions = {};
        }
        var req = new OpenRTBRequest(cygnus_index_args.siteID, cygnus_index_args.parseFn);
        if (cygnus_index_args.url && typeof cygnus_index_args.url === 'string') {
            req.setPageOverride(cygnus_index_args.url);
        }
        _IndexRequestData.impIDToSlotID[req.requestID] = {};
        _IndexRequestData.reqOptions[req.requestID] = {};
        var slotDef, impID;

        if (!(typeof index_demand === 'undefined')) {
            //cygnus_log("index_demand: " + JSON.stringify(index_demand, null, '\t'));
        }

        //cygnus_log("index_no_demand: " + JSON.stringify(index_no_demand, null, '\t'));

        for (var i = 0; i < cygnus_index_args.slots.length; i++) {
            slotDef = cygnus_index_args.slots[i];

            /*
            // Do not send impressions out for slots that we have previous bids for, but we have not recieved demand for
            if (!(typeof index_demand === 'undefined') && slotDef.id != 'SQPS') {
                if (!(slotDef.id in index_demand)) {
                    var expired = 0;

                    if (typeof index_no_demand[slotDef.id] === 'undefined' && slotDef.id != 'SQPS') {
                        index_no_demand[slotDef.id] = Date.now();
                    } else {
                        var noDemandDuration = Date.now() - index_no_demand[slotDef.id];
                        ////cygnus_log("Slot: " + slotDef.id + ", No demand for " + (noDemandDuration/1000) + " seconds.");
                        if (noDemandDuration > 15000) {
                            expired = 1;
                        }
                    }

                    if (expired) {
                        //cygnus_log('slot ' + slotDef.id + ' has expired. Requesting it once more.');
                        index_no_demand[slotDef.id] = Date.now();
                    } else {
                        //cygnus_log('No demand recieved for slot: ' + slotDef.id + ', not requesting more bids');
                        continue;
                    }
                }
            }
            */

            impID = req.addImpression(slotDef.width, slotDef.height, slotDef.bidfloor, slotDef.bidfloorcur, slotDef.id, slotDef.siteID);
            if (impID) {
                _IndexRequestData.impIDToSlotID[req.requestID][impID] = String(slotDef.id);
            }
        }
        if (typeof cygnus_index_args.targetMode === 'number') {
            _IndexRequestData.reqOptions[req.requestID].targetMode = cygnus_index_args.targetMode;
        }
        if (typeof cygnus_index_args.callback === 'function') {
            _IndexRequestData.reqOptions[req.requestID].callback = cygnus_index_args.callback;
        }
        return req.sendRequestAsync();
    } catch (e) {}
}

function getSlotInfo(slotID) {
    for (var i = 0; i < cygnus_index_args.slots.length; i++) {
        var slotInfo = cygnus_index_args.slots[i];
        if (slotInfo.id == slotID) return slotInfo;
    }

    return undefined;
}

var index_slot_to_size = {};
function cygnus_index_prepare_defaults(default_bin) {

    // Check for which slots we need to insert default targeting:w
    var no_default_needed = {};
    for (var j = 0; j < cygnus_index_args.default_slots.length; j++) {
        var slotID = cygnus_index_args.default_slots[j];

        for (var i = 0; i < index_slots.length; i++) {
            var regexp = new RegExp("^[OP]_" + slotID + "_.*$");
            if (regexp.test(index_slots[i])) {
                // We have a targeting for this slot already, check if it should be squelched
                var parts = index_slots[i].split('_');
                var market = parts[0];
                var price  = parts[parts.length - 1];

                no_default_needed[slotID] = 1;
            }
        }
    }

    //cygnus_log('no_default_needed: ' + JSON.stringify(no_default_needed, null, "\n"));
    // For all the slots we need defaults for, add them in as open market bids
    for (var j = 0; j < cygnus_index_args.default_slots.length; j++) {
        var slotID = cygnus_index_args.default_slots[j];
        if (slotID in no_default_needed) continue;

        var defaultName = cygnus_index_args.default_bins[default_bin];
        var defaultSettings = cygnus_copy(cygnus_index_args.default_adcodes[defaultName]);

        // Auto detect the ad unit
        var slotInfo = getSlotInfo(slotID);
        var adUnitString = slotInfo.width + 'x' + slotInfo.height;
        var adUnit = cygnus_index_adunits[adUnitString];
        if (typeof adUnit === 'undefined') {
            //cygnus_log("ERROR: Ad unit for size " + adUnitString + " does not exist, skipping adding default for slot: " + slotID);
            continue;
        }
        defaultSettings['adUnits'] = String(adUnit);

        var targetID = public_key + '_' + slotID + '_' + defaultSettings.pricelevel;

        index_slot_to_size[targetID] = adUnitString;

        index_slots.push(targetID);

        index_activated_defaults[targetID] = defaultSettings;
        //cygnus_log("Added default targeting: " + targetID + "; size " + adUnitString + "; settings: " + JSON.stringify(defaultSettings, null, "\t"));
    }

    //cygnus_log(JSON.stringify(index_activated_defaults, null, '\t'));
}

function cygnus_copy(obj) {
    var newObj = new Object();
    for (var i in obj) {
        if (obj.hasOwnProperty(i)) newObj[i] = obj[i];
    }
    return newObj;
}
function cygnus_index_sqps()
{
    function sqps_cpm(sqps_slot) {
        var unpack = sqps_slot.split( '_' );
        if (unpack[1] != 'SQPS') return undefined;
        return Number(unpack[2]);
    }

    var cpm = -1;
    cygnus_index_args.sqps_slot = '';
    for (var i = 0; i < index_slots.length; i++) {
        cpm = sqps_cpm(index_slots[i]);
        cygnus_index_args.sqps_slot = index_slots[i];
        if(typeof cpm !== 'undefined') break;
    }
    if (typeof cpm === 'undefined' || cpm < 0) {
        // No SQPS
        return -1;
    }

    var chosen_bin = -1;

    for (var squelch_bin in cygnus_index_args.default_bins) {
        if (!cygnus_index_args.default_bins.hasOwnProperty(squelch_bin)) continue;
        if (cpm > squelch_bin) {
            if (squelch_bin > chosen_bin) {
                chosen_bin = squelch_bin;
            } else {
                //cygnus_log('squelch blelow chosen: ' + squelch_bin + ', ' + chosen_bin);
            }
        } else {
            //cygnus_log('cpm too low');
        }

        //cygnus_log("cpm: " + cpm + "\nchosen_bin: " + chosen_bin + "\nsquelch_bin: " + squelch_bin);
    }
    //cygnus_log("final bin: " + chosen_bin);

    if (chosen_bin >= 0) {
        return chosen_bin;
    } else {
            return -2;
    }
}

// save targets for header_tag_manager
function save_targets() {
    var slots_O = new Array();
    var slots_P = new Array();

    for (var i = 0; i < index_slots.length; i++) {
        var index_params = index_slots[i].split('_');
        var op = index_params.shift();
        var k = op;
        var v = index_params.join('_');
        if (k == public_key) {
            slots_O.push(v);
        } else if (k == pmp_key) {
            slots_P.push(v);
        }
    }
    if (slots_O.length > 0) {
        header_tag_manager.analytics.save_targets('INDX', public_key, slots_O);
    }
    if (slots_P.length > 0) {
        header_tag_manager.analytics.save_targets('INDX', pmp_key, slots_P);
    }
}

function cygnus_index_set_targets() {
    save_targets();
    //header_tag_manager.analytics.stop_timer('INDX');
    if (typeof karma.performance.logPartnerEventOnce === 'function') {
        karma.performance.logPartnerEventOnce('IndexLoaded', 'IndexInit');
    }

    if (!header_tag_manager.cygnus_refresh_done) {
        header_tag_manager.cygnus_refresh_done = true;
        header_tag_manager.end_refresh('INDX');
        karma_cygnus_loaded();
    }
}

// KARMA SPECIFIC CODE START

function isArray(test) {
    if (typeof Array.isArray === 'function') {
        return Array.isArray(test);
    }
    return Object.prototype.toString.call(test) === '[object Array]';
}

function meredithSlotTargeting(meredithSlots) {

    function buildTargetingObject(targetsArray) {
        var targetingObj = {};
        for (var i = 0; i < targetsArray.length; i++) {
            var parts = targetsArray[i].split('_');
            if(targetingObj[parts[0]]){
                targetingObj[parts[0]].push(targetsArray[i]);
            } else {
                targetingObj[parts[0]] =[targetsArray[i]]
            }
        }
        return targetingObj;
    }

    function setSlotTargeting(targets, gptSots, adSlots, key) {
        for (var i = 0; i < gptSlots.length; i++) {
            var gptSlot = gptSlots[i];
            var targetIds = adSlots[i].indexExchangeSlotIds;
            var bids = [];
            for (var j = 0; j < targetIds.length; j++) {
                var bid = targets[targetIds[j]];
                if (typeof bid === 'string') {
                    bids.push(bid);
                } else if (typeof bid !=='undefined' && bid.length>0){
                    for(var k = 0; k<bid.length; k++){
                        bids.push(bid[k]);
                    }
                }
            }
            if (bids.length > 0) {
                gptSlot.setTargeting(key, bids.join(','));
            }
        }
    }

    if (window.adService.indexExchangeEnabled) {
        window.index_slots = window.index_slots || [];

        // unpack the meredithSlots array
        var gptSlots = [], adSlots = [];
        for (var i = 0; i < meredithSlots.length; i++) {
            var adSlot = meredithSlots[i].adSlot;
            var gptSlot = meredithSlots[i].gptSlot;

            // filter out the slots index is not configured to bid on
            if (adSlot.indexExchange && isArray(adSlot.indexExchangeSlotIds) && adSlot.indexExchangeSlotIds.length > 0) {
                gptSlots.push(gptSlot);
                adSlots.push(adSlot);
            }
        }

        if (gptSlots.length === 0) {
            return;
        }

        // clear out old tageting
        for (var i = 0; i < gptSlots.length; i++) {
            gptSlots[i].setTargeting(public_key, '');
            gptSlots[i].setTargeting(pmp_key, '');
        }

        var parts = splitIndexSlots();

        // only run through the targeting function if there is something to do
        if (parts[0].length > 0) {
            var openTargets = buildTargetingObject(parts[0]);
            setSlotTargeting(openTargets, gptSlots, adSlots, public_key);
        }

        if (parts[1].length > 0) {
            var privTargets = buildTargetingObject(parts[1]);
            setSlotTargeting(privTargets, gptSlots, adSlots, pmp_key);
        }
    }
}

// called on ad server response or timeout
function karma_cygnus_loaded() {
    karma_set_index_loaded_flag(true);
    if (!karma.partner.isSetupRunning()) {
        karma.partner.proceedToSetup(false);
    }
}

function karma_set_index_loaded_flag(flag) {
    window.adService.indexExchangeLoaded = flag;
}

var karma_cygnus_get_timeout = (function (TIMEOUT) {
    return function getCygnusTimeout() {
        var timeout;
        if (typeof TIMEOUT === 'function') {
            timeout = TIMEOUT();
        }
        else {
            timeout = TIMEOUT;
        }

        if (typeof timeout === 'string') {
            timeout = parseInt(timeout, 10);
        }

        if (typeof timeout === 'number') {
            return timeout;
        }

        throw new Error('Could not determine the value of timeout safty net');
    };
}(get_karma_partner_timeout))

// Enter Index bids into DFP
header_tag_manager.add_slot_targeting_hook(meredithSlotTargeting);

karma_set_index_loaded_flag(false);
// KARMA SPECIFIC CODE END

//Already covered
/*header_tag_manager.add_post_refresh_hook('INDX', function() {
    header_tag_manager.analytics.stop_timer('INDX');
});*/

header_tag_manager.add_pre_refresh_hook('INDX', function() {
    header_tag_manager.analytics.start_timer('INDX');
    if (window.adService.indexExchangeEnabled) {
        header_tag_manager_index_start();
    } else {
        header_tag_manager.end_refresh('INDX');
    }
});

header_tag_manager.add_session_end_hook(function () {
    if (typeof window.cygnus_index_ready_state === 'function') {
        window.cygnus_index_ready_state();
    }
});



var karma_ybot = (function (YBOT_BLACKLIST) {
    window.adService.yieldbotCap = window.adService.yieldbotCap || 1;
    window.adService.yieldbotEnabled = window.adService.yieldbotEnabled || false;
    window.adService.yieldbotLoaded = false;
    function meredith_ybot_overrides(defaultImpl) {
        return {
            getConfig: function() {
                var yBotSlots = window.adService.yieldbotSlots;
                var slots = {};
                for (var divId in yBotSlots) {
                    if (yBotSlots.hasOwnProperty(divId)) {
                        var yBotSlot = yBotSlots[divId];
                        slots[yBotSlot.yieldbotSlot] = {
                            div_id: divId,
                            sizes: yBotSlot.yieldbotSizes || []
                        };
                    }
                }

                return {
                    pub: window.adService.yieldbotPub,
                    slots: slots
                };
            },

            retrieveDemand: function () {
                if (window.adService.yieldbotEnabled) {
                    karma.performance.log({label:'YieldbotInit'});
                    defaultImpl.retrieveDemand();
                }
                else {
                    defaultImpl.endRefresh();
                }
            },

            queuedRetrieveFunc: function () {
                var isSetupRunning = karma.partner.isSetupRunning;

                if (typeof karma.performance.logPartnerEventOnce === 'function') {
                    karma.performance.logPartnerEventOnce('YieldbotFrameworkLoaded', 'YieldbotInit');
                }
                defaultImpl.queuedRetrieveFunc();
            },

            onDemandRetrieved: function () {
                var isSetupRunning = karma.partner.isSetupRunning;

                window.adService.yieldbotLoaded = true;

                if (!isSetupRunning()) {
                    karma.partner.proceedToSetup(false);
                }

                window.adService.performance.report();
                defaultImpl.onDemandRetrieved();
            },

            onDemandTimeout: function () {
                window.adService.yieldbotLoaded = true;
                var isSetupRunning = karma.partner.isSetupRunning;
                if (!isSetupRunning()) {
                    karma.partner.proceedToSetup(false);
                }
            },

            setSlotTargeting: function (meredithSlots) {
                var adSlot, gptSlot, i;
                for (i = 0; i < meredithSlots.length; i++) {
                    adSlot = meredithSlots[i].adSlot;
                    gptSlot = meredithSlots[i].gptSlot;

                    if (adSlot.yieldbot && adService.yieldbotEnabled) {
                        if (!adSlot.hasOwnProperty('yieldbotCounter')) {
                            adSlot.yieldbotCounter = 0;
                        }

                        if (adSlot.yieldbotCounter === 0 || adSlot.yieldbotCounter >= window.adService.yieldbotCap) {
                            if (typeof adSlot.yieldbotSlot === 'string') {
                                queuePush(function () {
                                    window.yieldbot.setSlotTargeting(adSlot.yieldbotSlot, gptSlot);
                                });
                            }
                        }
                    }
                }
            }
        };
    }

    function meredith_ybot_do_load() {
        for (var i = 0; i < YBOT_BLACKLIST.length; i++) {
            if (YBOT_BLACKLIST[i] === window.adService.unitValues.adDomain) {
                return false;
            }
        }
        return true;
    }

    function isEnabled(){
        return window.adService.yieldbotEnabled;
    }

    function isLoaded(){
        return !!window.yieldbot && window.adService.yieldbotLoaded;
    }

    // no LS exivelent
    function hasPubId(){
        return window.adService.yieldbotPub && adService.yieldbotPub.length > 0;
    }
    // no LS equivelent
    function configCheck(){
        /* if yieldbot is Enabled, we also need to make sure the yieldbotpub value is specified */
        if(isEnabled() && !hasPubId()) {
            karma.log("yieldbotEnabled was set to true but yieldbotPub was not specified. Disabling yieldbot");
            window.adService.yieldbotEnabled = false;
        }
    }
    // no LS eqivelent
    function hasSlots(){
        return Object.keys(window.adService.yieldbotSlots).length > 0;
    }
    // no LS eqivelent
    function disableIfNotLoaded(){
        if(!window.adService.yieldbotLoaded || !window.yieldbot){
            window.adService.yieldbotEnabled = false;
        }
    }
    // just a wrapper around ybot's async queue
    function queuePush(fn){
        if (typeof fn === 'function'){
            window.ybotq = window.ybotq || [];
            window.ybotq.push(fn);
        }
    }


    var publicAPI = {
        queuePush: queuePush,                   // used by yieldbar
        isEnabled: isEnabled,                   // used in karma.partner
        configCheck: configCheck                // used in karma.partner
    };

    return {
        publicAPI: publicAPI,
        meredith_ybot_overrides: meredith_ybot_overrides,
        meredith_ybot_do_load: meredith_ybot_do_load
    };
}(['ag.mdp.com','ag.mdp.mob','diy.mdp.com','cdms.ag.mdp.com','cdms.ag.mdp.mob','ironsearch.mdp.com','ironsearch.mdp.mob']));

karma.partner = karma.partner || {};
karma.partner.yieldbot = karma_ybot.publicAPI;

var meredith_ybot_overrides = karma_ybot.meredith_ybot_overrides;
var meredith_ybot_do_load = karma_ybot.meredith_ybot_do_load;

(function (ls, TIMEOUT, ASYNC, TARGETING_MODE, OVERRIDES, DO_LOAD_FTN, RETRIEVE_BIDS_IMMEDIATELY) {
    'use strict';

    if (typeof DO_LOAD_FTN === 'function' && !DO_LOAD_FTN()) {
        return;
    }

    var analytics;
    if (typeof ls.analytics === 'object') {
        analytics = ls.analytics;
    }

    var LS_NAME = 'YBOT';
    //var ANALYTICS_NAME = 'YBOT';
    var MODE = {
        'SCP': 'SCP',
        'PAGE': 'PAGE'
    };

    function isArray(test) {
        if (typeof Array.isArray === 'function') {
            return Array.isArray(test);
        }
        return Object.prototype.toString.call(test) === '[object Array]';
    }

    function copyObject(obj) {
        var copy = {};
        for (var prop in obj) {
            if (obj.hasOwnProperty(prop)) {
                copy[prop] = obj[prop]
            }
        }
        return copy;
    }

    function getTimeout() {
        var timeout;
        if (typeof TIMEOUT === 'function') {
            timeout = TIMEOUT();
        }
        else {
            timeout = TIMEOUT;
        }

        if (typeof timeout === 'string') {
            timeout = parseInt(timeout, 10);
        }

        if (typeof timeout === 'number') {
            return timeout;
        }

        throw new Error('Could not determine the value of timeout safty net');
    }

    function ybWidth(){
        var e = window.document.documentElement;
        var max = Math.max(e.scrollWidth, e.offsetWidth, e.clientWidth);
        return max;
    }

    function isMobile() {
        return ybWidth() < 481;
    }

    function get_ybotq() {
        window.ybotq = window.ybotq || [];
        return window.ybotq;
    }

    function yBotQueue(ftn) {
        if (typeof ftn === 'function') {
            get_ybotq().push(ftn);
        }
    }

    function filterSlotsByElementIdRegex(slots, expression) {
        var pattern = new RexExp(expression),
            len = slots.length,
            ret = [];
        for (var i = 0; i < len; i++) {
            if (pattern.test(slots[i].getSlotElementId())) {
                ret.push(slots[i]);
            }
        }
        return ret;
    }

    function getGptSlots() {
        if (googletag && googletag.pubads) {
            var pubads = googletag.pubads();
            if (pubads.getSlots) {
                return pubads.getSlots();
            }
        }
        return [];
    }

    function loadYieldBotIntent() {
        var js = document.createElement('script');
        var useSSL = 'https:' === window.document.location.protocol;
        js.src = (useSSL ? 'https:' : 'http:') + '//cdn.yldbt.com/js/yieldbot.intent.js';
        var node = document.getElementsByTagName('script')[0];
        node.parentNode.insertBefore(js, node);
    }

    // default implementation, can be overridden
    function ls_ybot_targeting(slots) {

        if (!isArray(slots) || slots.length === 0) {
            slots = getGptSlots();
        }

        if (slots.length === 0) {
            console.error('No Slots Available to YieldBot');
            return;
        }

        function ls_ybot_slot_targeting() {
            var config = yBot.getConfig();

            for (var key in config.slots) {
                if (!config.slots.hasOwnProperty(key)) {
                    continue;
                }

                var ybotParams = window.yieldbot.getSlotCriteria(key);
                if (typeof ybotParams === 'undefined') {
                    continue;
                }

                var div_id = config.slots[key].div_id;
                var gptSlots = filterSlotsByElementIdRegex(slots, div_id);

                for (var i = 0; i < gptSlots.length; i++) {
                    for (var ikey in ybotParams) {
                        if (!ybotParams.hasOwnProperty(ikey)) {
                            continue;
                        }
                        gptSlots[i].setTargeting(ikey, ybotParams[ikey]);
                        if (typeof analytics === 'object') {
                            analytics.save_targets('YBOT', ikey, ybot_params[ikey]);
                        }
                    }
                }
            }
        }

        yBotQueue(ls_ybot_slot_targeting);
    }

    // default implementation, can be overridden
    function ls_ybot_get_config() {
        var env = 'desk';
        if (isMobile()) {
            env = 'mob';
        }
        return ybot_slots[env];
    }

    // default implementation, can be overridden
    function ls_ybot_retrieve_demand() {
        var config = yBot.getConfig();
        window.yieldbot.pub(config.pub);
        for (var key in config.slots) {
            if (!config.slots.hasOwnProperty(key)) {
                continue;
            }
            var slot = config.slots[key];
            if (isArray(slot.sizes) && slot.sizes.length > 0) {
                window.yieldbot.defineSlot(key, {
                    sizes: slot.sizes
                });
            }
            else {
                window.yieldbot.defineSlot(key);
            }
        }
        if (ASYNC) {
            window.yieldbot.enableAsync();
        }
        window.yieldbot.go();
    }

    function defineSlots() {

        var yBotReturnedDemand = false;

        function onDemandRetrieved() {
            if (typeof karma.performance.logPartnerEventOnce === 'function') {
                karma.performance.logPartnerEventOnce('YieldbotLoaded', 'YieldbotInit');
            }

            if (yBotReturnedDemand) {
                return;
            }
            yBotReturnedDemand = true;
            if (typeof analytics === 'object') {
                analytics.stop_timer(LS_NAME);
            }
            ls.end_refresh(LS_NAME);
            yBot.onDemandRetrieved();
        }

        function onDemandTimeout() {
            if (yBotReturnedDemand) {
                return;
            }
            console.log(LS_NAME + ' timed out');
            yBotReturnedDemand = true;
            if (typeof analytics === 'object') {
                analytics.timeout(LS_NAME);
            }
            ls.end_refresh(LS_NAME);
            yBot.onDemandTimeout();
        }

        if (typeof analytics === 'object') {
            analytics.start_timer(LS_NAME);
        }

        yBotQueue(yBot.queuedRetrieveFunc);
        // this looks like a bug, how can we tell if
        // yieldbot has returned demand if all we are doing is
        // adding it to the async queue
        yBotQueue(onDemandRetrieved);
        window.setTimeout(onDemandTimeout, getTimeout());
    }

    var ybIntentLoaded = false;
    if (RETRIEVE_BIDS_IMMEDIATELY) {
        loadYieldBotIntent();
        ybIntentLoaded = true;
    }

    function retrieveDemand() {
        window.adService.yieldbotLoaded = false;
        if (!ybIntentLoaded) {
            loadYieldBotIntent();
            ybIntentLoaded = true;
        }

        defineSlots();
    }

    function endRefresh() {
        ls.end_refresh(LS_NAME);
    }

    var yBot = {
        getConfig: ls_ybot_get_config,
        retrieveDemand: retrieveDemand,
        queuedRetrieveFunc: ls_ybot_retrieve_demand,
        onDemandRetrieved: function () {},
        onDemandTimeout: function () {},
        endRefresh: endRefresh,
        setSlotTargeting: ls_ybot_targeting,
    };

    if (typeof OVERRIDES === 'function') {
        var overrides = OVERRIDES(copyObject(yBot));
        for (var method in overrides) {
            if (yBot.hasOwnProperty(method)) {
                yBot[method] = overrides[method];
            }
        }
    }

    ls.register_bidder(LS_NAME);
    ls.add_pre_refresh_hook(LS_NAME, yBot.retrieveDemand);

    if (TARGETING_MODE === MODE.SCP) {
        ls.add_slot_targeting_hook(yBot.setSlotTargeting);
    }
    else {
        throw new Error('Page level targeting not yet supported');
    }


}(header_tag_manager, get_karma_partner_timeout, true, 'SCP', meredith_ybot_overrides, meredith_ybot_do_load, false));


function meredith_pubmatic_overrides(defaultImpl) {
    function inTestMode() {
        var enabled = karma.urlVars.isTrue('pubmaticTest');
        if (enabled) {
            window.bidDetailsMap = {};
            window.progKeyValueMap = {};
            karma.log('Pubmatic test mode enabled');
        }
        return enabled;
    }

    return {
        retrieveDemand: function() {
            if(adService.pubmaticEnabled) {
                window.adService.pubmaticLoaded = false;
                window.pm_pub_id = inTestMode() ? 9999 : adService.pubmaticPub;
                defaultImpl.retrieveDemand();
            } else {
                defaultImpl.endRefresh();
            }
        },

        onDemandRetrieved: function () {
            window.adService.pubmaticLoaded = true;
            if (!karma.partner.isSetupRunning()) {
                karma.partner.proceedToSetup(false);
            }
        },

        onDemandTimeout: function () {
            window.adService.pubmaticLoaded = true;
            if (!karma.partner.isSetupRunning()) {
                karma.partner.proceedToSetup(false);
            }
        },

        setSlotTargeting: function (meredithSlots) {
            var gptSlot, i, gptSlots = [];
            for (i = 0; i < meredithSlots.length; i++) {
                gptSlot = meredithSlots[i].gptSlot;

                if (adService.pubmaticEnabled) {
                    gptSlots.push(gptSlot);
                }
            }
            defaultImpl.setSlotTargeting(gptSlots);
        }
    };
}


function meredith_pubSlotKeys() {
    var slot, id, pubSlotKeys = {};
    for(id in adService.pubmaticSlots){
        if(adService.pubmaticSlots.hasOwnProperty(id)) {
            slot = adService.pubmaticSlots[id];
            if (slot.hasOwnProperty('pubmaticKeys') && slot.pubmaticKeys.length > 0) {
                pubSlotKeys[id] = slot.pubmaticKeys;
            }
        }
    }
    return pubSlotKeys;
}

(function (ls, TIMEOUT, PUBMATIC_PUB, PUB_SLOT_KEYS, OVERRIDES) {
    'use strict';

    var get_pubmatic_timeout = (function (TIMEOUT) {
        return function getPubmaticTimeout() {
            var timeout;
            if (typeof TIMEOUT === 'function') {
                timeout = TIMEOUT();
            }
            else {
                timeout = TIMEOUT;
            }

            if (typeof timeout === 'string') {
                timeout = parseInt(timeout, 10);
            }

            if (typeof timeout === 'number') {
                return timeout;
            }

            throw new Error('Could not determine the value of timeout safty net');
        };
    }(get_karma_partner_timeout));

    var analytics;
    if (typeof ls.analytics === 'object') {
        analytics = ls.analytics;
    }

    var LS_NAME = 'PUB',
        pubmaticTargeting = {};

    window.pm_pub_id = PUBMATIC_PUB;

    var retrieveDemand = (function (pubSlotKeysFunc) {
        return function () {
            var pubSlotKeys = {},
                slots, slotDiv, thisPubmaticTargeting, i;

            if (typeof pubSlotKeysFunc === 'function') {
                pubSlotKeys = pubSlotKeysFunc();
            }
            if (typeof pubSlotKeys !== 'object') {
                throw new Error('pubSlotKeys is not valid');
            }

            karma.performance.log({label:'PubmaticInit'});
            var pubmaticLoaded = false;

            // Clear old targeting
            if(googletag && typeof googletag.pubads === 'function') {
                slots = googletag.pubads().getSlots();
                for (i = 0; i < slots.length; i++) {
                    slotDiv = slots[i].getSlotElementId();
                    if (pubmaticTargeting.hasOwnProperty(slotDiv)) {
                        thisPubmaticTargeting = pubmaticTargeting[slotDiv];
                        slots[i].setTargeting(thisPubmaticTargeting[4], '');
                        slots[i].setTargeting(thisPubmaticTargeting[2], '');
                        slots[i].setTargeting(thisPubmaticTargeting[0], '');
                    }
                }
            }

            pubmaticTargeting = {};

            window.pm_optimize_adslots = [];

            var id, slot, pkl;
            for (id in pubSlotKeys) {
                if(pubSlotKeys.hasOwnProperty(id)) {
                    slot = pubSlotKeys[id];
                        pkl = slot.length;
                        while (pkl--) {
                            window.pm_optimize_adslots.push(slot[pkl]);
                        }
                }
            }

            window.pm_async_callback_fn = 'pm_async_callback';
            window.pm_async_callback = loadedCallback;

            ls.analytics.start_timer(LS_NAME);

            window.setTimeout(function () {
                if (pubmaticLoaded) {
                    return;
                }
                console.log(LS_NAME + ' timed out');
                pubmaticLoaded = true;
                ls.analytics.timeout(LS_NAME);
                ls.end_refresh(LS_NAME);
                pubmatic.onDemandTimeout();
            }, get_pubmatic_timeout());

            (function () {
                window.pm_start=Math.floor(new Date().getTime()); //Timestamp for Pubmatic's proprietary latency tracking
                var pubmatic = document.createElement('script');
                pubmatic.async = true;

                var useSSL = 'https:' === window.document.location.protocol;
                pubmatic.src = (useSSL ? 'https:' : 'http:') + '//ads.pubmatic.com/AdServer/js/gshowad.js';

                var node = document.getElementsByTagName('script')[0];
                node.parentNode.insertBefore(pubmatic, node);
            })();

            function loadedCallback(){
                if (typeof karma.performance.logPartnerEventOnce === 'function') {
                    karma.performance.logPartnerEventOnce('PubmaticLoaded', 'PubmaticInit');
                }

                if (pubmaticLoaded) {
                    return;
                }
                pubmaticLoaded = true;

                var id;
                if (typeof progKeyValueMap !== 'undefined' && !isEmptyObject(progKeyValueMap)) {
                    //loop through pubmatic slots - if more than one size, return the highest bid
                    for(id in pubSlotKeys){
                        if(pubSlotKeys.hasOwnProperty(id)) {
                            var pubSlot = pubSlotKeys[id];
                            var slotBids = [], winningBid = undefined, psl = pubSlot.length, bid = undefined, psli;
                            for (psli=0;psli < psl; psli++) {
                                if (typeof progKeyValueMap[pubSlot[psli]] === 'string') {
                                    var normalized = progKeyValueMap[pubSlot[psli]].replace(/=/g, ';');
                                    bid = normalized.split(";");
                                    slotBids.push(bid);
                                    if(winningBid === undefined){
                                        winningBid = bid;
                                    }
                                    if(slotBids.length > 1) {
                                        slotBids.sort(function (a, b) {
                                            if (a[3] === undefined)
                                                a[3] = 0;

                                            if (b[3] === undefined)
                                                b[3] = 0;

                                            return a[3] - b[3]
                                        });

                                        winningBid = slotBids[slotBids.length - 1];
                                    }
                                    /* Set bidstatus to '2' if wdeal is empty */
                                    if (winningBid[7] === '' && parseFloat(winningBid[3]) > 0) {
                                        winningBid[1] = '2'
                                    }
                                    pubmaticTargeting[id] = winningBid;
                                }
                            }
                        }
                    }
                    console.log('Pubmatic loaded successfully.');
                }
                else {
                    console.log('Pubmatic unsuccessful');
                }

                ls.analytics.stop_timer(LS_NAME);
                ls.end_refresh(LS_NAME);

                pubmatic.onDemandRetrieved();
            }
        }
    }(PUB_SLOT_KEYS));

    function setSlotTargeting(slots){
        var i, slotDiv;
        for (i = 0; i < slots.length; i++) {
            slotDiv = slots[i].getSlotElementId();
            if (pubmaticTargeting.hasOwnProperty(slotDiv)) {
                var thisPubmaticTargeting = pubmaticTargeting[slotDiv];
                slots[i].setTargeting(thisPubmaticTargeting[4], thisPubmaticTargeting[5]);
                slots[i].setTargeting(thisPubmaticTargeting[2], thisPubmaticTargeting[3]);
                slots[i].setTargeting(thisPubmaticTargeting[0], thisPubmaticTargeting[1]);
            }
        }
    }

    function isEmptyObject(obj) {
        var prop;
        for (prop in obj) {
            if (obj.hasOwnProperty(prop)) {
                return false;
            }
        }
        return true;
    }

    function copyObject(obj) {
        var copy = {};
        for (var prop in obj) {
            if (obj.hasOwnProperty(prop)) {
                copy[prop] = obj[prop]
            }
        }
        return copy;
    }

    function endRefresh() {
        ls.end_refresh(LS_NAME);
    }

    var pubmatic = {
        retrieveDemand: retrieveDemand,
        onDemandRetrieved: function () {},
        onDemandTimeout: function () {},
        setSlotTargeting: setSlotTargeting,
        endRefresh: endRefresh
    };

    if (typeof OVERRIDES === 'function') {
        var overrides = OVERRIDES(copyObject(pubmatic));
        for (var method in overrides) {
            if (pubmatic.hasOwnProperty(method)) {
                pubmatic[method] = overrides[method];
            }
        }
    }

    ls.register_bidder(LS_NAME);
    ls.add_pre_refresh_hook(LS_NAME, pubmatic.retrieveDemand);
    ls.add_slot_targeting_hook(pubmatic.setSlotTargeting);

}(header_tag_manager, get_karma_partner_timeout, 9999, meredith_pubSlotKeys, meredith_pubmatic_overrides));

(function (ls, TIMEOUT) {

    ls.register_bidder('RUBI');

    window.rubicon_slots = [];
    window.rubicontag = window.rubicontag || {};
    window.rubicontag.cmd = rubicontag.cmd || [];

    window.rubicon_size_mapping = {
        "728x90": 2,
        "160x600": 9,
        "300x600": 10,
        "300x250": 15,
        "320x50": 43,
        "300x50": 44,
        "300x1050": 54,
        "970x90": 55,
        "970x250": 57
    };

    var rubicon_slotKeys = [];
    var rubiconLoaded = false;

    function setSlotTargeting(meredithSlots) {
        var adSlot, gptSlot, i;
        for (i = 0; i < meredithSlots.length; i++) {
            adSlot = meredithSlots[i].adSlot;
            gptSlot = meredithSlots[i].gptSlot;

            if (adSlot.rubicon && adService.rubiconEnabled) {
                rubicontag.cmd.push(function() {
                    rubicontag.setTargetingForGPTSlot(gptSlot);
                });
            }
        }
    }

    ls.add_slot_targeting_hook(setSlotTargeting);

    ls.add_pre_refresh_hook('RUBI', function() {
        window.adService.rubiconLoaded = false;
        var rubiLoaded = false;
        function rubirun () {
                    if (rubiLoaded) return;
            window.adService.rubiconLoaded = true;
            rubiLoaded = true;
            ls.analytics.stop_timer('RUBI');
            ls.end_refresh('RUBI');
            if (!karma.partner.isSetupRunning()) {
                karma.partner.proceedToSetup(false);
            }
        }

        if (adService.rubiconEnabled && adService.hasOwnProperty('rubiconSiteId')) {
            ls.analytics.start_timer('RUBI');
            var siteId = adService.rubiconSiteId;

            if (!rubiconLoaded) {
                (function() {
                    var script = document.createElement('script');
                    script.src = "//ads.rubiconproject.com/header/12738.js";
                    var firstScript = document.getElementsByTagName('script')[0];
                    firstScript.parentNode.insertBefore(script, firstScript);
                })();

                rubicontag.cmd.push(function() {
                    // Indicate this is coming from index exchange
                    if(typeof rubicontag.setIntegration === "function") rubicontag.setIntegration('ie');
                });
                rubiconLoaded = true;
            }

            window.setTimeout(function() {
            if (rubiLoaded) return;
                window.adService.rubiconLoaded = true;
                rubiLoaded = true;
                console.log('Rubicon timed out');
                ls.analytics.timeout('RUBI');
                ls.end_refresh('RUBI');
                if (!karma.partner.isSetupRunning()) {
                    karma.partner.proceedToSetup(false);
                }
            }, getTimeout());

            rubicontag.cmd.push(function() {
                var newSlots = [];

                for (var divid in adService.rubiconSlots) {
                    if(adService.rubiconSlots.hasOwnProperty(divid)) {
                        var slot = adService.rubiconSlots[divid];

                        for (var zoneId in slot.rubiconZones) {
                            if (slot.rubiconZones.hasOwnProperty(zoneId)) {
                                var sizes = slot.rubiconZones[zoneId].map(function (sizeArray) {
                                    return window.rubicon_size_mapping[sizeArray[0] + 'x' + sizeArray[1]];
                                });

                                var slotKey = siteId + "/" + zoneId + "/" + divid + "/" + sizes;

                                if (rubicon_slotKeys.indexOf(slotKey) === -1) {
                                    var newSlot = rubicontag.defineSlot({ siteId: siteId, zoneId: zoneId, sizes: sizes, id: divid });
                                    window.rubicon_slots.push(newSlot);
                                    rubicon_slotKeys.push(slotKey);
                                    newSlots.push(newSlot);
                                }
                            }
                        }
                    }
                }

                if (newSlots.length > 0) {
                    rubicontag.run(rubirun, { "slots": newSlots, "timeout": getTimeout() });
                } else {
                    rubicontag.run(rubirun, { "slots": window.rubicon_slots, "timeout": getTimeout() });
                }
            });
        } else {
            ls.end_refresh('RUBI');
        }
    }, false, 'initial-load');

    function getTimeout() {
        var timeout;
        if (typeof TIMEOUT === 'function') {
            timeout = TIMEOUT();
        }
        else {
            timeout = TIMEOUT;
        }

        if (typeof timeout === 'string') {
            timeout = parseInt(timeout, 10);
        }

        if (typeof timeout === 'number') {
            return timeout;
        }

        throw new Error('Could not determine the value of timeout safty net');
    }

}(header_tag_manager, get_karma_partner_timeout));


window.appnexus_custom_pricelevels = [
    {"cpm": 10, "granularity": 0.05 },
    {"cpm": 20, "granularity": 0.10},
    {"cpm": 40, "granularity": 0.25}
];

(function (ls, TIMEOUT) {
  //apnx begins
  ls.register_bidder('APNX');

  var getIncrementalInteger = (function () {
    var count = 0;
    return function () {
      count++;
      return count;
    };
  })();

  function getUniqueIdentifierStr() {
    return getIncrementalInteger() + Math.random().toString(16).substr(2);
  }

  function clearTargeting(){
    var slots = googletag.pubads().getSlots();
    var slotMap = {};
    for (var i = 0; i < slots.length; i++) {
      slotMap[slots[i].getSlotElementId()] = slots[i];
    }

    var demand = ls.appnexus_bid_responses;

    for (var div in demand) {
      for (var targ in demand[div]) {
        if (slotMap.hasOwnProperty(div)) {
          slotMap[div].setTargeting(targ, '');
        }
      }
    }
  }

  function appNexus_renderAd(doc, id) {
    if (doc && id) {
      try {
        //lookup ad by ad Id
        var adObject = ls.appnexus_ads[id];
        if (adObject) {
          var height = adObject.height;
          var width = adObject.width;
          var url = adObject.adUrl;
          var ad = adObject.ad;

          if (ad) {
            doc.write(ad);
            doc.close();
            if (doc.defaultView && doc.defaultView.frameElement) {
              doc.defaultView.frameElement.width = width;
              doc.defaultView.frameElement.height = height;
            }
          } else if (url) {
            doc.write('<IFRAME SRC="' + url + '" FRAMEBORDER="0" SCROLLING="no" MARGINHEIGHT="0" MARGINWIDTH="0" TOPMARGIN="0" LEFTMARGIN="0" ALLOWTRANSPARENCY="true" WIDTH="' + width + '" HEIGHT="' + height + '"></IFRAME>');
            doc.close();

            if (doc.defaultView && doc.defaultView.frameElement) {
              doc.defaultView.frameElement.width = width;
              doc.defaultView.frameElement.height = height;
            }

          } else {
            console.log('Error trying to write ad. No ad for bid response id: ' + id);
          }

        } else {
          console.log('Error trying to write ad. Cannot find ad by given id : ' + id);
        }

      } catch (e) {
        console.log('Error trying to write ad Id :' + id + ' to the page:');
      }
    } else {
      console.log('Error trying to write ad Id :' + id + ' to the page. Missing document or adId');
    }

  }

  function parseGPTSingleSizeArray(singleSize) {
    if (Array.isArray(singleSize) && singleSize.length === 2 && (!isNaN(singleSize[0]) && !isNaN(singleSize[1]))) {
      return singleSize[0] + 'x' + singleSize[1];
    }
  }

  function parseSizesInput(sizeObj) {
    var parsedSizes = [];
    if (Array.isArray(sizeObj)) {
      var sizeArrayLength = sizeObj.length;
      if (sizeArrayLength > 0) {
        if (sizeArrayLength === 2 && typeof sizeObj[0] === 'number' && typeof sizeObj[1] === 'number') {
          parsedSizes.push(parseGPTSingleSizeArray(sizeObj));
        } else {
        //otherwise, we must be a MultiSize array
          for (var i = 0; i < sizeArrayLength; i++) {
            parsedSizes.push(parseGPTSingleSizeArray(sizeObj[i]));
          }
        }
      }
    }
    return parsedSizes;
  }

  function tryAppendQueryString(key, value) {
    if (value) {
      return '&' + key + '=' + encodeURIComponent(value);
    }
    return '';
  }

  function getTopWindowUrl() {
    try {
      return window.top.location.href;
    } catch (e) {
      return window.location.href;
    }
  }

  function price_flooring(cpm) {
    var price_buckets = window.appnexus_custom_pricelevels;
    for (var i = 0; i < price_buckets.length; i++) {
      if (cpm < price_buckets[i].cpm) {
        var granularity = 1 / price_buckets[i].granularity;
        return (Math.floor(cpm * granularity) / granularity).toFixed(2);
      } else {
        if (i === price_buckets.length - 1) {
          var granularity = 1 / price_buckets[i].granularity;
          return Math.min(price_buckets[i].cpm, Math.floor(cpm * granularity) / granularity).toFixed(2);
        }
      }
    }
  }

  ls.add_pre_refresh_hook('APNX', function() {
    var localApnxLoaded = false;

    function sendJPTRequest(url) {
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function () {
        if (xhttp.readyState === 4) {
            if (xhttp.status == 200) {
              parseJPTResponse(xhttp.responseText);
            } else {
              console.log('Bad JPT response: ' + xhttp.status);
              decrementAPNXRequestCount();
            }
        }
      };
      xhttp.open('GET', url, true);
      //xhttp.timeout = getTimeout(); // We won't forcibly timeout the request itself, we'll just proceed if it takes too long
      xhttp.ontimeout = JPTTimeoutHandler;
      xhttp.withCredentials = true;
      xhttp.send();
    }

    function parseJPTResponse(response) {
      if (response.length === 0)   {
           decrementAPNXRequestCount();
           return;
      }
      //remove the callback function from response, and parse the data into json object
      var responseObj = JSON.parse(response.substring(9, response.length - 2));
      //cast cpm into int and divide by 10000
      var cpm = parseInt(responseObj.result.cpm, 10);
      cpm = cpm / 10000;
      //if price flooring is set use it
      if(typeof window.appnexus_custom_pricelevels !== 'undefined' && window.appnexus_custom_pricelevels.length > 0){
        cpm = price_flooring(cpm);
      }
      //if cpm value isn't above 0 don't include the bid
      if (cpm > 0) {
        var hb_adid = getUniqueIdentifierStr();
        ls.appnexus_bid_responses[responseObj.callback_uid] = {
          hb_bidder: "appnexus",
          hb_adid: hb_adid,
          hb_pb: cpm,
          hb_size: responseObj.result.width + "x" + responseObj.result.height
        };
        ls.appnexus_ads[hb_adid] = {
          width: responseObj.result.width,
          height: responseObj.result.height,
          adUrl: responseObj.result.ad,
          creative_id: responseObj.result.creative_id
        };
      }
      decrementAPNXRequestCount();
    }

    function decrementAPNXRequestCount () {
      //when all requests are accounted for APNX is done
      ls.apnx_request_count--;
      if (ls.apnx_request_count===0) {
        if (localApnxLoaded) return;
        window.adService.apnxLoaded = true;
        localApnxLoaded = true;
        ls.analytics.stop_timer('APNX');
        ls.end_refresh('APNX');
        if (!karma.partner.isSetupRunning()) {
          karma.partner.proceedToSetup(false);
        }
      }
    }

    function JPTTimeoutHandler(e) {
      console.log("JPT request timed out");
      decrementAPNXRequestCount();
    }

    if(window.adService.apnxEnabled) {
      window.googletag = window.googletag || {};
      window.googletag.cmd = window.googletag.cmd || {};

      window.googletag.cmd.push(function () {
        window.adService.apnxLoaded = false;
        clearTargeting();
        ls.appnexus_bid_responses = {};
        ls.appnexus_ads = {};
        ls.apnx_request_count = 0;

        ls.analytics.start_timer('APNX');

        window.setTimeout(function() {
            if (localApnxLoaded) return;
            console.log('APNX timed out')
            window.adService.apnxLoaded = true;
            localApnxLoaded = true;
            ls.analytics.timeout('APNX');
            ls.end_refresh('APNX');
            if (!karma.partner.isSetupRunning()) {
              karma.partner.proceedToSetup(false);
            }
        }, getTimeout());

        var slotConfigs = window.adService.apnxSlots;
        var url = {};
        // Construct URL to get demand.
        var baseUrl = 'http' + (document.location.protocol === 'https:' ? 's://secure.adnxs.com/jpt?' : '://ib.adnxs.com/jpt?');
        var referrer = getTopWindowUrl();

        ls.apnx_seen = ls.apnx_seen || {};
        var unseen = {}, len = 0;
        // Determine which slots we haven't seen yet
        for (var divid in slotConfigs) {
          if (!ls.apnx_seen.hasOwnProperty(divid)) {
            unseen[divid] = slotConfigs[divid];
            len++;
          }
          ls.apnx_seen[divid] = true;
        }
        // Only fetch demand for new slots
        // If there are no new slots, refresh them all
        // This prevents unnecessary network calls for lazy loaded slots
        if (len > 0) {
          slotConfigs = unseen
        }

        // Build and send ajax request.
        for (var divid in slotConfigs) {
          if(slotConfigs.hasOwnProperty(divid) && slotConfigs[divid].hasOwnProperty('apnxUnits')) {
            for(var placementId in slotConfigs[divid].apnxUnits) {
              if(slotConfigs[divid].apnxUnits.hasOwnProperty(placementId)) {
                var sizes = slotConfigs[divid].apnxUnits[placementId];

                url[divid] = url[divid] || {};
                var sizeQueryString = '';
                var parsedSizes = parseSizesInput(sizes);
                var parsedSizesLength = parsedSizes.length;
                //console.log(parsedSizes);
                if (parsedSizesLength > 0) {
                    //first value should be "size"
                    sizeQueryString = '&size=' + parsedSizes[0];
                    if (parsedSizesLength > 1) {
                        //any subsequent values should be "promo_sizes"
                        sizeQueryString += '&promo_sizes=';
                        for (var j = 1; j < parsedSizesLength; j++) {
                            sizeQueryString += parsedSizes[j] += ',';
                        }
                        if (sizeQueryString && sizeQueryString.charAt(sizeQueryString.length - 1) === ',') {
                            sizeQueryString = sizeQueryString.slice(0, sizeQueryString.length - 1);
                        }
                    }
                }

                url[divid][placementId] = url[divid][placementId] || {};
                url[divid][placementId].url = baseUrl;
                url[divid][placementId].url += tryAppendQueryString('id', placementId);
                url[divid][placementId].url += sizeQueryString;
                url[divid][placementId].url += tryAppendQueryString('referrer', referrer);
                url[divid][placementId].url += tryAppendQueryString('callback', 'callback');
                url[divid][placementId].url += tryAppendQueryString('callback_uid', divid);
                url[divid][placementId].url += tryAppendQueryString('psa', '0');

                sendJPTRequest(url[divid][placementId].url);
                ls.apnx_request_count++;
              }
            }
          }
        }
      })
    } else {
      ls.end_refresh('APNX');
    }
  }, false, 'initial-load');


  ls.appnexus_parse = function(meredith_slots) {
    if (meredith_slots.length === 0) return;
    window.googletag = window.googletag || {};
    window.googletag.cmd = window.googletag.cmd || {};
    window.googletag.cmd.push(function() {
      for (var divid in ls.appnexus_bid_responses) {
        if (!ls.appnexus_bid_responses.hasOwnProperty(divid)) continue;

        var adSlot, gptSlot, i, slot = null;
        for (i = 0; i < meredith_slots.length; i++) {
          adSlot = meredith_slots[i].adSlot;
          gptSlot = meredith_slots[i].gptSlot;
          if (adSlot.apnx && adService.apnxEnabled && gptSlot.getSlotElementId() === divid) {
            slot = gptSlot;
            break;
          }
        }
        if (slot === null) {
          //console.log("No slot defined for div ID '" + divid + "'");
          continue;
        }

        var targets = ls.appnexus_bid_responses[divid];
        for (var key in targets) {
          if (!targets.hasOwnProperty(key)) continue;
          slot.setTargeting(key, targets[key]);
        }
      }
    });
  }

  function getTimeout() {
    var timeout;
    if (typeof TIMEOUT === 'function') {
      timeout = TIMEOUT();
    }
    else {
      timeout = TIMEOUT;
    }

    if (typeof timeout === 'string') {
      timeout = parseInt(timeout, 10);
    }

    if (typeof timeout === 'number') {
      return timeout;
    }

    throw new Error('Could not determine the value of timeout safty net');
  }

  window.appNexus_renderAd = appNexus_renderAd;

  /*window.googletag = window.googletag || {};
  window.googletag.cmd = window.googletag.cmd || [];
  window.googletag.cmd.push(function () {
    window.googletag.pubads().addEventListener('slotRenderEnded', function (event) {
      var demand = ls.appnexus_bid_responses;
      var slotDiv = event.slot.getSlotElementId();
      for(var div in demand) {
        if(div === slotDiv) {
          for(var targ in demand[div]){
            event.slot.setTargeting(targ,'');
          }
          break;
        }
      }
    });
  });*/

  ls.add_slot_targeting_hook(function (slots) {
      ls.appnexus_parse(slots);
  });

  //end APNX
}(header_tag_manager, get_karma_partner_timeout))

header_tag_manager.corrleator = {};
header_tag_manager.add_session_start_hook(function () {
    header_tag_manager.correlator['initial-load'] = header_tag_manager.generate_request_id();
    header_tag_manager.analytics.start_session(header_tag_manager.correlator['initial-load']);
}, false, 'initial-load');
header_tag_manager.add_session_end_hook(function () {
    header_tag_manager.analytics.end_session(header_tag_manager.correlator['initial-load']);
    header_tag_manager.analytics.send_report(cygnus_index_args.siteID, header_tag_manager.registered_bidders, header_tag_manager.correlator['initial-load']);
}, false, 'initial-load');



    function isEnabled() {
        return adService.header_tag_managerEnabled;
    }

    function printError(err) {
        console.error('header_tag_manager threw error: ', err);
        if (err.stack) {
            console.log(err.stack);
        }
        else {
            console.log('Error object does not have stack property');
        }
    }

    function load() {
        window.adService.header_tag_managerLoaded = true;
        refresh();
    }

    function refresh() {
        try {
            mapSlots();

            // is defined at the top of the HTM closure
            refreshCount += 1;
            header_tag_manager.refresh();
        }
        catch (err) {
            printError(err);
        }
    }

    function isArray(test) {
        if (typeof Array.isArray === 'function') {
            return Array.isArray(test);
        }
        return Object.prototype.toString.call(test) === '[object Array]';
    }

    function isFunction(test) {
        return typeof test === 'function';
    }

    function targeting(adSlots, gptSlots, impressionType, callback) {

        callback = isFunction(impressionType) ? impressionType : callback;
        adSlots  = isArray(adSlots) ? adSlots : [adSlots];
        gptSlots = isArray(gptSlots) ? gptSlots : [gptSlots];

        if (adSlots.length !== gptSlots.length) {
            console.error('Length mismatch for adSlots and gptSlots');
            return;
        }

        var slots = [],
            len = gptSlots.length,
            i;

        for (i = 0; i < len; i++) {
            var adSlot = adSlots[i], gptSlot = gptSlots[i];
            if (adSlot.slotContainer !== gptSlot.getSlotElementId()) {
                console.error('Name mismatch for adSlot and gptSlot');
                continue;
            }
            slots.push({
                adSlot: adSlot,
                gptSlot: gptSlot
            });
        }

        function ls_targeting() {
            try {
                header_tag_manager.set_slot_targeting(slots);
                if (typeof callback === 'function') {
                    callback();
                }
            }
            catch (err) {
                printError(err);
            }
        }

        header_tag_manager.envoke_on_or_after_session_end(ls_targeting);
    }

    // header_tag_manager is wrapped in a function, we must hoist the following functions
    window.cygnus_index_parse_res = cygnus_index_parse_res;
    window.index_render = index_render;

    return {
        isEnabled: isEnabled,
        load: load,
        refresh: refresh,
        targeting: targeting
    };
    // End header_tag_manager closure
}());
/* modules/footer/init/timeline.js */
// TEST: the adservice config has a boolean toggle called mobileAds
var mobileAds = adService.mobileAds = karma.utilities.coerceBoolean(adService.mobileAds);

// TEST: window.karmaIntialized exists and is a boolean
window.karmaInitialized = window.karmaInitialized || false;

karma.timeline = (function(){
    "use strict";
    function adServiceReady(e){

        if (!adService.queueExecuted) {
            var logSlotRenderEnded = function(e) {
                    karma.log('Slot: ' + e.slot.getSlotElementId(), {label:'slotRenderEnded'});
                };
            // TEST: adService.queueExecuted exists and is true
            adService.queueExecuted = true;
            // TEST: if karma.docking.rail.isEnabled is true, right rail docking is initialized
            if (karma.docking.rail.isEnabled()){
               karma.docking.rail.init();
            }
            
            if (e) {
                // TEST: the KARMA log contains a slotRenderEnded entry
                logSlotRenderEnded(e);
            }

            // TEST: if enabled, timed refresh is initialized
            if (karma.refresh.timed.isEnabled()) {
                karma.refresh.timed.init();                 
            }

            // TEST: There is a globally-scoped array available on the page called adServiceQ
            window.adServiceQ = window.adServiceQ || [];
            if (typeof adServiceQ === "object") {
                while (adServiceQ.length > 0) {
                    if (typeof adServiceQ[0] === "function") {
                        adServiceQ[0]();
                    }
                    adServiceQ.splice(0,1);
                }
            }
            /* Modify command queue to execute any commands passed into it now that renderAds has initialized. */
            // TEST: window.adServiceQ has a property called 'push' that is a function
            adServiceQ = {
                push : function(func) {
                    if (typeof func === "function") {
                        func();
                    }
                }
            };
        }                        
    }

    function init(){
        // TEST: window.karmaInitialized is true    
        window.karmaInitialized = true;
        karma.log('Karma is running',{report:true,label:'KarmaServiceRunning',forceMessage:true});

        // TEST: if karma.header.js is not present on the page, request it (except on AR)
        karma.reload.header();
        // TEST: GPT's library is loaded
        karma.gpt.load();
        // TEST: targeting overrides are processed
        karma.targeting.override();
        // TEST: viewability focus listeners are added to the window
        karma.viewability.addFocusListeners();
        // TEST: the internal page count is set
        karma.utilities.setPageCount();
        // TEST: the ad unit is built
        karma.targeting.adunit.init();
        karma.utilities.initKismet();
        // TEST: page-level targeting values are initialized
        karma.targeting.pageSetup();
        // TEST: out of page slots are injected
        karma.slots.injectOutOfPageSlots();
        // TEST: if any callbacks are present, they are fired
        karma.callbacks.init();
        // TEST: the response data for each ad is added as a callback
        karma.callbacks.add(karma.slots.setResponseData);
        // TEST: the refresh queue is processed
        karma.refresh.initQueueProcessing();
        // TEST: if the header_tag_manager is included, call Yieldbot's library early
        if (!karma.partner.header_tag_manager) {
            karma.partner.yieldbot.earlyCallIntentScript(); /* Calling Yieldbot's library early in the process */   
        } 
        // TEST: the KARMA config is loaded
        karma.config.load();
    }

    function setup(ads){
        // TEST: once the config is loaded, the KARMA log contains an entry called AdSetupStart
        karma.log({report:true,label:'AdSetupStart',referencePoint:'ConfigFetchStart',reportLabel: karma.targeting.get('type')}); 
        // TEST: the KARMA config is processed
        karma.config.process(ads);
        // TEST: KARMA slots are initialized
        karma.slots.setup();
        // TEST: the header bidding partners are initialized
        karma.partner.init();
    }

    function proceedToFinish() {
    
        function gptSetup(adSlotsArray) {
            // TEST: the KARMA slots are registered with GPT                     
            karma.slots.define();
            // TEST: docking-related targeting is set
            karma.docking.targeting();
            // TEST: Krux-related targeting is set
            karma.partner.krux.targeting();
            // TEST: A9 targeting is set
            karma.partner.a9.targeting(adSlotsArray);
            // TEST: GPT is enabled
            karma.gpt.enable();
            // TEST: GPT slots are set to display
            karma.gpt.displayAllSlots();
            // TEST: the instant slots are reported through GA
            karma.reporting.initialSlots();
            // TEST: the log contains an entry that says 'Finished GPT Setup... calling DFP'
            karma.log('Finished GPT Setup... calling DFP');
            // TEST: the instant slots are requested
            karma.refresh.processQueue(adSlotsArray, false, false);
            // TEST: the list of default refreshable slots is built
            karma.refresh.buildDefaultSlots();

            // TEST: adServiceReady is called
            if (adSlotsArray.length === 0) {
                karma.refreshing = false;
                adServiceReady();
            } else {
                karma.callbacks.add(adServiceReady);   
            }   
        }

        karma.performance.onloadHandler();   // TEST: the KARMA log contains a KarmaInit entry
        karma.log({label:'KarmaInit',referencePoint:'PartnerTimerStart'});
        // TEST: the KARMA external methods are set up
        adService.renderAds = karma.methods.init();

        // TEST: if yieldbot is enabled, gptSetup is called once Yieldbot is loaded
        if (adService.yieldbotEnabled && !karma.partner.header_tag_manager) {
            karma.partner.yieldbot.queuePush(function(){
                karma.gpt.queuePush(function(){
                    gptSetup(adService.adSlots);    
                });
            });
        // TEST: if yieldbot is not enabled, gptSetup is called once GPT is loaded
        } else { 
            karma.gpt.queuePush(function(){
                gptSetup(adService.adSlots);   
            });
        }

        // TEST: if karma.docking.leaderboard.isEnabled is true, leaderboard docking is initialized
       karma.docking.leaderboard.init();        

        // TEST: if user-initiated refresh is enabled, window.refreshAdFrame exists and is a function
        if(adService.refresh.userInitiated.enabled){
            window.refreshAdFrame = karma.refresh.doRefresh;    
        }
    
        // TEST: if exposeKarma=true is in the URL, window.karma is an object containing all the KARMA methods
        if (karma.urlVars.isTrue('exposeKarma')) {
            karma.performance.exposeKarma();
        }

        // TEST: the performance onload handler is called to inject testing scripts
    }
    
    // TEST: window.adSetup exists and is a function    
    /* This function is called as a call-back when the JSON is loaded from the service */
    window.adSetup = setup;

    return {
        init: init,
        proceedToFinish: proceedToFinish
    };
}());

// TEST: reload params are checked, and we don't initialize the timeline if they are present    
if (!karma.reload.checkParams()) {
    if (!window.karmaInitialized) {
        karma.timeline.init();
    } else {
        // TEST: if KARMA is included twice, we skip the second intialization and add a KarmaServiceCalledTwice entry to the KARMA log
        karma.log('Karma has already initialized',{report:true,color:"red",label:'KarmaServiceCalledTwice',forceMessage:true});
    }
}


})(window);
